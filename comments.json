{
    "t1_lui5ao9": {
        "author": "ImJustPassinBy",
        "upvotes": 9,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1gfhkdg/comment/t1_lui5ao9][\ud83d\udd17]] \n*Votes* 9\n\nI've recently discovered [[https://github.com/fuxialexander/org-pdftools][~org-pdftools~]] and it offers everything I need for annotating pdfs in emacs.  I mainly use it to enhance the inbuilt function ~org-store-link~:\n\n\\* mark a passage in the pdf, run ~M-x org-store-link~, and it creates a highlight in the pdf (technically an empty annotation) and copies a link to it.\n\\* run ~C-c C-l~ in any org-buffer, and it pastes the link and prompts you for a name.\n\nThe installation is easy, you just need to hook it into ~org-mode~:\n\n#+BEGIN_SRC elisp\n  (use-package org-pdftools\n    :after (org pdf-tools)\n    :hook (org-mode . org-pdftools-setup-link))\n\n#+END_SRC\nThe only thing to keep in mind is that the highlights in the pdf are not automatically deleted, as you delete the link in the org buffer.  You have to do that manually in the pdf (~C-c C-a l~ to list all highlights, ~D~ to delete).\n\nIt has less features than [[https://github.com/org-noter/org-noter][~org-noter~]], but it is more flexible, which is why it suits my use-case better.  Unfortunately, it has ~org-noter~ as a dependency, so you will end up loading it either way.",
        "created_datetime": "2024-10-30 11:21:28+00:00"
    },
    "t1_lr35bm5": {
        "author": "SlowMovingTarget",
        "upvotes": 37,
        "body": "** u/SlowMovingTarget [[https://www.reddit.com/r/emacs/comments/t3_1fzmgwb/comment/t1_lr35bm5][\ud83d\udd17]] \n*Votes* 37\n\nNothing revolutionary (and veterans will already know this), but a nice little function for splitting out text to a separate file:\n\n1. Select the text (visual mode with Evil, or however you do it)\n2. ~M-x write-region~ and give it a file name to write out your selection to the named file. Nice and quick.\n\nIt's in the manual, and a basic little feature, but really handy. https://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-File-Ops.html\n\nI guess the other tip is to read the manual. :)",
        "created_datetime": "2024-10-09 13:20:00+00:00"
    },
    "t1_lr5ceqe": {
        "author": "fv__",
        "upvotes": 8,
        "body": "** u/fv__ [[https://www.reddit.com/r/emacs/comments/t3_1fzmgwb/comment/t1_lr5ceqe][\ud83d\udd17]] \n*Votes* 8\n\nC-x in a transient popup shows menu to save selected options e.g., it can be used to select ~ --force-with-lease~ by default while pushing in magit (P p)",
        "created_datetime": "2024-10-09 20:31:25+00:00"
    },
    "t1_lpbqo0e": {
        "author": "ImJustPassinBy",
        "upvotes": 14,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1fozctm/comment/t1_lpbqo0e][\ud83d\udd17]] \n*Votes* 14\n\nI recently got tired of constantly having to move my eyes to the bottom of Emacs, so I switched to posframes, [[https://blog.costan.ro/img/emacs-completion-system/switch-to.png][which moves the information in a central pop-up instead]].  For me, this meant using the packages:\n\n\\* [[https://github.com/tumashu/vertico-posframe][~vertico-posframe~]] - for [[https://github.com/minad/vertico][~vertico~]]\n\\* [[https://github.com/yanghaoxie/which-key-posframe][~which-key-posframe~]] - for [[https://github.com/justbur/emacs-which-key][~which-key~]]\n\\* [[https://github.com/yanghaoxie/transient-posframe][~transient-posframe~]] - for all transient commands, e.g., in [[https://github.com/magit/magit][~magit~]] or in [[https://github.com/kickingvegas/casual-suite][~casual-suite~]]\n\nBut regardless what you are using, chances are there already is a suitable ~*-posframe~ package for it.  Installing these packages is easy:\n\n#+BEGIN_SRC elisp\n  (use-package vertico-posframe\n    :init\n    (vertico-posframe-mode))\n  (use-package which-key-posframe\n    :init\n    (which-key-posframe-mode))\n  (use-package transient-posframe\n    :init\n    (transient-posframe-mode))\n#+END_SRC",
        "created_datetime": "2024-09-28 11:36:58+00:00"
    },
    "t1_lnqelw9": {
        "author": "mlk",
        "upvotes": 12,
        "body": "** u/mlk [[https://www.reddit.com/r/emacs/comments/t3_1fjnqgy/comment/t1_lnqelw9][\ud83d\udd17]] \n*Votes* 12\n\nI made my agenda collapsible (like org headings) by using outline-minor-mode. To make it work you need to name your agenda heading (~org-agenda-overriding-header~) with a starting asterisk, e.g \"* Current Tasks\", \"* Today Agenda*\" etc\n\n\n#+BEGIN_SRC elisp\n  (defun my/org-agenda-fold()\n  \"fold sections of agenda starting with \\\"* \\\" tab\"\n    (interactive)\n    (setq-local outline-regexp \"^\\\\* \")\n    (setq-local outline-heading-end-regexp \"\\n\")\n    (setq-local outline-minor-mode-prefix (kbd \"C-'\"))\n    (outline-minor-mode)\n    (local-set-key outline-minor-mode-prefix outline-mode-prefix-map)\n    (org-defkey org-agenda-mode-map [(tab)] #'outline-toggle-children)\n    (map!\n      :after evil-org-agenda\n      :map evil-org-agenda-mode-map\n      :m \"<tab>\" #'outline-toggle-children\n      :m \"<return>\" #'org-agenda-goto\n      :m \"S-<return>\" #'org-agenda-switch-to\n      :m \"C-<return>\" #'org-agenda-recenter))\n    \n(add-hook 'org-agenda-mode-hook 'my/org-agenda-fold)\n#+END_SRC",
        "created_datetime": "2024-09-18 13:49:47+00:00"
    },
    "t1_ls4kmt1": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_1fjnqgy/comment/t1_ls4kmt1][\ud83d\udd17]] \n*Votes* 10\n\n[removed]",
        "created_datetime": "2024-10-16 00:25:20+00:00"
    },
    "t1_lmzbyro": {
        "author": "meedstrom",
        "upvotes": 9,
        "body": "** u/meedstrom [[https://www.reddit.com/r/emacs/comments/t3_1fe504e/comment/t1_lmzbyro][\ud83d\udd17]] \n*Votes* 9\n\nElisp list indentation has been fixed since over two years ago (https://debbugs.gnu.org/cgi/bugreport.cgi?bug=21922).  A lot of people probably still use an initfile hack, to fix the following problem, that lists would indent like this:\n\n#+BEGIN_SRC elisp\n'(:foo bar\n       :baz zab\n       :rab oof)\n\n#+END_SRC\nBut now you can just add a space after the opening paren ~'(~.  This is the new convention.\n\n#+BEGIN_SRC elisp\n'( :foo bar\n   :baz zab\n   :rab oof)\n#+END_SRC",
        "created_datetime": "2024-09-13 20:04:11+00:00"
    },
    "t1_llfyzu6": {
        "author": "ImJustPassinBy",
        "upvotes": 11,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1f8nxb5/comment/t1_llfyzu6][\ud83d\udd17]] \n*Votes* 11\n\nI regularly work with different emacs frames on different monitors, and [[https://github.com/emacsmirror/framemove][~framemove~]] is great for switching between them.  It can hook into ~windmove~ (which means switching to an adjacent window becomes switching to an adjacent frame if no such window exists) and offers the functions:\n\n\\* ~fm-up-frame~: move to the frame over the current frame\n\\* ~fm-down-frame~: move to the frame below the current frame\n\\* ~fm-left-frame~: move to the frame left of the current frame\n\\* ~fm-right-frame~: move to the frame right of the current frame\n\nIt's not on any of the major package repositories, so you have to install it manually.  Thanks to [[https://github.com/emacsmirror][~emacsmirror~]], this can for example be done as follows using ~use-package~ and ~straight~ (adjust bindings to your liking):\n\n#+BEGIN_SRC elisp\n  (use-package framemove\n    :straight (:host github :repo \"emacsmirror/framemove\")\n    :init\n    (setq framemove-hook-into-windmove t) ;; doesn't work as :config or :custom\n    :bind\n    ((\"C-x 5 <up>\" . fm-up-frame)\n     (\"C-x 5 <down>\" . fm-down-frame)\n     (\"C-x 5 <left>\" . fm-left-frame)\n     (\"C-x 5 <right>\" . fm-right-frame)))\n\n#+END_SRC\nedit: The only thing I don't understand is why setting ~framemove-hook-into-windmove~ to ~t~ doesn't work in via ~:config~ or ~:custom~.  The package is loaded, ~C-h f~ confirms that ~fm-up-frame~ exists, but ~C-h v~ doesn't know ~framemove-hook-into-windmove~. ~framemove-hook-into-windmove~ exists after I run ~fm-up-frame~, but then it's set to ~nil~ and not ~t~.",
        "created_datetime": "2024-09-04 10:03:14+00:00"
    },
    "t1_lkrhqf7": {
        "author": "fuzzbomb23",
        "upvotes": 9,
        "body": "** u/fuzzbomb23 [[https://www.reddit.com/r/emacs/comments/t3_1f34tdh/comment/t1_lkrhqf7][\ud83d\udd17]] \n*Votes* 9\n\nOne of my favourite tips for managing my init file is the ~imenu~ support in ~use-package~. It's turned off by default, though:\n\n#+BEGIN_SRC elisp\n(setq use-package-enable-imenu-support t)\n#+END_SRC\n\nCombined with a nice imenu UI (~consult-imenu~ and Vertico, say) you can navigate your init file really quickly.",
        "created_datetime": "2024-08-31 00:51:51+00:00"
    },
    "t1_lfskmro": {
        "author": "rego_b",
        "upvotes": 9,
        "body": "** u/rego_b [[https://www.reddit.com/r/emacs/comments/t3_1eghspj/comment/t1_lfskmro][\ud83d\udd17]] \n*Votes* 9\n\n~C-x C-e~ to edit current command line in bash which opens the line in emacs (maybe not emacs related but I found this recently useful when working in the terminal)",
        "created_datetime": "2024-07-31 10:46:29+00:00"
    },
    "t1_lfsffnb": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_1eghspj/comment/t1_lfsffnb][\ud83d\udd17]] \n*Votes* 8\n\n[deleted]",
        "created_datetime": "2024-07-31 09:52:36+00:00"
    },
    "t1_lg6q2rq": {
        "author": "Motor_Mouth_",
        "upvotes": 8,
        "body": "** u/Motor_Mouth_ [[https://www.reddit.com/r/emacs/comments/t3_1eghspj/comment/t1_lg6q2rq][\ud83d\udd17]] \n*Votes* 8\n\nFor users of [[https://github.com/dajva/rg.el][rg.el]] (emacs interface to ripgrep) there is [[https://github.com/phiresky/ripgrep-all][rga]] (ripgrep-all) a wrapper around ripgrep that \"enables it to search in pdf, docx, sqlite, jpg, movie subtitles (mkv, mp4), etc.\" You can set the rg executable in the configuration of rg.el like so:    ~(setq rg-executable (executable-find \"rga\")~ to enable search in multiple document types.",
        "created_datetime": "2024-08-02 19:11:58+00:00"
    },
    "t1_leom8fv": {
        "author": "winters_here",
        "upvotes": 10,
        "body": "** u/winters_here [[https://www.reddit.com/r/emacs/comments/t3_1eaw1ia/comment/t1_leom8fv][\ud83d\udd17]] \n*Votes* 10\n\nSimple hack to add attributes to the ~<html>~ tag of an exported org file by escaping the quote of the language header.\n\n#+BEGIN_SRC elisp\n#+HTML_DOCTYPE: html5\n#+LANGUAGE: en\" data-theme=\"dark\n\n#+END_SRC\nThis when exported to html using ~org-html-export-to-html~ will result in:\n\n#+BEGIN_SRC elisp\n<html lang=\"en\" data-theme=\"dark\">\n\n#+END_SRC\nUseful when you include some classless css libraries which require you to add attributes to directly to ~<html>~ tag.\n\nDon't skip ~HTML_DOCTYPE~ else it will duplicate the attribute because one extra will be added due to ~xml:lang~",
        "created_datetime": "2024-07-24 09:42:47+00:00"
    },
    "t1_ldsl3vy": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_1e5ctk2/comment/t1_ldsl3vy][\ud83d\udd17]] \n*Votes* 10\n\nI recently discovered the [[https://github.com/gonewest818/dimmer.el][Dimmer]] package and can't believe I didn't try it until now.  It subtly dims  windows that aren't focused, just enough to draw your eyes to the window that *is* focused.  And of course, you can customize how much it dims and exclude certain buffers.\n\nI love things that reduce cognitive load like this.  You don't realize how much time you spent looking for little clues like a solid cursor, until you don't have to anymore.",
        "created_datetime": "2024-07-18 16:34:00+00:00"
    },
    "t1_l9cmdp9": {
        "author": "sauntcartas",
        "upvotes": 11,
        "body": "** u/sauntcartas [[https://www.reddit.com/r/emacs/comments/t3_1djdync/comment/t1_l9cmdp9][\ud83d\udd17]] \n*Votes* 11\n\nI started using org-capture when I started my current job several years ago.  I recorded my daily activities using this template:\n\n#+BEGIN_SRC elisp\n(setq org-capture-templates\n      '((\"d\" \"Done\" entry (file+olp+datetree \"~/org/done.org\"))))\n\n#+END_SRC\nA minor annoyance was that an unwanted link to whatever file location I happened to be in when I invoked org-capture was stored along with my log entry.  I made occasional desultory efforts over the years to remove it, but I just couldn't figure it out.  I recently made a more concerted effort and _finally_ was able to work it out after poring over the documentation for the ~org-capture-templates~ variable.  It turns out the default \"template\" for the ~entry~ capture type is ~\"* %?\\n%a\"~, where the code ~%a~ means \"annotation,\" ie, a link to the file location.  So I just had to change my definition to this:\n\n#+BEGIN_SRC elisp\n(setq org-capture-templates\n      '((\"d\" \"Done\" entry (file+olp+datetree \"~/org/done.org\") \"* %?\")))\n#+END_SRC",
        "created_datetime": "2024-06-19 19:02:38+00:00"
    },
    "t1_l8d30q3": {
        "author": "JDRiverRun",
        "upvotes": 9,
        "body": "** u/JDRiverRun [[https://www.reddit.com/r/emacs/comments/t3_1de1hkf/comment/t1_l8d30q3][\ud83d\udd17]] \n*Votes* 9\n\nA few people have asked about my code to change cursor color when repeat-mode is active (i.e. while you are repeating a command).  I rely on it. See [[https://gist.github.com/jdtsmith/a169362879388bc1bdf2bbb977782d4f][this gist]] for the details.",
        "created_datetime": "2024-06-13 01:47:13+00:00"
    },
    "t1_l687lg9": {
        "author": "Usual_Office_1740",
        "upvotes": 12,
        "body": "** u/Usual_Office_1740 [[https://www.reddit.com/r/emacs/comments/t3_1d371oz/comment/t1_l687lg9][\ud83d\udd17]] \n*Votes* 12\n\nI've just started to use macros. They are amazing. Here are my tips. C-x -( to start recording. C-x-) to stop recording. F4 to run last recorded macro. Always start at the beginning of a line. Always move by words or lines. If you go forward two chars and the next line needs you to go forward three chars, the macro won't work. Always return to the beginning of the line. For added awesome move down to the next line, positioning yourself to use the macro again.",
        "created_datetime": "2024-05-29 20:34:14+00:00"
    },
    "t1_l33y04q": {
        "author": "ImJustPassinBy",
        "upvotes": 10,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1cmzd47/comment/t1_l33y04q][\ud83d\udd17]] \n*Votes* 10\n\nNot from me, but I just wanted to share /u/arthurno1 one-line tip to get ~which-key~ to work with ~dired~ (see screenshot in linked post):\n\nhttps://www.reddit.com/r/emacs/comments/1clvkfe/announcing_casual_dired_an_opinionated_porcelain/l2yi5tn/\n\nI assume the same trick applies to other mode-maps as well.",
        "created_datetime": "2024-05-08 10:04:15+00:00"
    },
    "t1_l359pqx": {
        "author": "AdjointFunctor",
        "upvotes": 8,
        "body": "** u/AdjointFunctor [[https://www.reddit.com/r/emacs/comments/t3_1cmzd47/comment/t1_l359pqx][\ud83d\udd17]] \n*Votes* 8\n\nI (re) discovered rectangle mode recently. Very useful when deleting lots of indents. C-x spc then make the region. https://emacsredux.com/blog/2014/01/01/a-peek-at-emacs-24-dot-4-rectangular-selection/",
        "created_datetime": "2024-05-08 15:54:23+00:00"
    },
    "t1_l2cv5cx": {
        "author": "pt-guzzardo",
        "upvotes": 8,
        "body": "** u/pt-guzzardo [[https://www.reddit.com/r/emacs/comments/t3_1chgsxe/comment/t1_l2cv5cx][\ud83d\udd17]] \n*Votes* 8\n\n#+BEGIN_SRC elisp\n(defun copy-source-for-reddit ()\n  (interactive)\n  (let ((contents (buffer-substring (point) (mark))))\n    (with-temp-buffer\n      (insert contents)\n      (mark-whole-buffer)\n      (indent-rigidly (point) (mark) 4 t)\n      (mark-whole-buffer)\n      (kill-ring-save 0 0 t))))\n\n#+END_SRC\nA handy little snippet for exporting code to reddit markdown. Takes the region, prepends four spaces to each line, and then copies it to the kill ring to be pasted in your browser, without modifying the original buffer.",
        "created_datetime": "2024-05-03 05:14:49+00:00"
    },
    "t1_l11l7he": {
        "author": "remillard",
        "upvotes": 12,
        "body": "** u/remillard [[https://www.reddit.com/r/emacs/comments/t3_1cbsvxd/comment/t1_l11l7he][\ud83d\udd17]] \n*Votes* 12\n\nI thought about making a whole post about this, but it's mostly ancillary appreciation so maybe this is a better place.  Anyhow, for anyone working with code projects, I'm finding that project.el is completely supplanting my previously heavy use of Treemacs.  I liked Treemacs because it's a very similar feel to the file/project sidebar in Sublime Text and VSCode (and others I'm sure).  It was kind of reassuring.  And dired is nice for many things, but navigating a lot of directories does get a little tedious compared to just opening nested directories in Treemacs. \n\nWell, I don't even remember why I started tinkering with project.el.  I think I read a post where someone described switching projects, so I set it up, figured couldn't hurt.  Man, definitely a good idea.  The \"project goto file\" (~C-x p f~) is insanely convenient.  I also have ctags support setup so a quick keybind will let me switch files based on definition, and between the two, I get through files across the project seamlessly.  The project find directory is a faster way to direct dired to a place where I do want to see where things are stored.\n\nI suspect completion is doing a lot of heavy lifting here though too, so a perfectly pristine project.el use might have a different experience, but those are quite common anymore.\n\nAnyway, I haven't popped open the Treemacs sidebar in weeks now, and just felt like I should write something in case someone was curious about how handy it was.",
        "created_datetime": "2024-04-24 13:46:10+00:00"
    },
    "t1_kywimnf": {
        "author": "geza42",
        "upvotes": 20,
        "body": "** u/geza42 [[https://www.reddit.com/r/emacs/comments/t3_1c0gg7n/comment/t1_kywimnf][\ud83d\udd17]] \n*Votes* 20\n\nYasnippet has the capability of surrounding. For example, if you have this C++ namespace snippet:\n\n#+BEGIN_SRC elisp\n# -*- mode: snippet -*-\n# name: namespace-surround\n# key: ns\n# --\nnamespace ${1}${1:$(if (> (length yas-text) 0) \" {\" \"{\")}\n~yas-selected-text~$0\n} // namespace${1:$(if (> (length yas-text) 0) (concat \" \" (substring-no-properties yas-text)) \"\")}\n\n#+END_SRC\nThen if you bind ~(yas-expand-snippet (yas-lookup-snippet \"namespace-surround\"))~ to some key, then you can select some code, press your keybinding, and the selected code will be surrounded by \"namespace NAME {\" and \"} // namespace NAME\".\n\nhttps://i.redd.it/fbsbbr98smtc1.gif",
        "created_datetime": "2024-04-10 10:43:05+00:00"
    },
    "t1_kxur0j8": {
        "author": "saltwaterflyguy",
        "upvotes": 11,
        "body": "** u/saltwaterflyguy [[https://www.reddit.com/r/emacs/comments/t3_1bun8ky/comment/t1_kxur0j8][\ud83d\udd17]] \n*Votes* 11\n\ndescribe-\\*. It is one of the most useful feature sets to access documentation for just about everything there is in Emacs. Not sure what key bindings are set for a given mode? M-x describe-mode or C-h m. Need to know what font is begin used for a certain piece of text? M-x describe-char. Need to know how a given command works? M-x describe-command or C-h x. Need to know the value of a given variable? M-x describe-variable or C-h v.\n\nIf you are new to Emacs you will get so many answers to your questions by getting to know all of the describe functions.",
        "created_datetime": "2024-04-03 13:59:07+00:00"
    },
    "t1_kuo1f9y": {
        "author": "vkazanov",
        "upvotes": 19,
        "body": "** u/vkazanov [[https://www.reddit.com/r/emacs/comments/t3_1bdm6mc/comment/t1_kuo1f9y][\ud83d\udd17]] \n*Votes* 19\n\nA dump of my Emacs-related principles after 18 years of tinkering:\n\n1. Don't try to replicate a static IDE setup, Emacs is fluid. \n2. Emacs Lisp is inevitable for Emacser to make this fluidity possible.\n3. Language-agnostic is better than language-specific. \n4. Embrace display-alist, fast window manipulation, winner-mode. \n5. .emacs.el reset every couple of years to accomodate innovation. \n6. Org-mode/org-roam for all documentation, projects, tips. The agenda is not set in stone. Use queries, filters, tweak, evolve things. \n7. A contextual dwim is always better than many keybindings. \n8. Use completion everywhere on everything (vertico is magic).  \n9. Contribute to the core and favourite packages.\n\nI am a beginner though, things might change.",
        "created_datetime": "2024-03-13 12:33:07+00:00"
    },
    "t1_ktogga6": {
        "author": "demosthenex",
        "upvotes": 10,
        "body": "** u/demosthenex [[https://www.reddit.com/r/emacs/comments/t3_1b7uj43/comment/t1_ktogga6][\ud83d\udd17]] \n*Votes* 10\n\nM-x ielm  Use the repl while learning elisp coding. I had no idea!",
        "created_datetime": "2024-03-06 22:30:32+00:00"
    },
    "t1_ksifwh1": {
        "author": "geza42",
        "upvotes": 12,
        "body": "** u/geza42 [[https://www.reddit.com/r/emacs/comments/t3_1b20xgn/comment/t1_ksifwh1][\ud83d\udd17]] \n*Votes* 12\n\nIf you use an LSP server with semantic highlighting, it's worth checking out the value of ~font-lock-maximum-decoration~. For example, I use ~c++-mode~ with ~lsp-mode~ (with clangd), I decreased ~font-lock-maximum-decoration~ to ~2~, and I didn't notice any highlighting difference (because the lost highlighting by ~c++-mode~ gets highlighted by ~lsp-mode~), while ~c++-mode~ font-locking become faster (~c++-mode~ 's font-locking works well 99.9% of the time, but sometimes it can become slow in some circumstances, these slowdowns seems to be gone).\n\nI use:~(setq font-lock-maximum-decoration '((c-mode . 2) (c++-mode . 2) (t . t)))~",
        "created_datetime": "2024-02-28 09:17:26+00:00"
    },
    "t1_kphrvz3": {
        "author": "bopboa",
        "upvotes": 9,
        "body": "** u/bopboa [[https://www.reddit.com/r/emacs/comments/t3_1aky57w/comment/t1_kphrvz3][\ud83d\udd17]] \n*Votes* 9\n\nThis is how to have a beacon without installing any packages.\n\n#+BEGIN_SRC elisp\n  (defun pulse-line (_)\n    (pulse-momentary-highlight-one-line (point)))\n  (setq window-selection-change-functions '(pulse-line))\n#+END_SRC",
        "created_datetime": "2024-02-08 15:18:23+00:00"
    },
    "t1_kpct4cp": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_1aky57w/comment/t1_kpct4cp][\ud83d\udd17]] \n*Votes* 10\n\nMany of you probably know of this, but I found \"indirect buffers\" useful.\n\nWhen I'm in Vim, I've found it useful to sometimes split a buffer into two windows, and use code folding to view different parts of the same file in the two windows. But this doesn't work in Emacs, because the \"folding\" and \"narrow\" states of the buffer are synced between the windows in contrast to Vim. One concrete use case I had: I have a huge Org file, and wanted to narrow ~C-x n s~ into different headings of the file in different windows.\n\nIndirect buffers solve this. It makes two buffers for one file, and these buffers have separate settings for folding, narrowing, etc. But the buffer contents are still synced, so there's no risk of diverging file states. With default keybindings, I found that ~C-x 4 c C-x n s~ did what I wanted.",
        "created_datetime": "2024-02-07 17:14:26+00:00"
    },
    "t1_kjcu7vp": {
        "author": "badmaxton",
        "upvotes": 9,
        "body": "** u/badmaxton [[https://www.reddit.com/r/emacs/comments/t3_19ec8v5/comment/t1_kjcu7vp][\ud83d\udd17]] \n*Votes* 9\n\nJust added this to the ~:init~ section of my embark configuration:\n\n#+BEGIN_SRC elisp\n(define-key minibuffer-local-map [C-tab] 'embark-select)\n\n#+END_SRC\nThis allows super-convenient marking of entries for later ~embark-all~ using control-tab, instead of having to go first through the ~embark~ menu. (By default, this key binding is mapped to ~file-cache-minibuffer-complete~, which I never use.)",
        "created_datetime": "2024-01-24 14:54:35+00:00"
    },
    "t1_kibmgv2": {
        "author": "lesliesrussell",
        "upvotes": 8,
        "body": "** u/lesliesrussell [[https://www.reddit.com/r/emacs/comments/t3_198rnkj/comment/t1_kibmgv2][\ud83d\udd17]] \n*Votes* 8\n\n[[https://gist.github.com/lesliesrussell/46302d413fcf49e9717eeea57fdadcbf][transient map for movement]]\n\nDefines a transient keymap for movement controls and sets up a global key binding to activate this transient map. This transient map, \\~my-movement-transient-map\\~, includes bindings for various movement commands like moving forward or backward by a word or character and moving to the next or previous line. The \\~activate-my-movement-map\\~ function is defined to activate this transient map, and it is globally bound to \\~C-f\\~.\n\n&#x200B;\n\nThis setup allows you to press \\~C-f\\~ followed by one of the specified keys (\\~f\\~, \\~b\\~, \\~c\\~, \\~l\\~, \\~n\\~, \\~p\\~) to perform the corresponding movement operation. The \\~set-transient-map\\~ call with a second argument of \\~t\\~ ensures that the transient map stays active until one of its keys is pressed.\n\n&#x200B;\n\nThis is a neat way to create a custom, modal-like interface for movement within Emacs, leveraging your Emacs Lisp skills to tailor your editing environment to your preferences. If you have any specific modifications or additional features you'd like to implement, feel free to ask!\n\nI didn't want to drop code in the thread so i put it in a gist",
        "created_datetime": "2024-01-17 19:20:18+00:00"
    },
    "t1_khe4dq6": {
        "author": "JDRiverRun",
        "upvotes": 11,
        "body": "** u/JDRiverRun [[https://www.reddit.com/r/emacs/comments/t3_1933co6/comment/t1_khe4dq6][\ud83d\udd17]] \n*Votes* 11\n\nI have long had convenience bindings for ~org-emphasize~ like ~super-i~ for /italic/, that match system bindings.  But I always wanted these to *be smarter*, i.e. do something useful when there is no text selected.  Something like intelligently toggling emphasis depending on whether you were already in the right kind of emphasized text, or just emphasize the word at point if not.\n\n[[https://gist.github.com/jdtsmith/55e6a660dd4c0779a600ac81bf9bfc23][Check out my solution]] (scroll down to see how it acts).  Will miss this behavior in other apps!",
        "created_datetime": "2024-01-11 17:47:10+00:00"
    },
    "t1_kg4ni5d": {
        "author": "algor512",
        "upvotes": 12,
        "body": "** u/algor512 [[https://www.reddit.com/r/emacs/comments/t3_18xebux/comment/t1_kg4ni5d][\ud83d\udd17]] \n*Votes* 12\n\nRecently I discovered that ~C-h C-q~ (or ~M-x help-quick~) opens a small window showing \\*Quick Help\\* buffer with a nice overview of some basic keybindings. It seems that the content of this buffer is configurable via the variable ~help-quick-sections~.\n\nI intend to use it as a cheatsheet, reminding me about rare keybindings I always forget; I believe it is easy to make it context-dependent, just by changing the value of ~help-quick-sections~.",
        "created_datetime": "2024-01-03 14:24:47+00:00"
    },
    "t1_kgce54q": {
        "author": "camel_case_t",
        "upvotes": 10,
        "body": "** u/camel_case_t [[https://www.reddit.com/r/emacs/comments/t3_18xebux/comment/t1_kgce54q][\ud83d\udd17]] \n*Votes* 10\n\nThis is maybe more a macOS tip than an Emacs tip, but it always bothered me that ~C-f~, ~C-b~, etc worked in any text box, but not ~M-f~, etc -- turns out that you can easily change that throughout the OS!\n\nI created this file and now Emacs keybindings work everywhere:\n\n#+BEGIN_SRC elisp\n/* ~/Library/KeyBindings/DefaultKeyBinding.dict */\n{\n    /* Additional Emacs bindings */\n    \"~f\" = \"moveWordForward:\";\n    \"~b\" = \"moveWordBackward:\";\n    \"~<\" = \"moveToBeginningOfDocument:\";\n    \"~>\" = \"moveToEndOfDocument:\";\n    \"~v\" = \"pageUp:\";\n    \"~d\" = \"deleteWordForward:\";\n    \"~^h\" = \"deleteWordBackward:\";\n    \"~\\010\" = \"deleteWordBackward:\";  /* Option-backspace */\n    \"~\\177\" = \"deleteWordBackward:\";  /* Option-delete */\n}\n\n#+END_SRC\nYou can read more here: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/EventOverview/TextDefaultsBindings/TextDefaultsBindings.html",
        "created_datetime": "2024-01-04 22:16:24+00:00"
    },
    "t1_ke5xr5j": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_18mplfa/comment/t1_ke5xr5j][\ud83d\udd17]] \n*Votes* 10\n\nThis makes stack-outputs of debug-buffers much more readable:\n\n#+BEGIN_SRC elisp\n(setopt debugger-stack-frame-as-list t)\n#+END_SRC",
        "created_datetime": "2023-12-20 10:50:08+00:00"
    },
    "t1_kdobd72": {
        "author": "ayy_ess",
        "upvotes": 12,
        "body": "** u/ayy_ess [[https://www.reddit.com/r/emacs/comments/t3_18hc301/comment/t1_kdobd72][\ud83d\udd17]] \n*Votes* 12\n\nI recently discovered ~(setq read-minibuffer-restore-windows nil)~ which resolves my frustration that quitting the minibuffer would discard any changes to the window layout while the minibuffer was open. For example, by default, ~M-x C-h k k C-g~ quits the just opened help buffer. I'm sure to have missed many more QOL improvements from NEWS.",
        "created_datetime": "2023-12-16 22:15:37+00:00"
    },
    "t1_kahspwz": {
        "author": "vjgoh",
        "upvotes": 8,
        "body": "** u/vjgoh [[https://www.reddit.com/r/emacs/comments/t3_18149ql/comment/t1_kahspwz][\ud83d\udd17]] \n*Votes* 8\n\nI used to have a problem where eglot would decide that many mid-hierarchy directories were the project root and spin up a separate instance of clangd for each one (sometimes 10 or 12 total). This was almost certainly due to using emacs' built-in ~project~ to handle project discovery. At that point, I switched to lsp-mode because I generally find ~project~ to be impenetrable and poorly documented compared to projectile.\n\nI was forced to go back to eglot, however, because lsp-mode has been failing to parse things well for a while.\n\nLong story short, here's how you force ~project~ to find the actual project root if the automatic detection doesn't work. With this, eglot started working great, didn't spin up 10 instances of clangd, and has generally been ticking over just fine.\n\n~(setq project-vc-extra-root-markers '(\".project.el\" \".projectile\" \".dir-locals.el\"))~",
        "created_datetime": "2023-11-23 22:19:35+00:00"
    },
    "t1_k8dlt4c": {
        "author": "leothrix",
        "upvotes": 10,
        "body": "** u/leothrix [[https://www.reddit.com/r/emacs/comments/t3_17qh1hn/comment/t1_k8dlt4c][\ud83d\udd17]] \n*Votes* 10\n\nNeed to remove an element from a list when you're tinkering with elisp?\n\nSometimes when I'm adding and removing elements from hooks or variables like ~completion-at-point-functions~ I'll often need to tinker with the symbols I've added. You could evaluate some form somewhere, but I like to be lazy and just:\n\n#+BEGIN_SRC elisp\nM-x remove-hook\n\n#+END_SRC\nAnd you've got an interactive interface (using ~completing-read~) for removing arbitrary elements from any list-like variable. It's _technically_ for altering hooks, but you can abuse it to fool around with lists, too.",
        "created_datetime": "2023-11-08 16:51:54+00:00"
    },
    "t1_k8c4mz7": {
        "author": "Netherus",
        "upvotes": 10,
        "body": "** u/Netherus [[https://www.reddit.com/r/emacs/comments/t3_17qh1hn/comment/t1_k8c4mz7][\ud83d\udd17]] \n*Votes* 10\n\nJust recently found out M-u makes the next word upper case, and the same for M-l for lower case. Maybe nothing fancy, but it's kinda handy for me.",
        "created_datetime": "2023-11-08 09:29:31+00:00"
    },
    "t1_k4g09iw": {
        "author": "WorldsEndless",
        "upvotes": 16,
        "body": "** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_1758wua/comment/t1_k4g09iw][\ud83d\udd17]] \n*Votes* 16\n\n~(delete-blank-lines)~ ~(C-x C-o)~ is massively useful; I use it every day for text cleanup. Press it once and it deletes all but one blank line. Press it twice and it deletes that one, too.",
        "created_datetime": "2023-10-11 17:29:26+00:00"
    },
    "t1_k2gb81l": {
        "author": "alvarogonzalezs",
        "upvotes": 14,
        "body": "** u/alvarogonzalezs [[https://www.reddit.com/r/emacs/comments/t3_16tes2a/comment/t1_k2gb81l][\ud83d\udd17]] \n*Votes* 14\n\nIf you need to find all the occurrences of a string in the project files, but only **on some specific type of files**, you can use ~consult-ripgrep~ with ~-- -t~ in the search pattern.\n\nFor example, If you need occurrences of ~fancystr~ in files of type ~html~, the search pattern should be ~fancystr -- -t html~\n\nFrom ~consult-grep~ documentation, command line options can be passed to grep, specified behind ~--.~  The overall prompt input has the form:\n\n#+BEGIN_SRC elisp\n#async-input -- rg-opts#filter-string\n\n#+END_SRC\nI have just discovered this, and it made my day.",
        "created_datetime": "2023-09-27 16:43:12+00:00"
    },
    "t1_k1803gl": {
        "author": "AP145",
        "upvotes": 8,
        "body": "** u/AP145 [[https://www.reddit.com/r/emacs/comments/t3_16hh7u4/comment/t1_k1803gl][\ud83d\udd17]] \n*Votes* 8\n\nI used to always get confused why people say that the default Emacs key bindings hurt their pinky's, but then I realized that I don't touch type and thus I don't have to stretch my fingers anywhere for the default key bindings. Ironically my ineptitude at typing has saved me from repetitive stress injuries.",
        "created_datetime": "2023-09-19 02:55:28+00:00"
    },
    "t1_jxekm3a": {
        "author": "frosch03",
        "upvotes": 10,
        "body": "** u/frosch03 [[https://www.reddit.com/r/emacs/comments/t3_15yxdz3/comment/t1_jxekm3a][\ud83d\udd17]] \n*Votes* 10\n\nVery useful, but I keep forgetting it:\n\nIf you have two buffers open in one frame, where one contains just a few lines and otherwise just uses up a lot of space, you can shrink that buffer down just right by using: ~C-x -~\n\nAnd if you want to balance these two buffers again just use ~C-x +~",
        "created_datetime": "2023-08-23 12:37:15+00:00"
    },
    "t1_jwff8bw": {
        "author": "PriorOutcome",
        "upvotes": 10,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_15sjm3k/comment/t1_jwff8bw][\ud83d\udd17]] \n*Votes* 10\n\nI've been slowly accumulating cases for \"flexing\" the thing at point as a more general ~capitalize-word~ replacement:\n\n#+BEGIN_SRC elisp\n;; Stolen from the wiki somewhere\n(defun increment-number-at-point ()\n  \"Increment the number at point.\"\n  (interactive)\n  (skip-chars-backward \"0-9\")\n  (or (looking-at \"[0-9]+\")\n      (error \"No number at point\"))\n  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))\n    \n(defun lw-flex ()\n  \"Perform smart flexing at point.\n    \nE.g. capitalize or decapitalize the next word, increment number at point.\"\n  (interactive)\n  (let ((case-fold-search nil))\n    (call-interactively\n     (cond ((looking-at \"[0-9]+\") #'increment-number-at-point)\n           ((looking-at \"[[:lower:]]\") #'capitalize-word)\n           ((looking-at \"==\") (delete-char 1) (insert \"!\") (forward-char 2))\n           ((looking-at \"!=\") (delete-char 1) (insert \"=\") (forward-char 2))\n           ((looking-at \"+\") (delete-char 1) (insert \"-\") (forward-char 1))\n           ((looking-at \"-\") (delete-char 1) (insert \"+\") (forward-char 1))\n           ((looking-at \"<=\") (delete-char 2) (insert \">=\") (forward-char 2))\n           ((looking-at \">=\") (delete-char 2) (insert \"<=\") (forward-char 2))\n           ((looking-at \"<\") (delete-char 1) (insert \">\") (forward-char 1))\n           ((looking-at \">\") (delete-char 1) (insert \"<\") (forward-char 1))\n           (t #'downcase-word)))))\n\n#+END_SRC\nI bind it to ~M-c~.",
        "created_datetime": "2023-08-16 13:29:50+00:00"
    },
    "t1_jpwn2ts": {
        "author": "gusbrs",
        "upvotes": 9,
        "body": "** u/gusbrs [[https://www.reddit.com/r/emacs/comments/t3_14l3jn8/comment/t1_jpwn2ts][\ud83d\udd17]] \n*Votes* 9\n\nI was converting some old ~.odt~ notes files to ~.org~ today, and one of the things I wanted to do was to add two spaces after end of sentence periods for proper sentence navigation.  So there I was figuring out a general enough regexp for the nth time and, of course, I regretted not having taken note of this the last time. So I decided to do some searching for a good regexp and write it down this time, since this was obviously shared by someone somewhere. And it turns out Emacs has us covered, and I never knew: ~repunctuate-sentences~. I have no idea if this is new or has always been there. It is new to me. It uses ~query-replace-regexp~, so it's the same experience. And also can be configured for exclusions with ~repunctuate-sentences-filter~. Neat!",
        "created_datetime": "2023-06-28 20:43:42+00:00"
    },
    "t1_jl5zu6z": {
        "author": "leothrix",
        "upvotes": 14,
        "body": "** u/leothrix [[https://www.reddit.com/r/emacs/comments/t3_13jvhp7/comment/t1_jl5zu6z][\ud83d\udd17]] \n*Votes* 14\n\nFor ~use-package~ users (which I assume is many of us), did you know that profiling is easy to do? I'm not talking about ~esup~, but a built-in capability that makes it very straightforward to find places to optimize your ~init.el~ for significantly faster start times.\n\nEnable ~use-package-compute-statistics~ right after you load ~use-package~:\n\n#+BEGIN_SRC elisp\n(setq use-package-compute-statistics t)\n\n#+END_SRC\nRestart emacs, and then invoke ~use-package-report~. You'll get a table of the load times for each package that ~use-package~ manages. I discovered this and found an immediate way to cut my startup time in half by fixing a few packages that weren't deferred properly by adding the right ~:hook~ keyword.",
        "created_datetime": "2023-05-22 15:23:11+00:00"
    },
    "t1_jhrzybp": {
        "author": "BunnyLushington",
        "upvotes": 8,
        "body": "** u/BunnyLushington [[https://www.reddit.com/r/emacs/comments/t3_12zaqju/comment/t1_jhrzybp][\ud83d\udd17]] \n*Votes* 8\n\nI found myself debugging [[https://jwt.io][JWTs]] earlier this week and whomped up a little function to decode them from a region into a help buffer.\n\n#+BEGIN_SRC elisp\n(defun ii/decode-jwt (start end &optional jwt)\n  \"Decode JWT in region and print to help buffer.\"\n  (interactive \"r\")\n  (let* ((tok (if jwt jwt\n            (buffer-substring start end)))\n     (data (s-split \"\\\\.\" tok))\n     (header (car data))\n     (claims (cadr data)))\n(with-temp-buffer\n  (insert (format \"%s\\n\\n%s\"\n                  (base64-decode-string header t)\n                  (base64-decode-string claims t)))\n  (json-pretty-print-buffer)\n  (with-output-to-temp-buffer \"*JWT*\"\n    (princ (buffer-string)))))\n  t)\n#+END_SRC\n\nI'd forgotten about ~with-output-to-temp-buffer~ which is pretty handy.  The ~t~ at the end is there just to suppress an overly large echo area message.\n\n(This should be obvious but note that the JWT is not validated or verified.  This is intended for debugging only and the JWT should not be trusted.)",
        "created_datetime": "2023-04-26 12:36:06+00:00"
    },
    "t1_jgwlxuw": {
        "author": "WorldsEndless",
        "upvotes": 16,
        "body": "** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_12rlq4a/comment/t1_jgwlxuw][\ud83d\udd17]] \n*Votes* 16\n\nOften when literate programming I want to split up a code block, maybe copy-pasted with multiple functions in it, into separate blocks so I can put some text in between them. The command, with cursor within a ~BEGIN_SRC~ block, is ~org-babel-demarcate-block~ ~(C-c C-v d)~.",
        "created_datetime": "2023-04-19 17:32:30+00:00"
    },
    "t1_jg34ody": {
        "author": "alvarogonzalezs",
        "upvotes": 18,
        "body": "** u/alvarogonzalezs [[https://www.reddit.com/r/emacs/comments/t3_12jexep/comment/t1_jg34ody][\ud83d\udd17]] \n*Votes* 18\n\nI'm a big user of ~ffap~. I use this function with ~M-x~ each time I want to open a file whose name is under the cursor.\n\nBut this week I discovered ~ffap-bindings~. This function replaces some key bindings to use ~ffap~ when it makes sense. For example, it replaces ~find-file~ with ~find-file-at-point~, so the usual keybindings are enriched at no cost.",
        "created_datetime": "2023-04-13 12:41:30+00:00"
    },
    "t1_jf167qh": {
        "author": "AndreaSomePostfix",
        "upvotes": 19,
        "body": "** u/AndreaSomePostfix [[https://www.reddit.com/r/emacs/comments/t3_12cd23k/comment/t1_jf167qh][\ud83d\udd17]] \n*Votes* 19\n\norg-mode is amazing!\n\nI discovered \\~org-copy-visible\\~ the other day, when I wanted to send somebody only the outline of my notes.\n\nThat function (which is bound to C-c C-x v by default) let you copy just the outline for the selected region: very useful!",
        "created_datetime": "2023-04-05 09:56:21+00:00"
    },
    "t1_jf3ohpv": {
        "author": "sauntcartas",
        "upvotes": 10,
        "body": "** u/sauntcartas [[https://www.reddit.com/r/emacs/comments/t3_12cd23k/comment/t1_jf3ohpv][\ud83d\udd17]] \n*Votes* 10\n\nI work with multiple Git repositories in my day job, but one in particular occupies 95% of my time.  I've often wished I could set up Projectile so that if I run one of its commands while not in any repo, it will behave as if I'd changed to that main repo first.  I couldn't find a built-in way to do that, but got the effect I wanted with some advice:\n\n#+BEGIN_SRC elisp\n(defun default-to-main-project (dir)\n  (or dir *main-project-dir*))\n\n(advice-add 'projectile-ensure-project :override #'default-to-main-project)\n\n#+END_SRC\nI lose some of the functionality of ~projectile-ensure-project~, but I never used it anyway.",
        "created_datetime": "2023-04-05 20:53:04+00:00"
    },
    "t1_jc9t4tc": {
        "author": "PriorOutcome",
        "upvotes": 15,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_11rq2gl/comment/t1_jc9t4tc][\ud83d\udd17]] \n*Votes* 15\n\nPlain old ~query-replace~ has many cool features, first of all it respects the active region (if it's active it will only query for replacements in the active region).  There are many useful keys in addition to plain ~y~/~n~:\n\n~!~: replaces all remaning matches\n\n~u~: undo last replacement\n\n~E~: changes replacement string on the fly\n\nAnd many more you can see using ~?~.",
        "created_datetime": "2023-03-15 09:20:08+00:00"
    },
    "t1_jca66k0": {
        "author": "slinchisl",
        "upvotes": 10,
        "body": "** u/slinchisl [[https://www.reddit.com/r/emacs/comments/t3_11rq2gl/comment/t1_jca66k0][\ud83d\udd17]] \n*Votes* 10\n\nI'm once again reminded of the utility of ~read-key~ for small functions where one wants a nicer interface for choosing an alternative than universal arguments; taking an optional prompt, it simply reads a key from the keyboard and returns it.\n\nFor example, I recently wanted a function that prints a set of predefined dates for me into the current buffer, and it was as easy as\n\n#+BEGIN_SRC elisp\n(defun slot/insert-time ()\n  (interactive)\n  (let* ((formats '((?i \"ISO 8601\"  \"%Y-%m-%d\")\n                    (?l \"DDmmmYYYY\" \"%d%b%Y\")\n                    (?t \"Time\"      \"%H:%M\")))\n         (key (read-key\n               (cl-loop for (key label _) in formats\n                        concat (format \"[%s] %s \"\n                                       (propertize (single-key-description key) 'face 'bold)\n                                       label)))))\n    (->> (alist-get key formats)\n         cl-second\n         format-time-string\n         downcase                     ; Jan -> jan\n         insert)))\n#+END_SRC",
        "created_datetime": "2023-03-15 11:56:11+00:00"
    },
    "t1_jbe06qv": {
        "author": "geza42",
        "upvotes": 13,
        "body": "** u/geza42 [[https://www.reddit.com/r/emacs/comments/t3_11lqkbo/comment/t1_jbe06qv][\ud83d\udd17]] \n*Votes* 13\n\nYou can toggle vertico's height between 15 and \"almost full frame\" with this. When vertico is invoked, it will always have a height of 15. But if you have a lot of matches, and like to have a better overview, press the binding, and vertico will show a full frame of matches. This is useful for example when ~consult-buffer~ presents a lot of buffers.\n\n#+BEGIN_SRC elisp\n(advice-add 'vertico--setup :before (lambda () (setq vertico-count 15)))\n(define-key minibuffer-local-map (kbd \"s-'\") (lambda ()\n  (interactive)\n  (let ((vertico-resize t))\n    (setq vertico-count (if (= vertico-count 15) (- (frame-height) 5) 15))\n    (vertico--exhibit))))\n\n#+END_SRC\nAnother useful feature is to kill buffers in ~consult-buffer~ without manually invoking ~embark-act~. I miss this feature from Helm, where you can do actions using only one binding (no need to press an intermediate binding which invokes ~embark-act~). Note, I just blindly copied some of the logic from ~embark~, maybe there are some unnecessary things here.\n\n#+BEGIN_SRC elisp\n(defun my-embark-M-k (&optional arg)\n  (interactive \"P\")\n  (require 'embark)\n  (if-let ((targets (embark--targets)))\n      (let* ((target\n              (or (nth\n                  (if (or (null arg) (minibufferp))\n                      0\n                    (mod (prefix-numeric-value arg) (length targets)))\n                  targets)))\n            (type (plist-get target :type)))\n        (cond\n         ((eq type 'buffer)\n          (let ((embark-pre-action-hooks))\n            (embark--act 'kill-buffer target)))))))\n\n(define-key minibuffer-local-map (kbd \"M-k\") 'my-embark-M-k)\n\n#+END_SRC\nI'm not sure whether these two can be achieved out-of-the box, but I didn't find these functionalities, so I created them.",
        "created_datetime": "2023-03-08 10:59:31+00:00"
    },
    "t1_jajfxc9": {
        "author": "w0ntfix",
        "upvotes": 8,
        "body": "** u/w0ntfix [[https://www.reddit.com/r/emacs/comments/t3_11ey9ft/comment/t1_jajfxc9][\ud83d\udd17]] \n*Votes* 8\n\nturning off org-elements cache speeds up input latency for me (found from profiling):\n\n#+BEGIN_SRC elisp\n(setq org-element-use-cache nil)\n\n\n#+END_SRC\nit seems (at least on my org 9.6.1) to update the cache after calls to ~org-self-insert-command~ (so, a lot!)",
        "created_datetime": "2023-03-01 21:32:00+00:00"
    },
    "t1_j8m9rlj": {
        "author": "PriorOutcome",
        "upvotes": 20,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_112t0uo/comment/t1_j8m9rlj][\ud83d\udd17]] \n*Votes* 20\n\nWith an active region, you can freely toggle between rectangle mark mode and normal, you don't need to get rid of your active region to switch between the two.",
        "created_datetime": "2023-02-15 10:18:46+00:00"
    },
    "t1_j8mo1bz": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_112t0uo/comment/t1_j8mo1bz][\ud83d\udd17]] \n*Votes* 10\n\nPut the control keys next to space, mimicking mac's command key (which is effectively used as the equivalent of ctrl yet next to the space it's easier to press)\n\nWin - Alt - Ctrl - Space - Ctrl - Alt - Win",
        "created_datetime": "2023-02-15 13:05:13+00:00"
    },
    "t1_j8mpo5y": {
        "author": "pathemata",
        "upvotes": 9,
        "body": "** u/pathemata [[https://www.reddit.com/r/emacs/comments/t3_112t0uo/comment/t1_j8mpo5y][\ud83d\udd17]] \n*Votes* 9\n\nDoes anyone have an ~aspell~ setup with multiple dictionaries?\n\nWhen I try ~--extra-dict~ option I get an error: ~Expected language \"en\" but got \"de\"~.",
        "created_datetime": "2023-02-15 13:19:49+00:00"
    },
    "t1_j8u1ebf": {
        "author": "SlowValue",
        "upvotes": 8,
        "body": "** u/SlowValue [[https://www.reddit.com/r/emacs/comments/t3_112t0uo/comment/t1_j8u1ebf][\ud83d\udd17]] \n*Votes* 8\n\nI put a couple of similar functions on my ~<f5>~ key (with all combinations of modifier keys) and tend to forget the meanings of those combinations.\n\nSo I made a small function to give some help for a list of keybindings.:\n\n#+BEGIN_SRC elisp\n(defun my-generate-keybind-doc-on-keys (&rest keys)\n  \"generate help on some given  keybindings (kbd style).\"\n  (substring\n   (apply #'concat\n          (mapcar #'(lambda (key)\n                      (let* ((fun (key-binding (kbd key)))\n                             (fun-name (symbol-name fun))\n                             (doc (documentation fun 'raw))\n                             (oneline (substring doc 0 (string-match \"\\n\" doc))))\n                        (put-text-property 0 (length key) 'face 'font-lock-keyword-face key)\n                        (put-text-property 0 (length fun-name) 'face 'font-lock-function-name-face fun-name)\n                        (put-text-property 0 (length oneline) 'face 'font-lock-doc-face oneline)\n                        (format \"%10s : %-30s \u2192 %s\\n\" key fun-name oneline)))\n                  keys))\n   0 -1))\n\n#+END_SRC\nTo show that help in the echo buffer, one needs to define a command, which can be bound to a key:\n\n#+BEGIN_SRC elisp\n(defun my-show-help-on-some-keys ()\n  \"demo generate help on 3 keys\"\n  (interactive)\n  (message (my-generate-keybind-doc-on-keys \"C-s\"\n                                            \"<f1> k\"\n                                            \"C-c !\")))\n\n#+END_SRC\nThen calling the command ~my-show-help-on-some-keys~, shows following message in the echo buffer:\n\n#+BEGIN_SRC elisp\n   C-s : isearch-forward                \u2192 Do incremental search forward.\n<f1> k : helpful-key                    \u2192 Show help for interactive command bound to KEY-SEQUENCE.\n C-c ! : shell-here                     \u2192 Open a shell relative to default-directory.\n\n\n#+END_SRC\nRemark: I know that ~which-key~ exists, but I'm already above that level of knowledge and don't need ~which-key~ anymore.",
        "created_datetime": "2023-02-16 23:05:11+00:00"
    },
    "t1_ja41lso": {
        "author": "AnugNef4",
        "upvotes": 10,
        "body": "** u/AnugNef4 [[https://www.reddit.com/r/emacs/comments/t3_112t0uo/comment/t1_ja41lso][\ud83d\udd17]] \n*Votes* 10\n\nHow I got my Info Directory node ~C-h i~ to display all my installed .info files living under ~/opt/homebrew~ on an M1 Mac. I run emacs-plus@29 from [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted on github]].\n\ninit.el snippet\n\n#+BEGIN_SRC elisp\n(require 'info)\n(info-initialize)\n(push \"/opt/homebrew/share/info\" Info-directory-list)\n\n#+END_SRC\nrun this shell script to update the Directory node.\n\n#+BEGIN_SRC elisp\n#!/usr/bin/env bash\n    \nINFO_DIR=\"/opt/homebrew/share/info\"\nwhile read -r f; do\n    install-info --debug --keep-old \"$f\" \"$INFO_DIR\"/dir\ndone <<< $(find /opt/homebrew/Cellar -name \\*.info)\n#+END_SRC",
        "created_datetime": "2023-02-26 18:09:57+00:00"
    },
    "t1_j6rmvvf": {
        "author": "PriorOutcome",
        "upvotes": 33,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_10qo7vb/comment/t1_j6rmvvf][\ud83d\udd17]] \n*Votes* 33\n\nWhen you have an active region, ~undo~ will only undo changes in that region instead of the whole file.",
        "created_datetime": "2023-02-01 12:19:16+00:00"
    },
    "t1_j5umed8": {
        "author": "eleven_cupfuls",
        "upvotes": 12,
        "body": "** u/eleven_cupfuls [[https://www.reddit.com/r/emacs/comments/t3_10ktqj0/comment/t1_j5umed8][\ud83d\udd17]] \n*Votes* 12\n\nI jump into the built-in Elisp files a lot to see how things work. The indentation there is GNU standard, which uses a mix of tabs and spaces for alignment. The tabs have to be rendered as 8 spaces wide for the alignment to work, and I don't actually want that setting anywhere else. Since the files on Mac are inside the application bundle, I don't want to just add a .dir-locals.el file next to them, either.\n\n[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Directory classes]] to the rescue! My config makes a new directory variable class, ~builtin-elisp~, with a list saying that ~emacs-lisp-mode~ should use a ~tab-width~ of 8. Then it applies that class to the Elisp files in the application bundle:\n\n#+BEGIN_SRC elisp\n(use-package elisp-mode\n  :config\n  (dir-locals-set-class-variables\n   'builtin-elisp\n   '((emacs-lisp-mode . ((tab-width . 8)))))\n  (dir-locals-set-directory-class\n   (file-name-directory (directory-file-name (invocation-directory)))\n   'builtin-elisp))\n\n#+END_SRC\nAnd now when I visit one of those files, the alignment is always correct.",
        "created_datetime": "2023-01-25 18:04:19+00:00"
    },
    "t1_j420ea0": {
        "author": "oantolin",
        "upvotes": 10,
        "body": "** u/oantolin [[https://www.reddit.com/r/emacs/comments/t3_108zin2/comment/t1_j420ea0][\ud83d\udd17]] \n*Votes* 10\n\nDo you want a key binding to wrap the selection in some kind of delimiter? Here's a built-in solution:\n\n#+BEGIN_SRC elisp\n(defvar insert-pair-map\n  (let ((map (make-sparse-keymap)))\n    (define-key map [t] #'insert-pair)\n    map))\n\n(global-set-key (kbd \"C-S-w\") insert-pair-map)\n\n#+END_SRC\nThis setups up ~C-S-w~ to be a prefix map, ~insert-pair-map~. The only key binding in ~insert-pair-map~ is for ~[t]~, which means it is the default key binding and any key after the prefix will run the same command: ~insert-pair~. Now, ~insert-pair~ looks at which key was used to invoke it and if it is an opening delimiter it inserts both it and the corresponding closing delimiter (and if the region is active it insert the opening delimiter at the start and the closing delimiter at the end, wrapping the region).",
        "created_datetime": "2023-01-12 17:05:47+00:00"
    },
    "t1_j4ct1y1": {
        "author": "Nondv",
        "upvotes": 8,
        "body": "** u/Nondv [[https://www.reddit.com/r/emacs/comments/t3_108zin2/comment/t1_j4ct1y1][\ud83d\udd17]] \n*Votes* 8\n\nMaybe not new for anyone but I only recently found out that ~C-c <any letter>~ is conventionally reserved for user bindings. I was constantly afraid to define my own bindings bc of a potential clash so tended to use M-x instead. Now I finally bind my most used commands.\n\nWith the above in mind, Im also afraid to forget my bindings. I use which-key package so I wrote a function \"define-my-keybinding letter fn\" which binds the letter to ~C-c <letter>~ and to \"my-bindings\" keyset (prefix) which itself is bound to ~C-c m~. Basically, if i forget what bindings I use, I just press C-c m and which-key shows me all of MY bindings (yes, it shows them with C-c too but it's mixed with mode bindings so not helpful)",
        "created_datetime": "2023-01-14 20:23:35+00:00"
    },
    "t1_j14grej": {
        "author": "luiggi_oasis",
        "upvotes": 8,
        "body": "** u/luiggi_oasis [[https://www.reddit.com/r/emacs/comments/t3_zred55/comment/t1_j14grej][\ud83d\udd17]] \n*Votes* 8\n\nWhat's the deal with all these completion framework I keep hearing about? Vertical elm ivy company and whatnot.\n\nI think I have company in my init.el but I'm not even sure I'm actually using it (maybe I am and I'm just unaware). But why are they everywhere? I see them mentioned in at least every any two emacs threads.",
        "created_datetime": "2022-12-21 16:33:01+00:00"
    },
    "t1_ix0a6ui": {
        "author": "gusbrs",
        "upvotes": 9,
        "body": "** u/gusbrs [[https://www.reddit.com/r/emacs/comments/t3_ywnt6p/comment/t1_ix0a6ui][\ud83d\udd17]] \n*Votes* 9\n\nSome weeks ago, u/paretoOptimalDev made an interesting post about using more ~next-buffer~ and ~previous-buffer~ instead of ~switch-to-buffer~ (https://redd.it/ybqp3m). I liked the post and had captured it for later and only now could process it properly.\n\nThe reasoning for using ~next-buffer~ and ~previous-buffer~ is good, but pretty much everyone complained about their default bindings.\n\nIt is worth noting that Emacs 28 has included ~repeat-mode~ and Emacs 29 has added ~next-buffer~ and ~previous-buffer~ to the repeat maps. So, if you're in Emacs 29, just enabling ~repeat-mode~ gets you a better behavior for this. You can start with ~C-x <right>~ and, after that, just the arrow keys get you to the next or previous buffer.\n\nIf you're still on Emacs 28, you can use:\n\n#+BEGIN_SRC elisp\n(defvar buffer-navigation-repeat-map\n  (let ((map (make-sparse-keymap)))\n    (define-key map (kbd \"<right>\") 'next-buffer)\n    (define-key map (kbd \"<left>\") 'previous-buffer)\n    map)\n  \"Keymap to repeat ~next-buffer' and ~previous-buffer'.  Used in ~repeat-mode'.\")\n(put 'next-buffer 'repeat-map 'buffer-navigation-repeat-map)\n(put 'previous-buffer 'repeat-map 'buffer-navigation-repeat-map)\n#+END_SRC",
        "created_datetime": "2022-11-19 19:16:31+00:00"
    },
    "t1_iw00xhx": {
        "author": "andyjda",
        "upvotes": 10,
        "body": "** u/andyjda [[https://www.reddit.com/r/emacs/comments/t3_yqciht/comment/t1_iw00xhx][\ud83d\udd17]] \n*Votes* 10\n\nI started using ~god-mode~, but I found it hard to get used to it at first: there was no easy way to check what command would be triggered by what key-sequence. \n\nI wrote up a ~god-mode~\\-specific ~describe-key~, which translates ~god-mode~ key-sequences into commands and shows their usual description. I think it's a great way to get familiar with how the package handles keys, and it allows users to invoke ~describe-key~ without leaving god-mode (previously, most keys would just show information about the generic ~god-mode-self-insert-command~)\n\nI also reached out to the package's maintainers, and this feature (after some tweaking) [[https://github.com/emacsorphanage/god-mode][just got added to the master branch]]. It was a great way to get familiar with ~god-mode~ code and its behavior, and I'm happy to have made my first contribution to an Emacs package.",
        "created_datetime": "2022-11-11 21:53:51+00:00"
    },
    "t1_itw7yp2": {
        "author": "pedzsanReddit",
        "upvotes": 8,
        "body": "** u/pedzsanReddit [[https://www.reddit.com/r/emacs/comments/t3_ydsjfy/comment/t1_itw7yp2][\ud83d\udd17]] \n*Votes* 8\n\nI spent the past week cleaning up my Emacs init files and I bumped into this little gem.  I call it \"ZSH man page search mode\" because it was the place that I first needed it.\n\nI do ~M-x man zshall(1)~ fairly frequently (and don't forget to ~widen~ so you can see all of the pages).  Then I would start searching for what I was looking for.  The man page is nicely structured so if I wanted to find \"foo\", search for \"foo\" had too many hits.  What I wanted to find was the place where \"foo\" is described.\n\nThis little search does the trick.  It is probably useful for other man pages and perhaps even other places but for now... I call it \"ZSH man page search\"\n\nEnjoy!\n\n#+BEGIN_SRC elisplisp\n  (defun zsh-manpage-search-regexp (string &optional lax)\n\"Returns a string to search for entries in the zshall man page\"\n(format \"\\n[A-Z ]*\\n \\\\{7\\\\}%s%s\" string (if lax \"\" \"\\\\_>\")))\n\n  (isearch-define-mode-toggle zsh-manpage \"z\" zsh-manpage-search-regexp \"\\\n  Searching zshall man page for where a concept is described\")\n#+END_SRC",
        "created_datetime": "2022-10-26 20:28:56+00:00"
    },
    "t1_isze25m": {
        "author": "agumonkey",
        "upvotes": 15,
        "body": "** u/agumonkey [[https://www.reddit.com/r/emacs/comments/t3_y7wrdn/comment/t1_isze25m][\ud83d\udd17]] \n*Votes* 15\n\nnot emacs per se, but jack rusher did a talk about programming 'ux / ergonomics / pragmatics' with a lot of fun ideas about coding, past (lisp machines, smalltalk ... ) or more recent clojure based tools\n\nhttps://www.youtube.com/watch?v=8Ab3ArE8W3s\n\nhope you enjoy it\n\nwarning: poop emoji",
        "created_datetime": "2022-10-19 21:27:26+00:00"
    },
    "t1_is1ygyw": {
        "author": "gusbrs",
        "upvotes": 13,
        "body": "** u/gusbrs [[https://www.reddit.com/r/emacs/comments/t3_y1y0kq/comment/t1_is1ygyw][\ud83d\udd17]] \n*Votes* 13\n\nI've been using ~mu4e~ for some years now, and I really love it. However, I'm also a Gmail user, don't love it, but consider myself stuck with it (given budget constraints and it being my email for several years already). This makes me always weary of \"the next Google shenanigan\" which might break my workflow. One of the things I have learned to cherish about using ~mu4e~ is its integration with Org, with it's ~org-capture~ support, which enables me not to confuse my Inbox with my todo list, thus keeping my Inbox clean. So I came up with a preventive function, leveraging ~org-protocol~ to be able to capture a Gmail message from a bookmarklet on the browser.  Not particularly pretty code, but functional.\n\n#+BEGIN_SRC elisp\n(with-eval-after-load 'org\n  ;; Add org-protocol to capture email in Gmail.\n  (add-to-list 'org-protocol-protocol-alist\n               '(\"org-gmail-capture\" :protocol \"gmail-capture\"\n                 :function gb/org-protocol-gmail-capture))\n\n  ;; Bookmarklet:\n  ;;   javascript:location.href = 'org-protocol://gmail-capture?' +\n  ;;       new URLSearchParams({\n  ;;           msg: document.getElementById(\"raw_message_text\").innerHTML});\n  ;; Must be called from the \"Original message\" page.\n  (defun gb/org-protocol-gmail-capture (info)\n    \"Process an org-protocol://gmail-capture style url with INFO.\n\nThis function detects the raw message text element from the \\\"Original\nmessage\\\" page of a Gmail message.  It then parses relevant message\nfields and calls the \\\"email\\\" org-capture template.\n\nThe location for a browser's bookmark looks like this:\n\n  javascript:location.href = \\\\='org-protocol://gmail-capture?\\\\=' +\n      new URLSearchParams({\n          msg: document.getElementById(\\\"raw_message_text\\\").innerHTML});\n\nThe sub-protocol used to reach this function is set in\n~org-protocol-protocol-alist'.\"\n    (when-let* ((parts (org-protocol-parse-parameters info))\n                (msg (plist-get parts ':msg)))\n      ;; FIXME I'm not sure why this is needed, but the protocol fails on a\n      ;; fresh session (before 'org-capture' is loaded), and the new frame\n      ;; just flashes on the screen.\n      (require 'org-capture)\n      (let (subj id to from date\n            from-name from-email to-name to-email from-to-name)\n        (with-temp-buffer\n          (insert msg)\n          ;; 'mu4e~view-render-buffer' is responsible in mu4e to view /\n          ;; display a new message, it handles decoding, fontification\n          ;; etc.  However, the message we get from org-protocol is not\n          ;; really the \"original\" it is rather a html rendered version of\n          ;; it.  A \"Download original\" button exists, but we wouldn't be\n          ;; able to retrieve it, since only the browser is logged into\n          ;; the Gmail account, so we have to do with whatever the page\n          ;; displays.  That given, prettifying the buffer is of little\n          ;; use for the fields we are interested in.\n          (goto-char (point-min))\n          (let ((case-fold-search))\n            (while (re-search-forward\n                    (rx\n                     line-start\n                     (group\n                      (or\n                       \"From:\"\n                       \"To:\"\n                       \"Subject:\"\n                       \"Date:\"\n                       \"Message-ID:\"))\n                     \" \"\n                     (group (zero-or-more not-newline))\n                     line-end)\n                    nil t)\n              (pcase (match-string 1)\n                (\"From:\" (setq from (match-string 2)))\n                (\"To:\" (setq to (match-string 2)))\n                (\"Subject:\" (setq subj (match-string 2)))\n                (\"Date:\" (setq date (match-string 2)))\n                (\"Message-ID:\" (setq id (match-string 2)))))))\n\n        ;; Ensure values\n        (when (or (not from) (string-blank-p from))\n          (setq from \"<none>\"))\n        (when (or (not to) (string-blank-p to))\n          (setq to \"<none>\"))\n        (when (or (not subj) (string-blank-p subj))\n          (setq subj \"No subject\"))\n        (unless date (setq date \"\"))\n        (unless id (setq id \"\"))\n        ;; Clean fields\n        (setq from (replace-regexp-in-string \"&lt;\" \"<\" from t t))\n        (setq from (replace-regexp-in-string \"&gt;\" \">\" from t t))\n        (setq to (replace-regexp-in-string \"&lt;\" \"<\" to t t))\n        (setq to (replace-regexp-in-string \"&gt;\" \">\" to t t))\n        (setq id (replace-regexp-in-string \"&lt;\" \"\" id t t))\n        (setq id (replace-regexp-in-string \"&gt;\" \"\" id t t))\n\n        (let ((addr (mail-extract-address-components from)))\n          (if (car addr)\n              (progn\n                (setq from-name (car addr))\n                (setq from (format \"%s <%s>\" (car addr) (cadr addr))))\n            (setq from-name (cadr addr))\n            (setq from (format \"<%s>\" (cadr addr))))\n          (setq from-email (cadr addr)))\n        (let ((addr (mail-extract-address-components to)))\n          (if (car addr)\n              (progn\n                (setq to-name (car addr))\n                (setq to (format \"%s <%s>\" (car addr) (cadr addr))))\n            (setq to-name (cadr addr))\n            (setq to (format \"<%s>\" (cadr addr))))\n          (setq to-email (cadr addr)))\n        (setq from-to-name\n              (if (member from-email\n                          '(\"myemail1@domain.com\"\n                            \"myemail2@domain.com\"\n                            \"myemail3@domain.com\"\n                            \"myemail4@domain.com\"))\n                  to-name\n                from-name))\n\n        (let ((props ~(:type \"gmail\"\n                       :date ,date\n                       :from ,from\n                       :fromname ,from-name\n                       :message-id ,id\n                       :subject ,subj\n                       :to ,to\n                       :toname ,to-name\n                       :annotation ,(org-link-make-string\n                                     (concat \"gmail:\" id) subj)\n                       :link ,(org-link-make-string (concat \"gmail:\" id))\n                       :description ,(format \"%s (%s)\" subj from-to-name)\n                       :annotation ,(concat \"gmail:\" id)))\n              ;; Avoid call to ~org-store-link', see 'org-protocol-capture'.\n              (org-capture-link-is-already-stored t))\n          (apply #'org-link-store-props props)\n\n          (raise-frame)\n          ;; Hard-coding the \"e\" capture template, since this function is very\n          ;; much tailor made for it.\n          (org-capture nil \"e\")))\n      ;; Make sure we do not return a string, see 'org-protocol-capture'.\n      nil))\n\n  (org-link-set-parameters \"gmail\" :follow #'gb/org-link-gmail-open)\n  (defun gb/org-link-gmail-open (link _)\n    (kill-new (concat \"rfc822msgid:\" link))\n    (message \"Message id copied to clipboard.\")))\n\n#+END_SRC\nThe corresponding bookmarklet is:\n\n#+BEGIN_SRC elisp\njavascript:location.href = 'org-protocol://gmail-capture?' + new URLSearchParams({msg: document.getElementById(\"raw_message_text\").innerHTML});\n\n#+END_SRC\nThis must be called from the \"Original message\" page (which you can get with the \"Show original\" menu item). It won't work elsewhere.\n\nThe link created is a ~gmail:~ type link which essentially just copies ~rfc822msgid:<messageID>~ to the kill-ring/clipboard, which you can paste in Gmail's search bar to go to the message of interest.\n\nNot that it matters much, but the corresponding capture template is:\n\n\n#+BEGIN_SRC elisp\n      (\"e\" \"email\" entry\n       (file+headline (lambda ()\n                        (expand-file-name gb/email-capture-file\n                                          gb/org-files-directory))\n                      \"Email\")\n       \"* TODO %?%:description %(org-set-tags \\\":email:\\\")\n:PROPERTIES:\n:Message: %a\n:From: %:from\n:To:   %:to\n:Date: %:date\n:END:\n:LOGBOOK:\n- Created on %U\n:END:\"\n       :empty-lines 1)\n#+END_SRC",
        "created_datetime": "2022-10-12 19:38:56+00:00"
    },
    "t1_ir96qmu": {
        "author": "slinchisl",
        "upvotes": 16,
        "body": "** u/slinchisl [[https://www.reddit.com/r/emacs/comments/t3_xw4muy/comment/t1_ir96qmu][\ud83d\udd17]] \n*Votes* 16\n\nI finally got around to writing a small README for my Emacs config, highlighting some homegrown parts that I really like.  I reckon most of these things are pretty standard, but maybe some people here still find it useful: \n\n  https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs/.config/emacs",
        "created_datetime": "2022-10-06 08:33:20+00:00"
    },
    "t1_iqb2fci": {
        "author": "com4",
        "upvotes": 14,
        "body": "** u/com4 [[https://www.reddit.com/r/emacs/comments/t3_xq6rpa/comment/t1_iqb2fci][\ud83d\udd17]] \n*Votes* 14\n\nIn preparation for the inclusion of eglot into Emacs core I've switched away from lsp-mode. As a result I've also switched from flycheck and to flymake. One nice thing about flycheck is that it allowed for stacking checkers. When coding Python I liked to stack flake8 for styles and mypy for types (plus the LSP's since it's already there).\n\nFlymake allows for stacking checkers but it turns out eglot clobbers these checkers when \"adding\" the LSP's checker. To get stacked Flymake checkers with Eglot you can simply add them back after Eglot has done it's thing.\n\nFor example, here is a simple setup for Python which includes Pyright's type checking and flake8 style checking\n\n#+BEGIN_SRC elisp\n;; Use flake8 as the python style checker by default\n(setq python-flymake-command '(\"flake8\" \"-\"))\n    \n(use-package eglot\n  :hook ((python-mode . eglot-ensure)\n         (eglot-managed-mode\n\t  . (lambda ()\n\t      ;; re-enable flymake checkers because eglot clobbers\n\t      ;; them when starting\n\t      (when (derived-mode-p 'python-mode)\n\t\t(add-hook 'flymake-diagnostic-functions \n                          'python-flymake nil t)))))\n    \n  :custom\n  ;; shutdown server after killing last managed buffer\n  (eglot-autoshutdown t)\n  :bind\n  ((\"C-c l r\" . eglot-rename))\n  :config\n  (add-to-list 'eglot-server-programs\n               ~(python-mode \"pyright-langserver\" \"-w\" \"--stdio\")))\n\n#+END_SRC\nNow all that's left is mypy. Flymake originally used a [[https://www.gnu.org/software/emacs/manual/html_mono/flymake.html#The-legacy-Proc-backend][\"Proc\"]] method for creating checkers which existing mypy ones use. So for a bonus tip & trick [[http://github.com/com4/flymake-mypy][I've written a mypy checker in the new style]]. It can be enabled when using eglot like this:\n\n#+BEGIN_SRC elisp\n(use-package flymake-mypy\n  :straight (flymake-mypy\n             :type git\n             :host github\n             :repo \"com4/flymake-mypy\")\n  :hook ((eglot-managed-mode . (lambda ()\n\t\t\t\t (when (derived-mode-p 'python-mode)\n\t\t\t\t   (flymake-mypy-enable))))))\n\n#+END_SRC\nAfter opening a Python buffer and executing ~M-x flymake-running-backends~ we are greeted with a list of stacked checkers: ~Running backends: eglot-flymake-backend, flymake-mypy--run, python-flymake~.",
        "created_datetime": "2022-09-29 01:27:25+00:00"
    },
    "t1_ioeh1ly": {
        "author": "howardthegeek",
        "upvotes": 21,
        "body": "** u/howardthegeek [[https://www.reddit.com/r/emacs/comments/t3_xdw6ok/comment/t1_ioeh1ly][\ud83d\udd17]] \n*Votes* 21\n\nI just learned that in eshell, $$ is replaced with the output from the last command.",
        "created_datetime": "2022-09-14 15:38:10+00:00"
    },
    "t1_iodig8c": {
        "author": "zupatol",
        "upvotes": 29,
        "body": "** u/zupatol [[https://www.reddit.com/r/emacs/comments/t3_xdw6ok/comment/t1_iodig8c][\ud83d\udd17]] \n*Votes* 29\n\nAfter years of using emacs, I wrote my second ever elisp function to open on github the code I'm browsing in emacs.\n\n#+BEGIN_SRC elisp\n(defun open-on-github ()\n  (interactive)\n  (let\n      ((repo-url (magit-git-string \"remote\" \"get-url\" \"--push\" \"origin\"))\n       (commit-hash (magit-git-string \"rev-parse\" \"HEAD\"))\n       (start-line (if (use-region-p)\n                       (line-number-at-pos (region-beginning))\n                     (line-number-at-pos)))\n       (end-line (if (use-region-p) (line-number-at-pos (region-end)))))\n    (unless repo-url (error  \"not in a git repo\"))\n    (browse-url\n     (concat\n      (substring repo-url 0 -4)\n      \"/blob/\"\n      commit-hash\n      \"/\"\n      (substring buffer-file-name (length (projectile-project-root)))\n      \"#L\" (number-to-string start-line)\n      (if (and (use-region-p) (< 0 (- end-line start-line)))\n          (concat \"..L\" (number-to-string end-line)))\n      ))))\n#+END_SRC",
        "created_datetime": "2022-09-14 10:38:48+00:00"
    },
    "t1_iodmtzu": {
        "author": "PriorOutcome",
        "upvotes": 9,
        "body": "\\** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_xdw6ok/comment/t1_iodmtzu][\ud83d\udd17]] \n\\*Votes* 9\n\nI find it pretty useful (for debugging etc) to override the default projectile mode line indicator and show the projectile project type of the buffer instead, which can be done pretty easily if you're a use-package user with https://elpa.gnu.org/packages/delight.html:\n\n#+BEGIN_SRC elisp\n(use-package projectile\n  :delight '(:eval (format \" P[%s]\" (projectile-project-type)))\n  :config\n  (setq foo \"bar\"))\n#+END_SRC",
        "created_datetime": "2022-09-14 11:32:37+00:00"
    },
    "t1_iof00tz": {
        "author": "trae",
        "upvotes": 8,
        "body": "\\** u/trae [[https://www.reddit.com/r/emacs/comments/t3_xdw6ok/comment/t1_iof00tz][\ud83d\udd17]] \n\\*Votes* 8\n\nHey folks,\n\nIs there a package/piece of code out there to:\n1. pop up a frame \n2. execute arbitrary code \n3. close frame on completion\n\nKind of like [[https://github.com/tecosaur/emacs-everywhere/][emacs-everywhere]] but for arbitrary code.",
        "created_datetime": "2022-09-14 17:38:59+00:00"
    },
    "t1_innk62a": {
        "author": "kickingvegas1",
        "upvotes": 10,
        "body": "** u/kickingvegas1 [[https://www.reddit.com/r/emacs/comments/t3_x7zfs2/comment/t1_innk62a][\ud83d\udd17]] \n*Votes* 10\n\nTIL when working with an Org table that ~S-RET~ will fill the current cell value with the value above it. <https://lists.gnu.org/archive/html/emacs-orgmode/2010-03/msg00462.html>",
        "created_datetime": "2022-09-09 00:02:53+00:00"
    },
    "t1_inqralq": {
        "author": "WorldsEndless",
        "upvotes": 8,
        "body": "** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_x7zfs2/comment/t1_inqralq][\ud83d\udd17]] \n*Votes* 8\n\nI use follow-mode (built-in to #emacs) to split reading buffers across modern wide screens to use all the real estate. The mode keeps the panes in sync with eachother. http://images.toryanderson.com/follow-mode.gif",
        "created_datetime": "2022-09-09 17:15:43+00:00"
    },
    "t1_imi3kzz": {
        "author": "PriorOutcome",
        "upvotes": 20,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_x27yc9/comment/t1_imi3kzz][\ud83d\udd17]] \n*Votes* 20\n\nUpdate from a couple of weeks ago: after some grinding, I've set the parsing of past comments from this thread to auto update on a weekly basis here: [[https://github.com/LaurenceWarne/reddit-emacs-tips-n-tricks/blob/master/out.md][https://github.com/LaurenceWarne/reddit-emacs-tips-n-tricks/blob/master/out.md]]\n\nI've also fixed the broken highlighting of some code snippets, and hopefully parsed all past threads.  There's 200+ comments there (sorted by upvotes), so ctrl-f ing e.g. \\~magit\\~ may help you if you're looking for something specific",
        "created_datetime": "2022-08-31 10:59:48+00:00"
    },
    "t1_ilotsc5": {
        "author": "meain",
        "upvotes": 16,
        "body": "** u/meain [[https://www.reddit.com/r/emacs/comments/t3_wwdpju/comment/t1_ilotsc5][\ud83d\udd17]] \n*Votes* 16\n\nI use the following snippet to change background color of compilation buffer to a light red if the compilation failed. I use compilation buffer to run tests on a second monitor and this is pretty useful.\n\n#+BEGIN_SRC elisp\n(defun meain/compilation-colorcode (_buffer string)\n    \"Change background color of compilation ~_BUFFER' to red on failure.\"\n    (unless (string-prefix-p \"finished\" string) ; Having color for success was distracting\n    (face-remap-add-relative 'default 'diff-hl-delete)))\n(add-to-list 'compilation-finish-functions 'meain/compilation-colorcode)\n#+END_SRC",
        "created_datetime": "2022-08-25 04:41:35+00:00"
    },
    "t1_illuprk": {
        "author": "HM0880",
        "upvotes": 8,
        "body": "** u/HM0880 [[https://www.reddit.com/r/emacs/comments/t3_wwdpju/comment/t1_illuprk][\ud83d\udd17]] \n*Votes* 8\n\nIn Org Mode, what is the reason to use ~~~ for in-line code vs. ~=~ for monospace text?  I use ~=~ for both code and monospace since (afaict) Org renders both code and monospace the same way in LaTeX PDF and HTML output, and ~=~ does not require using shift (unlike ~~~).",
        "created_datetime": "2022-08-24 16:40:45+00:00"
    },
    "t1_ikwhvfs": {
        "author": "hairlesscaveman",
        "upvotes": 9,
        "body": "** u/hairlesscaveman [[https://www.reddit.com/r/emacs/comments/t3_wqjare/comment/t1_ikwhvfs][\ud83d\udd17]] \n*Votes* 9\n\nQuestion: I generally work with 3 vertical panes, with my preferred layout as left for code, middle for related test file, and right for test output or magit. However, keeping this layout is tricky; sometimes magit will open in the first pane, or the current pane when I'm focused in the middle, and deadgrep will open just anywhere\u2026 well, it's quite hectic and feels random.\n\nIs there any way I can get files to open in panes 1 or 2, and always have things like magit/test-output/deadgrep/etc on pane 3? I've tried \"shackle\" but I've had no success with it; everything seems to open in a horizontal pane at the bottom of my screen regardless of config.\n\nAny suggestions would be appreciated!",
        "created_datetime": "2022-08-19 07:37:33+00:00"
    },
    "t1_ikqxn0r": {
        "author": "thr33body",
        "upvotes": 14,
        "body": "** u/thr33body [[https://www.reddit.com/r/emacs/comments/t3_wqjare/comment/t1_ikqxn0r][\ud83d\udd17]] \n*Votes* 14\n\nI don\u2019t have any specific tip but I just want to throw it out there that if you are tired of using spacemacs or doom it was much easier to set up my own install than I thought. It only took me a couple of days of active work and now diagnosing problems is so much simpler. Not to say that you should not use either one but I wanted to learn more about emacs and I\u2019ve been really happy with the results.",
        "created_datetime": "2022-08-18 04:02:02+00:00"
    },
    "t1_ikrx30z": {
        "author": "PriorOutcome",
        "upvotes": 9,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_wqjare/comment/t1_ikrx30z][\ud83d\udd17]] \n*Votes* 9\n\nI've parsed and prettified some of the comments (I think I'm missing some, but hopefully should be fixed soonish) from past weekly tips and tricks thread here: [[https://github.com/LaurenceWarne/reddit-emacs-tips-n-tricks/blob/master/out.md][https://github.com/LaurenceWarne/reddit-emacs-tips-n-tricks/blob/master/out.md]]\n\nIf you fancy procrastinating for a bit today...",
        "created_datetime": "2022-08-18 10:47:40+00:00"
    },
    "t1_iirl0ea": {
        "author": "[deleted]",
        "upvotes": 12,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_wf0t0d/comment/t1_iirl0ea][\ud83d\udd17]] \n*Votes* 12\n\nOrg mode - insert a complete set of export options:\n\n~org-export-insert-default-template~\n\nThis inserts all export keywords with default values at beginning of line.\n\nThis command is not documented in ~info emacs~ (v27.1).",
        "created_datetime": "2022-08-03 11:47:45+00:00"
    },
    "t1_ih6ievs": {
        "author": "tryptych",
        "upvotes": 11,
        "body": "** u/tryptych [[https://www.reddit.com/r/emacs/comments/t3_w3gx6o/comment/t1_ih6ievs][\ud83d\udd17]] \n*Votes* 11\n\nEmacs has better long-lines support now??\n\nI just noticed while looking at the latest additions in the NEWS:\n\n>\\*\\* Emacs is now capable of editing files with arbitrarily long lines. The display of long lines has been optimized, and Emacs no longer chokes when a buffer on display contains long lines.  If you still experience slowdowns while editing files with long lines, this is either due to font locking, which you can turn off with M-x font-lock-mode or C-u C-x x f, or to the current major mode or one of the enabled minor modes, in which case you should open the the file with M-x find-file-literally instead of C-x C-f.  The variable 'long-line-threshold' controls whether and when these display optimizations are used.\n\nThat sounds like great news!  Does anyone know what went into it?\n\n(edit to add: this was added some time this week.  I rebuild from master weekly, and check out the NEWS diff each time)",
        "created_datetime": "2022-07-22 13:25:21+00:00"
    },
    "t1_igyt3ff": {
        "author": "sauntcartas",
        "upvotes": 8,
        "body": "** u/sauntcartas [[https://www.reddit.com/r/emacs/comments/t3_w3gx6o/comment/t1_igyt3ff][\ud83d\udd17]] \n*Votes* 8\n\nI sometimes want to pick a random choice from a long org-mode checkbox list from among those items not already checked.  I recently whipped up a little helper function for that:\n\n#+BEGIN_SRC elisp\n(defun random-choice ()\n  (interactive)\n  (let ((n 0)\n        (selected nil))\n    (while (search-forward-regexp (rx point \"- [\" (group nonl) \"]\" (+ nonl) \"\\n\") nil t)\n      (when (and (string= \" \" (match-string 1)) (zerop (random (setq n (1+ n)))))\n        (setq selected (match-beginning 0))))\n    (if selected\n        (goto-char selected)\n      (error \"No unfinished choice found\"))))\n#+END_SRC",
        "created_datetime": "2022-07-20 22:03:27+00:00"
    },
    "t1_if1ua6o": {
        "author": "isamert",
        "upvotes": 8,
        "body": "** u/isamert [[https://www.reddit.com/r/emacs/comments/t3_vskthv/comment/t1_if1ua6o][\ud83d\udd17]] \n*Votes* 8\n\nI sometimes clone stuff with https instead of ssh, so this fixes that:\n\n#+BEGIN_SRC elisp\n(defun isamert/git-origin-switch-to-ssh ()\n  (interactive)\n  (when-let* ((https-origin (s-trim (shell-command-to-string \"git config --get remote.origin.url\")))\n              (it (s-match \"https://\\\\(.*\\\\)\\\\.\\\\(com\\\\|net\\\\|org\\\\)/\\\\(.*\\\\)\" https-origin))\n              (ssh-origin (format \"git@%s.%s:%s\" (nth 1 it) (nth 2 it) (nth 3 it))))\n    (shell-command-to-string (format \"git remote set-url origin %s\" ssh-origin))))\n\n\n#+END_SRC\nIt works for github/gitlab etc. You need to extend the regexp for making it work for more obscure addresses.",
        "created_datetime": "2022-07-06 09:22:46+00:00"
    },
    "t1_ie7p6ja": {
        "author": "sauntcartas",
        "upvotes": 17,
        "body": "** u/sauntcartas [[https://www.reddit.com/r/emacs/comments/t3_vnals8/comment/t1_ie7p6ja][\ud83d\udd17]] \n*Votes* 17\n\nI recently discovered ~thing-at-point-looking-at~, which seems much easier to use on its own than to fully define a new kind of \"thing.\"\n\nFor a while I've been wanting to conveniently identify a Jira ticket identifier at point so I can browse to it.  Ticket IDs are basically a sequence of letters, a hyphen, and a sequence of digits.  First I tried using ~symbol-at-point~, but that can include extraneous neighboring characters, like ~/~ when the ticket ID is part of a URL.  Eventually, while poring over the ~thingatpt~ source, I found ~thing-at-point-looking-at~, which quickly led to:\n\n#+BEGIN_SRC elisp\n(defun browse-ticket-at-point ()\n  (interactive)\n  (if (thing-at-point-looking-at (rx (+ alpha) \"-\" (+ digit)))\n      (browse-url (format \"https://jirahost/browse/%s\" (match-string 0)))\n    (error \"No ticket at point\")))\n\n#+END_SRC\nEasy peasy!",
        "created_datetime": "2022-06-29 18:55:03+00:00"
    },
    "t1_ichiccu": {
        "author": "ainstr",
        "upvotes": 10,
        "body": "** u/ainstr [[https://www.reddit.com/r/emacs/comments/t3_vcpk6u/comment/t1_ichiccu][\ud83d\udd17]] \n*Votes* 10\n\nThe other day I discovered that you can access Spotify through dbus. Most of my use-case for spotify is hitting shuffle on ~20 of my playlists; not much searching, discovering, charts, etc. So, I didn't need any of the existing packages that require an auth token or extra local server.\n\nThis basically wraps ~completing-read~ over the alist stored in spotify-playlists. You can probably translate the qdbus call to dbus-send or whatever.\n\n#+BEGIN_SRC elisp\n;; Inspired by sp.sh: https://gist.github.com/wandernauta/6800547\n;; Could use https://codeberg.org/jao/espotify, but don't need all the functionalities\n;; Potential Issues: https://community.spotify.com/t5/Desktop-Linux/DBus-OpenUri-issue/td-p/1376397\n    \n;; Could just write a fn to extract the ID, and use that in spotify-playlists\n;; Current way with full uri allows for playlist vs artist, etc.\n;; but probably don't need flexiblity for my use case\n(defun spotify--clean-uri (raw-uri)\n  \"Clean RAW-URI into a dbus-acceptable uri.\"\n  (let* ((url-fields (split-string\n\t\t      raw-uri\n\t\t      (rx (or \"/\" \"?\"))))\n\t (type (nth 3 url-fields))\n\t (id (nth 4 url-fields)))\n    (concat \"spotify:\" type \":\" id)))\n    \n(defvar spotify-playlists\n  '((\"Artist\" . \"https://open.spotify.com/playlist/1v4UqI9mEEB4ry3a3uaorO?si=bc675402c7384080\"))\n  \"Alist of spotify playlists for spotify-playlists to select from.\n  RAW-URI is from right-click on playlist > Share > Copy Link to Playlist.\")\n    \n(defun spotify--open-uri (raw-uri)\n  \"Open RAW-URI.\"\n  (let ((prefix \"qdbus org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.OpenUri \")\n\t(uri (spotify--clean-uri raw-uri)))\n    (shell-command (concat prefix uri))))\n    \n(defun spotify--open-playlist ()\n  \"Prompt to select and play a playlist from spotify-playlists.\"\n  (let* ((key (completing-read \"Playlist: \" spotify-playlists))\n\t (raw-uri (cdr (assoc key spotify-playlists))))\n    (spotify--open-uri raw-uri)\n    (message (format \"Now Playing: %s\" key))))\n    \n(defun spotify-open-playlist ()\n  \"Wrapper around ~spotify--open-playlist~, to check if spotify is running.\"\n  (interactive)\n  (pcase\n      (shell-command \"pgrep spotify\")\n    (1 (message \"Spotify not running.\"))\n    (0 (spotify--open-playlist))))\n#+END_SRC",
        "created_datetime": "2022-06-15 19:30:25+00:00"
    },
    "t1_iauyzbl": {
        "author": "tryptych",
        "upvotes": 17,
        "body": "** u/tryptych [[https://www.reddit.com/r/emacs/comments/t3_v2by7z/comment/t1_iauyzbl][\ud83d\udd17]] \n*Votes* 17\n\nIt's not worth a separate post, but after spending some pleasant yak-shaving time optimising my startup using use-package, I wrote a [[https://blog.markhepburn.com/posts/understanding-use-package-optimisations/][post about it]].  There's a few posts around suggesting features of ~use-package~ to optimise startup, but none of them really explained how they tied back to ~autoload~, ~eval-after-load~, etc so I was trying to encourage people to dig out ~macroexpand~ and find out.",
        "created_datetime": "2022-06-02 02:27:48+00:00"
    },
    "t1_iarzi1s": {
        "author": "char1zard4",
        "upvotes": 10,
        "body": "** u/char1zard4 [[https://www.reddit.com/r/emacs/comments/t3_v2by7z/comment/t1_iarzi1s][\ud83d\udd17]] \n*Votes* 10\n\nThis week I learned that:\n\n-\tYou can redefine all yes/no prompts to y/n:\n~(defalias \u2018yes-or-no-p \u2018y-or-n-p)~\n\n-\t~C-c C-c~ in LaTeX-mode buffers will allow you to compile/view output (I\u2019ve used LaTeX-preview-pane for the last couple of years)\n\n-\tTab-stops in yas-snippet are very handy for filling out multiple parts of a template, didn\u2019t even know these existed:\nhttps://joaotavora.github.io/yasnippet/snippet-development.html#org41a4ac7",
        "created_datetime": "2022-06-01 13:05:48+00:00"
    },
    "t1_i9x2a0i": {
        "author": "khourhin",
        "upvotes": 8,
        "body": "\\** u/khourhin [[https://www.reddit.com/r/emacs/comments/t3_uxcm6i/comment/t1_i9x2a0i][\ud83d\udd17]] \n\\*Votes* 8\n\nJust discovered that you can do pull request from magit forge. Got some troubles with the origin / myfork setup and was helped by this issue: https://github.com/magit/forge/issues/278 .\nAnd this improved as well how I deal with the naming of my remotes.\n\nPure awesomeness, thanks a lot for Magit/ Magit forge !",
        "created_datetime": "2022-05-25 11:19:21+00:00"
    },
    "t1_i9xcaoa": {
        "author": "slinchisl",
        "upvotes": 8,
        "body": "\\** u/slinchisl [[https://www.reddit.com/r/emacs/comments/t3_uxcm6i/comment/t1_i9xcaoa][\ud83d\udd17]] \n\\*Votes* 8\n\n[[https://github.com/slotthe/arxiv-citation][arxiv-citation]] from my [[https://old.reddit.com/r/emacs/comments/ufvg93/my_phd_research_workflowemacs_inside/][last post]] is now on MELPA!  Give it a spin if you're in the habit of downloading or citing papers from the arXiv (if you're doing maths, these citations will even become actual journal citations, if possible)!\n\nOn that note, I've written a little bit about [[https://tony-zorman.com/posts/2022-05-25-calling-emacs-from-xmonad.html][calling Emacs from XMonad]].  The post itself isn't really Emacs related and so I don't think it warrants a crosspost in this subreddit, but I figured perhaps there was the odd XMonad user here who may find it helpful.",
        "created_datetime": "2022-05-25 13:11:34+00:00"
    },
    "t1_i92mn8w": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_us7zae/comment/t1_i92mn8w][\ud83d\udd17]] \n*Votes* 10\n\n[deleted]",
        "created_datetime": "2022-05-18 14:45:18+00:00"
    },
    "t1_i928gaj": {
        "author": "diamondnbond",
        "upvotes": 8,
        "body": "** u/diamondnbond [[https://www.reddit.com/r/emacs/comments/t3_us7zae/comment/t1_i928gaj][\ud83d\udd17]] \n*Votes* 8\n\n[[https://github.com/DiamondBond/emacs/blob/master/config.org#initialize-engine-mode][I Recently discovered engine-mode.]]",
        "created_datetime": "2022-05-18 12:38:59+00:00"
    },
    "t1_i86hwzi": {
        "author": "pathemata",
        "upvotes": 15,
        "body": "** u/pathemata [[https://www.reddit.com/r/emacs/comments/t3_un4wf8/comment/t1_i86hwzi][\ud83d\udd17]] \n*Votes* 15\n\nSomething amazin that I have been using recently is ~ripgrep-all~ as the ~consult-ripgrep~ command to search in pdfs. \n\nIt is amazing with the ~orderless~ dispatchers to control the search filtering.\nI use ~!~ to exclude a string and ~=~ to match exactly.\n\nAlso amazing with ~embark-collect~ which allows collapsing features.\nOr within the collect buffer use ~consult-line~ to further filter.\nAnd even open the pdf.",
        "created_datetime": "2022-05-11 14:12:39+00:00"
    },
    "t1_i88sp07": {
        "author": "mmarshall540",
        "upvotes": 8,
        "body": "\\** u/mmarshall540 [[https://www.reddit.com/r/emacs/comments/t3_un4wf8/comment/t1_i88sp07][\ud83d\udd17]] \n\\*Votes* 8\n\nHere's a little solution to a minor complaint about `isearch` that I think is fairly common.\n\n# The Problem\n\nTLDR: See [[https://emacs.stackexchange.com/questions/32373/go-to-start-of-search-string-after-ret][this old StackExchange question]]\n\nOften, I'll want to go to a precise location in a buffer to correct a typo. If that location is behind point (as it usually is if I notice the typo shortly after entering it), then `isearch-backward` works great. You press \"C-r\" and type some characters starting with your target until the location becomes the current result.  As soon as the cursor jumps to your target location, you can use an editing command like \"C-t\", which exits isearch automatically for you. Or you can press \"C-m\" to exit isearch-mode and then start inserting text at that location. Wonderful!\n\nBut it's a little less perfect when your target is *after* point. This is because with `isearch-forward`, point lands at the end of your search result, instead of the beginning as it does with `isearch-backward`.\n\nYou could type your search starting with some arbitrary number of characters in front of the target. But then you have to decide in advance how many characters to use, and if you don't use enough, there might be too many results. And then if you have to keep typing past your target character to sufficiently narrow the results, point won't land where you want it.\n\nAnother strategy would be to do the same thing as when searching backwards, start with the target character and just type characters until your target location is selected. But now point is at the other end of the result, instead of where you want it. \"M-b\" would exit and move point to the beginning of the word, but that assumes there are no word boundaries in your search result, and besides, your actual target won't always be the beginning of a word. Often it will be somewhere in the middle of a word.\n\nOr you could use C-r to move point to the beginning of the result. But then you still have to press C-m to exit the search and start inserting text at that location. And that's 2 key-presses just to finish your search, not to mention all the key-presses you did to start.\n\nSo we can fix this.\n\n# My Solution\n\n#+BEGIN_SRC elisp\n(defun my/isearch-bor-exit ()\n  \"Ensure point is at beginning of isearch result, then exit.\"\n  (interactive)\n  (when (< isearch-other-end (point))\n    (goto-char isearch-other-end))\n  (call-interactively 'isearch-exit))\n    \n(define-key isearch-mode-map ?\\M-m 'my/isearch-bor-exit)\n\n#+END_SRC\nSo now if I'm using isearch to get to a precise location (as opposed to just searching for a word), I can type beginning with the character at the target location, stop typing after it becomes part of the result, and press \"M-m\" to exit the search and make my correction. No more having to stop and think about whether I'm going backwards or forwards and whether I'll have to move point back before exiting isearch.\n\n# The Conclusion\n\nA minor problem with a fairly simple solution, but it made me happy to stop and solve it.\n\nI think I'll be using isearch now for a lot of things that I used to use Avy for.  But Avy is still great for a bunch of reasons. Not the least of which is the `avy-isearch` command which comes in handy when there are a lot of isearch results that would require too much typing to narrow down. (And it always puts point at the beginning of the result, never at the end).",
        "created_datetime": "2022-05-11 23:24:24+00:00"
    },
    "t1_i3m1liu": {
        "author": "[deleted]",
        "upvotes": 24,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_txh85s/comment/t1_i3m1liu][\ud83d\udd17]] \n*Votes* 24\n\n[removed]",
        "created_datetime": "2022-04-06 12:22:56+00:00"
    },
    "t1_i3ov7vq": {
        "author": "TeMPOraL_PL",
        "upvotes": 20,
        "body": "** u/TeMPOraL_PL [[https://www.reddit.com/r/emacs/comments/t3_txh85s/comment/t1_i3ov7vq][\ud83d\udd17]] \n*Votes* 20\n\n~shortdoc~ - one of the new things in Emacs 28.1 - is great for maintaining your own \"cheat sheets\" of Elisp functions as you discover them. For example, eval this in your Emacs session:\n\n#+BEGIN_SRC elisp\n(define-short-documentation-group my-datetime\n  \"Querying current time\"\n  (current-time\n   :eval (current-time))\n  (float-time\n   :eval (float-time))\n  \n  \"Time formats\"\n  (time-convert\n   :eval (time-convert (current-time))\n   :eval (time-convert (current-time) 'list)\n   :eval (time-convert (current-time) 100000)\n   :eval (time-convert (current-time) 200000)\n   :eval (time-convert (current-time) t)\n   :eval (time-convert (current-time) 'integer))\n  \n  (float-time\n   :eval (float-time (current-time))))\n\n#+END_SRC\nAfter this, the ~my-datetime~ group will show as an option in ~M-x shortdoc-display-group~. Additionally, if you view help for any of the functions mentioned above, the Help buffer will refer back to the ~my-datetime~ shortdoc group!\n\nThe example used here is a cheatsheet I just started writing for myself, as I've been researching the built-in time functions. For additional instructions on use, see ~define-short-documentation-group~ macro. For use examples, jump to the source of ~define-short-documentation-group~ and scroll down a bit - the default shortdoc groups are defined there.",
        "created_datetime": "2022-04-06 23:48:29+00:00"
    },
    "t1_i3mghuf": {
        "author": "PriorOutcome",
        "upvotes": 8,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_txh85s/comment/t1_i3mghuf][\ud83d\udd17]] \n*Votes* 8\n\nI wanted to be able to expand yasnippets within other yasnippets (so here tab would jump to the next position instead of trying to expand snippet), surprisingly all I had to do was:\n\n~:bind (\"C-<tab>\" . yas-expand)~\n\nSo C-<tab> expands a snippet within a snippet, and everything just worked as I'd hoped.  Once I'm done with the nested expansion <TAB> just moves on to the outer one. \\*shrug\\*",
        "created_datetime": "2022-04-06 14:31:45+00:00"
    },
    "t1_i0vtxte": {
        "author": "jimm",
        "upvotes": 10,
        "body": "** u/jimm [[https://www.reddit.com/r/emacs/comments/t3_tfcmcx/comment/t1_i0vtxte][\ud83d\udd17]] \n*Votes* 10\n\nThe ~git grep~ git command is great for finding a regex (or a simple string) everywhere in a git repo. I define the following functions and bind the ~git-grep~ function to ~F2~. It will prompt for a regex and search for that in the repo or, if you give it a numeric prefix like ~C-u~ it will read the current symbol at point (the word under the cursor) and search for that. Results appear in a grep buffer, so you can use ~C-g C-n~ and ~C-g C-p~ to navigate from one result to the next.\n\n#+BEGIN_SRC elisp\n(defun git-root-dir ()\n  \"Returns the current directory's root Git repo directory, or\nNIL if the current directory is not in a Git repo.\"\n  (let ((dir (locate-dominating-file default-directory \".git\")))\n    (when dir\n      (file-name-directory dir))))\n    \n(defun git-grep (arg)\n  \"Runs 'git grep', starting the search in the current\ndirectory's root git repo directory.\n    \nBy default, reads the regex from the minibuffer. With a prefix\nargument, initializes the search string with the current symbol\nat point.\"\n  (interactive \"P\")\n  (let* ((symbol-at-point (thing-at-point 'symbol))\n         (regexp (if (and arg (symbol-at-point))\n                   (regexp-quote symbol-at-point)\n                     (read-from-minibuffer\n                      \"Search regexp: \" nil nil nil 'grep-find-history)))\n    \n         (default-directory (git-root-dir))\n         (case-ignore-flag (and (isearch-no-upper-case-p regexp t) \"-i\"))\n         (cmd (concat \"git grep --extended-regexp --line-number --full-name\"\n                      \" --untracked \" case-ignore-flag \" -- \\\"\" regexp \"\\\"\"\n                      \" | cut -c -240\")))\n    (while (equal \"\" regexp)\n        (setq regexp (read-from-minibuffer\n                      \"Search regexp (must not be the empty string): \" nil nil nil 'grep-find-history)))\n    (grep-find cmd)))\n#+END_SRC",
        "created_datetime": "2022-03-16 13:46:25+00:00"
    },
    "t1_hvbbnjq": {
        "author": "SamTheComputerSlayer",
        "upvotes": 20,
        "body": "** u/SamTheComputerSlayer [[https://www.reddit.com/r/emacs/comments/t3_sijcap/comment/t1_hvbbnjq][\ud83d\udd17]] \n*Votes* 20\n\nJust figured this out, maybe a bit of a hack...\n\nIn flyspell, I was annoyed I had to use mouse-2 when I wanted to correct a word, and I didn't want to sacrifice a major-mode keybinding to do it from the keyboard. But flyspell actually creates an overlay for misspelled words and attaches a keymap to it, which you can do I just realized- very cool. So I just bound ~flyspell-correct-at-point~ to \"<return>\" in the ~flyspell-mouse-map~, and now return corrects words when my cursor is on a misspelled word!\n\nBut the fact you can attach keymaps to overlays just seems so useful, will definitely use in the future.",
        "created_datetime": "2022-02-02 19:13:02+00:00"
    },
    "t1_hu9xfed": {
        "author": "AffectionateAd8985",
        "upvotes": 17,
        "body": "** u/AffectionateAd8985 [[https://www.reddit.com/r/emacs/comments/t3_sd10q9/comment/t1_hu9xfed][\ud83d\udd17]] \n*Votes* 17\n\n~(add-hook 'org-mode-hook (lambda () (org-next-visible-heading 1)))~\n\nMove to first heading when open org files, with ~org-use-speed-commands~, I can quick browse org file with only ~n/p~ keys.",
        "created_datetime": "2022-01-26 09:45:00+00:00"
    },
    "t1_hubjy3j": {
        "author": "[deleted]",
        "upvotes": 13,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_sd10q9/comment/t1_hubjy3j][\ud83d\udd17]] \n*Votes* 13\n\nI was reading through the org manual, and learnt about two variables ~org-agenda-category-icon-alist~ and ~org-agenda-prefix-format~, the first allows you to set icons for categories (~CATEGORY~ property), icons can be images or symbols, this is the code I came up with and the agenda already looks more colorful and clear\n\n\n#+BEGIN_SRC elisp\n(setq org-agenda-category-icon-alist nil)\n(setq agenda-categories-alist\n'((\"WORK\" \"\ud83d\udcbc\") (\"SOFTWARE\" \"\ud83d\udcbb\") (\"SETUP\" \"\ud83d\udc27\") (\"EMAIL\" \"\u2709\ufe0f\")\n(\"HOME\" \"\ud83c\udfe0\") (\"WOOD\" \"\ud83e\udeb5\") (\"FAMILY\" \"\ud83d\udc6a\") (\"REPORTS\" \"\ud83d\udcda\")\n(\"INCOME\" \"\ud83d\udcb0\")))\n(dolist (icon agenda-categories-alist) (add-to-list 'org-agenda-category-icon-alist\n~(,(car icon) ,(cdr icon) nil nil :width (16.) :ascent center)))\n(defun format-agenda-prefix () (interactive)\n(setcar org-agenda-prefix-format '(agenda . \"  %-2i  %?-12t% s\")))\n(add-hook 'org-agenda-mode-hook 'format-agenda-prefix)\n\n#+END_SRC\nOf course for the emojis to show up correctly I use this:\n\n#+BEGIN_SRC elisp\n(set-fontset-font \"fontset-default\" 'symbol (font-spec :family \"Noto Color Emoji\"))\n\n#+END_SRC\nI am sure a lot of you know about these, please share your customization",
        "created_datetime": "2022-01-26 17:39:14+00:00"
    },
    "t1_htnz373": {
        "author": "shitterwithaclitter",
        "upvotes": 10,
        "body": "** u/shitterwithaclitter [[https://www.reddit.com/r/emacs/comments/t3_s7lac1/comment/t1_htnz373][\ud83d\udd17]] \n*Votes* 10\n\nI recently had the idea to start emacs in org-mode but have a src block at the top so I can still write elisp snippets easily. Here's the code for anyone interested:\n\n#+BEGIN_SRC elisp\n;; start in org-mode with a source block for lisp evaluation\n(setq initial-major-mode #'org-mode\n      initial-scratch-message \"#+begin_src emacs-lisp\\n;; This block is for text that is not saved, and for Lisp evaluation.\\n;; To create a file, visit it with \\\\[find-file] and enter text in its buffer.\\n\\n#+end_src\\n\\n\")\n#+END_SRC",
        "created_datetime": "2022-01-21 23:04:44+00:00"
    },
    "t1_hsgj7a6": {
        "author": "[deleted]",
        "upvotes": 9,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_s21457/comment/t1_hsgj7a6][\ud83d\udd17]] \n*Votes* 9\n\nPrevent horizontal scrolling from going too far left.\n\nI use Emacs on a laptop and quite often scroll with a touchpad. I also don't use line wrapping, as in code it usually looks misleading, so lines can sometimes exceed window width, either because of some long names or because the current window configuration is too narrow.\n\nHowever, when scrolling text sideways, there's a small annoyance that the scroll can go way too far to the left. E.g. if this is your window, and your text exceeds it:\n\n\n#+BEGIN_SRC elisp\n|Short line             |\n|Some really long line o|\n|Another short line     |\n\n#+END_SRC\nWhat I'd like to is to prevent scrolling any further than that:\n\n#+BEGIN_SRC elisp\n|line                   |\n|eally long line of text|\n|r short line           |\n\n#+END_SRC\nBut Emacs actually allows to scroll as far as one would want to, like here:\n\n#+BEGIN_SRC elisp\n|                       |\n|t                      |\n|                       |\n\n#+END_SRC\nThis doesn't make sense to me, as you can't see anything at all.\nProbably handy, when you write in really long lines, and you wish to have some buffer for adding more text without triggering scrolling, but I never needed that. So I wrote such predicate:\n\n#+BEGIN_SRC elisp\n(defun truncated-lines-p ()\n  \"Non-nil if any line is longer than ~window-width' + ~window-hscroll'.\n\nReturns t if any line exceeds the right border of the window.\nUsed for stopping scroll from going beyond the longest line.\nBased on ~so-long-detected-long-line-p'.\"\n  (save-excursion\n    (goto-char (point-min))\n    (let* ((window-width\n            ;; this computes a more accurate width rather than ~window-width', and respects\n            ;; ~text-scale-mode' font width.\n            (/ (window-body-width nil t) (window-font-width)))\n           (hscroll-offset\n            ;; ~window-hscroll' returns columns that are not affected by\n            ;; ~text-scale-mode'.  Because of that, we have to recompute the correct\n            ;; ~window-hscroll' by multiplying it with a non-scaled value and\n            ;; dividing it with a scaled width value, rounding it to the upper\n            ;; boundary.  Since there's no way to get unscaled value, we have to get\n            ;; a width of a face that is not scaled by ~text-scale-mode', such as\n            ;; ~window-divider' face.\n            (ceiling (/ (* (window-hscroll) (window-font-width nil 'window-divider))\n                        (float (window-font-width)))))\n           (line-number-width\n            ;; compensate line numbers width\n            (if (bound-and-true-p display-line-numbers-mode)\n                (- display-line-numbers-width)\n              0))\n           ;; subtracting 2 for extra space in case some calculations were imprecise\n           (threshold (+ window-width hscroll-offset line-number-width -2)))\n      (catch 'excessive\n        (while (not (eobp))\n          (let ((start (point)))\n            (save-restriction\n              (narrow-to-region start (min (+ start 1 threshold)\n                                           (point-max)))\n              (forward-line 1))\n            (unless (or (bolp)\n                        (and (eobp) (<= (- (point) start)\n                                        threshold)))\n              (throw 'excessive t))))))))\n\n#+END_SRC\nThis function can calculate window width, and line width, and check if any line in the buffer exceeds the window width screen-wise. By screen-wise I mean that if you've scrolled text to the left, it will begin to return ~nil~ once all lines don't exceed the right border of the window, thus achieving the described behavior in the diagrams. I then define advice around the ~scroll-left~ function, and it works pretty good:\n\n#+BEGIN_SRC elisp\n(define-advice scroll-left (:around (foo &optional arg set-minimum))\n  (when (and truncate-lines\n             (not (memq major-mode '(vterm-mode term-mode)))\n             (truncated-lines-p))\n    (funcall foo arg set-minimum)))\n\n#+END_SRC\nThough it's not very accurate when using ~text-scale-adjust~, as line width is not the same as before, the function, that reports how much the window was scrolled to the left still returns unscaled values. You can see my thoughts in the function's comments. Any suggestions on how to make it more accurate?",
        "created_datetime": "2022-01-13 07:01:23+00:00"
    },
    "t1_hoqrg9e": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_rgu8dp/comment/t1_hoqrg9e][\ud83d\udd17]] \n*Votes* 8\n\n~bs-show~ is an interesting command, it shows a pop-up-like buffer that you can use to quickly act on open buffers. There are a ton of customizations you can make and a bunch of convenient bindings. I've been trying it out instead of ~list-buffers~ and ~ibuffer~ and I like it so far, very fast.",
        "created_datetime": "2021-12-16 04:53:16+00:00"
    },
    "t1_hnx4z28": {
        "author": "TeMPOraL_PL",
        "upvotes": 16,
        "body": "** u/TeMPOraL_PL [[https://www.reddit.com/r/emacs/comments/t3_rbmfwk/comment/t1_hnx4z28][\ud83d\udd17]] \n*Votes* 16\n\nIf you're like me, and your day ends way past midnight, handling those last few tasks in your Org Mode agenda gets tricky. Fortunately, it turns out Org Mode has what I call \"25th hour mode\".\n\n#+BEGIN_SRC elisp\n;; consider the current day to end at 3AM\n(setq org-extend-today-until 3) \n    \n;; make timestamp processing functions aware of this\n(setq org-use-effective-time t) \n\n#+END_SRC\nCombined, this allows to extend the day past midnight, with things like agenda views, scheduling commands, repeaters, etc. thinking the current time is 23:59 up until the ~org-extend-today-until~ limit. With this enabled, if I have a task that has a repeater of  and complete it at 01:00, I no longer have to then manually reschedule the task back one day.",
        "created_datetime": "2021-12-10 00:02:46+00:00"
    },
    "t1_hnp5rhn": {
        "author": "el_tuxo",
        "upvotes": 14,
        "body": "** u/el_tuxo [[https://www.reddit.com/r/emacs/comments/t3_rbmfwk/comment/t1_hnp5rhn][\ud83d\udd17]] \n*Votes* 14\n\nWorking on a remote server with Tramp in eshell it's so easy that I'm always worried that I could run by mistake a command on the wrong machine.\n\nSo I implemented a small function that makes me aware that I'm in a Tramp session by changing the prompt color.\n\n#+BEGIN_SRC elisp\n(require 'subr-x)  \n(defun tuxo/prompt-color-tramp ()  \n\"Change prompt color if a tramp session is open\"  \n  (if (file-remote-p default-directory)  \n      (set-face-foreground 'eshell-prompt \"red\")  \n      (set-face-foreground 'eshell-prompt \"green\")))\n    \n(use-package eshell\n  :hook (eshell-post-command . tuxo/prompt-color-tramp))\n\n#+END_SRC\nDo you have any suggestions on how I could improve this issue?",
        "created_datetime": "2021-12-08 09:09:13+00:00"
    },
    "t1_hnrdt9x": {
        "author": "blankspruce",
        "upvotes": 9,
        "body": "** u/blankspruce [[https://www.reddit.com/r/emacs/comments/t3_rbmfwk/comment/t1_hnrdt9x][\ud83d\udd17]] \n*Votes* 9\n\nIs there a package similar to wdired or wgrep that would work on magit diffs? \n\nParticular use cases I have in mind are:\n\n1. You've prepared a commit for pull request and during review someone spotted a mistake that's present in multiple files of that commit. Usually I grep the mistake and edit only affected files with wgrep (there might be some arbitrary reason to not fix similar issue in files not present in the commit).\n2. In C++ it happens sometimes that you want to separate declaration and definition and in your commit you forgot to move some definitions to .cpp.\nUsually I switch to ~foobar.hpp~, kill the necessary part, switch to ~foobar.cpp~, yank that part.",
        "created_datetime": "2021-12-08 20:09:24+00:00"
    },
    "t1_hnvaab8": {
        "author": "rberaldo",
        "upvotes": 8,
        "body": "** u/rberaldo [[https://www.reddit.com/r/emacs/comments/t3_rbmfwk/comment/t1_hnvaab8][\ud83d\udd17]] \n*Votes* 8\n\nA tiny thing I just noticed: in ~tex-mode~, you can create a new environment with ~C-c C-e~. With the universal argument (~C-u C-c C-e~), however, you can easily change any environment into another.\n\nI created an ~enumerate~ environment and immediately changed my mind. By chance, I intuitively tried the aforementioned command and I was instantly able to change the environment into ~itemize~.\n\nEDIT: markdown",
        "created_datetime": "2021-12-09 16:34:01+00:00"
    },
    "t1_hmryv5o": {
        "author": "rucci99",
        "upvotes": 16,
        "body": "** u/rucci99 [[https://www.reddit.com/r/emacs/comments/t3_r69w7i/comment/t1_hmryv5o][\ud83d\udd17]] \n*Votes* 16\n\nI just found out that Magit can backup changes of uncommitted files automatically. Here's the link to online manual:\n[[https://magit.vc/manual/magit/Wip-Modes.html#Wip-Modes][Magit Wip Modes]].",
        "created_datetime": "2021-12-01 09:04:15+00:00"
    },
    "t1_hmst3ih": {
        "author": "WorldsEndless",
        "upvotes": 10,
        "body": "** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_r69w7i/comment/t1_hmst3ih][\ud83d\udd17]] \n*Votes* 10\n\nmacros in emacs are like a secret, forgotten art, but I use them with regexp search, orgmode commands to tweak repeating events (or any number of other uses). Learn macros; they gave emacs its name! One usage here: https://orys.us/ug",
        "created_datetime": "2021-12-01 14:38:58+00:00"
    },
    "t1_hjfbuae": {
        "author": "T_Verron",
        "upvotes": 8,
        "body": "\\** u/T_Verron [[https://www.reddit.com/r/emacs/comments/t3_qlpvgu/comment/t1_hjfbuae][\ud83d\udd17]] \n\\*Votes* 8\n\n(Nothing too fancy, I'm sure a lot of people have a similar thing in their toolbox, but it was useful to me again today.)\n\nWhen writing elisp packages, the compiler expects that all variables and functions are declared. Declaring variables defined somewhere else is easy, one just needs to \\~defvar\\~ them, but declaring functions should mention the file where it is defined.\n\nInserting all those forms is tedious, especially if the function comes from a package with several files. But emacs already knows where the function comes from, so we can just ask it.\n\n#+BEGIN_SRC elisp\n(defun tv/add-declare-function (fun)\n  (interactive \"a\") \n  (let* ((buf (car (find-function-noselect fun))) \n         (name (file-name-base (buffer-file-name buf)))) \n    (insert (format \"(declare-function %s \"%s\")\\n\" fun name))))\n\n#+END_SRC\nCall it with M-x, insert the name of the function you want to declare (with completion), and voil\u00e0.",
        "created_datetime": "2021-11-05 15:26:24+00:00"
    },
    "t1_hicheof": {
        "author": "tryptych",
        "upvotes": 8,
        "body": "** u/tryptych [[https://www.reddit.com/r/emacs/comments/t3_qgrpte/comment/t1_hicheof][\ud83d\udd17]] \n*Votes* 8\n\nA colleague just showed me Intellij's \"[[https://www.jetbrains.com/help/idea/comparing-files-and-folders.html#clipboard][compare with clipboard]]\" feature: it's fairly neat, you select a region, invoke compare-with-clipboard and get a diff of the two selections.\n\nIt didn't take me long to implement something similar:\n\n#+BEGIN_SRC elisp\n(defun ediff-compare-region-clipboard (begin end)\n  (interactive \"r\")\n  (save-excursion\n    (let ((selected-region (buffer-substring begin end))\n          (clipboard-buffer (get-buffer-create \"*ediff-clipboard*\"))\n          (region-buffer (get-buffer-create \"*ediff-region*\")))\n      (with-current-buffer clipboard-buffer\n        (insert (car kill-ring)))\n      (with-current-buffer region-buffer\n        (insert selected-region))\n      (ediff-buffers clipboard-buffer region-buffer))))\n\n#+END_SRC\nIt's not ideal though.  In particular, is there a better way to insert the \"clipboard\"?  One thing I quickly found was that you might copy the region to compare but then so many editing commands will add to the kill-ring, so I might want to make that part of the process interactive.",
        "created_datetime": "2021-10-28 06:17:21+00:00"
    },
    "t1_hi8crmc": {
        "author": "yogsototh",
        "upvotes": 11,
        "body": "** u/yogsototh [[https://www.reddit.com/r/emacs/comments/t3_qgrpte/comment/t1_hi8crmc][\ud83d\udd17]] \n*Votes* 11\n\nI just made this nice combination of emacs packages and personal theme to achieve the cool effect of iAWriter\n\nSee here: https://her.esy.fun/posts/0021-ia-writer-clone-within-doom-emacs/index.html",
        "created_datetime": "2021-10-27 11:46:47+00:00"
    },
    "t1_hhinrm4": {
        "author": "SamTheComputerSlayer",
        "upvotes": 10,
        "body": "** u/SamTheComputerSlayer [[https://www.reddit.com/r/emacs/comments/t3_qbvyza/comment/t1_hhinrm4][\ud83d\udd17]] \n*Votes* 10\n\nI use a lot of toggles in my config. I used to do it ad-hoc every time, but the pattern ends up the same so I made this macro:\n#+BEGIN_SRC elisp\n(defun deftoggle-var-doc (name)\n  (concat \"Non-nil if \" name \" is enabled.\\n\\n\"\n      \"See \" name\n      \" command for a description of this toggle.\"))\n(defun deftoggle-fun-doc (name doc)\n  (concat \"Toggle \" name \" on or off.\\n\\n\" doc))\n(defmacro deftoggle (name doc enabler disabler)\n  ~(progn\n (defvar ,name nil ,(deftoggle-var-doc (symbol-name name)))\n (defun ,name (&optional enable)\n   ,(deftoggle-fun-doc (symbol-name name) doc)\n   (interactive)\n   (if (called-interactively-p 'interactive)\n       (progn\n         (if ,name\n             ,disabler\n           ,enabler)\n         (setq ,name (not ,name)))\n     (progn\n       (if enable\n           ,enabler\n         ,disabler)\n       (setq ,name enable))))))\n#+END_SRC\n\nIt's very similar to define-minor-mode, but with all the hooks, keymaps, and lighters stripped out, so it's less verbose. Here I use it to toggle my theme for example:\n#+BEGIN_SRC elisp\n(deftoggle sam-toggle-theme\n  \"Toggle theme between light and dark.\"\n  (progn (disable-theme 'dracula)\n     (load-theme 'spacemacs-light t))\n  (progn (disable-theme 'spacemacs-light)\n     (load-theme 'dracula t)))\n#+END_SRC",
        "created_datetime": "2021-10-21 18:57:08+00:00"
    },
    "t1_hgk3wik": {
        "author": "Stefan-Kangas",
        "upvotes": 14,
        "body": "** u/Stefan-Kangas [[https://www.reddit.com/r/emacs/comments/t3_q76kok/comment/t1_hgk3wik][\ud83d\udd17]] \n*Votes* 14\n\nThis is pretty neat: scrolling up/down one line at a time while keeping the position of point:\n\n~(setq scroll-preserve-screen-position 1)~  \n~(global-set-key (kbd \"M-n\") (kbd \"C-u 1 C-v\"))~  \n~(global-set-key (kbd \"M-p\") (kbd \"C-u 1 M-v\"))~  \n\n\nFrom: http://pragmaticemacs.com/emacs/scrolling-and-moving-by-line/",
        "created_datetime": "2021-10-14 02:23:18+00:00"
    },
    "t1_hghtyfo": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_q76kok/comment/t1_hghtyfo][\ud83d\udd17]] \n*Votes* 10\n\nbefore you load evil ~(setq evil-want-minibuffer t)~ to use evil-mode in the minibuffer.",
        "created_datetime": "2021-10-13 16:42:10+00:00"
    },
    "t1_hghp1e4": {
        "author": "[deleted]",
        "upvotes": 9,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_q76kok/comment/t1_hghp1e4][\ud83d\udd17]] \n*Votes* 9\n\nCheckout [[https://github.com/alphapapa/topsy.el][Topsy Mode]], it creates a header at the top of your buffer to show the name of the first function outside of your visual range. It makes scrolling through code much easier because you get an additional visual queue of your location in the buffer. It's one of those things that you never knew you wanted. It takes about 15 seconds to setup.",
        "created_datetime": "2021-10-13 16:08:24+00:00"
    },
    "t1_hfldw8n": {
        "author": "github-alphapapa",
        "upvotes": 10,
        "body": "** u/github-alphapapa [[https://www.reddit.com/r/emacs/comments/t3_q2g1gq/comment/t1_hfldw8n][\ud83d\udd17]] \n*Votes* 10\n\nOne of the most useful bindings for me:\n\n#+BEGIN_SRC elisp\n(use-package avy\n  :bind* ((\"C-j\" . avy-goto-char-timer)))\n#+END_SRC",
        "created_datetime": "2021-10-06 12:56:15+00:00"
    },
    "t1_hepqmq1": {
        "author": "Gangsir",
        "upvotes": 22,
        "body": "** u/Gangsir [[https://www.reddit.com/r/emacs/comments/t3_pxqvtm/comment/t1_hepqmq1][\ud83d\udd17]] \n*Votes* 22\n\nback-to-indentation. Before I found this function I would always do some awkward triple key combo like C-a M-f M-b.\n\nIt's just bound to M-m. Jumps you right to the first non-white space character on the line. What's even spicier is that it works in reverse too - if you're at the front of the line it jumps you forward, if you're at the end or middle it jumps backward.\n\nIt still works even on lines that aren't indented, same as C-a in that case.\n\nSo useful, especially for resetting point during macros that need to start at the first char on the line.",
        "created_datetime": "2021-09-29 13:29:04+00:00"
    },
    "t1_hf1gzs2": {
        "author": "Stefan-Kangas",
        "upvotes": 10,
        "body": "** u/Stefan-Kangas [[https://www.reddit.com/r/emacs/comments/t3_pxqvtm/comment/t1_hf1gzs2][\ud83d\udd17]] \n*Votes* 10\n\nRead [[https://mitpress.mit.edu/sites/default/files/sicp/index.html][SICP]]. Preferably in Info, installable through MELPA or: [[https://github.com/webframp/sicp-info][https://github.com/webframp/sicp-info]]",
        "created_datetime": "2021-10-02 01:33:53+00:00"
    },
    "t1_hexdfiq": {
        "author": "Stefan-Kangas",
        "upvotes": 10,
        "body": "** u/Stefan-Kangas [[https://www.reddit.com/r/emacs/comments/t3_pxqvtm/comment/t1_hexdfiq][\ud83d\udd17]] \n*Votes* 10\n\nReplace the binding for ~count-words-region~ with ~count-words~. The latter has better semantics: it only shows words in region if the region is active.\n\n~(global-set-key (kbd \"M-=\") #'count-words)~",
        "created_datetime": "2021-10-01 03:03:01+00:00"
    },
    "t1_hcxub77": {
        "author": "dmartincy",
        "upvotes": 10,
        "body": "** u/dmartincy [[https://www.reddit.com/r/emacs/comments/t3_polxft/comment/t1_hcxub77][\ud83d\udd17]] \n*Votes* 10\n\nIf you write Lisp, there's a couple of old Emacs commands to help you write code while keeping parenthesis balanced: ~M-(~ (~insert-parenthesis~), and ~M-)~ (~move-past-close-and-reindent~). They used to be documented in old Emacs manuals, but presumably their description was removed to make room for other content.\n\nWith a prefix argument, ~M-(~ wraps in parenthesis that number of sexps. For example with point represented as \"*\":\n\n\\*foo -> C-u 1 M-( -> (foo)\n\nThere's more information in EmacsWiki: https://www.emacswiki.org/emacs/InsertPair",
        "created_datetime": "2021-09-15 12:53:57+00:00"
    },
    "t1_hc3bikc": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "\\** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_pk6akd/comment/t1_hc3bikc][\ud83d\udd17]] \n\\*Votes* 8\n\nI'm using [[https://github.com/oantolin/orderless][orderless]] for completion but I also want to walk through files with initials only, to do something like [[https://imgur.com/a/CJg8MGw][like this]] for example. It only requires to ignore the case and ask the minibuffer to use initials. \n\n#+BEGIN_SRC elisp\n(use-package orderless\n      :ensure t\n      :custom\n      (completion-styles '(orderless))\n      (completion-category-defaults nil)\n      (read-file-name-completion-ignore-case t)\n      (completion-category-overrides '((file (styles partial-completion))\n    \t\t\t\t   (minibuffer (initials)))))\n#+END_SRC",
        "created_datetime": "2021-09-08 19:53:06+00:00"
    },
    "t1_hb765zp": {
        "author": "slinchisl",
        "upvotes": 8,
        "body": "\\** u/slinchisl [[https://www.reddit.com/r/emacs/comments/t3_pfpgm9/comment/t1_hb765zp][\ud83d\udd17]] \n\\*Votes* 8\n\nThis is a very simple function, but it has saved me from countless of \"do I have to do _this_ again now?\" moments.\n\nWhen editing LaTeX files I often find myself wanting to convert inline math to display math, in order for equations to \"pop out\" more.  I could not find anything already implemented, so I wrote something that does this whenever the point is inside an inline math (`$`-based, sorry `\\( \\)` gang) environment: \n\n#+BEGIN_SRC elisp\n(defun slot/inline-to-display-math ()\n  \"Transform inline math to display math.\"\n  (interactive)\n  (when (and (texmathp) (equal \"$\" (car texmathp-why))) ; inline math?\n    (let* ((beg   (save-excursion (search-backward \"$\")))\n           (end-$ (search-forward \"$\"))\n           (end   (if (-contains? '(?. ?,) (char-after end-$))\n                      (1+ end-$)    ; put punctuation into display-maths\n                    end-$)))\n      (kill-region beg end)\n      ;; insert display math\n      (TeX-newline)\n      (insert \"\\\\[\")\n      (TeX-newline)\n      (insert-for-yank (string-replace \"$\" \"\" (current-kill 0)))\n      (TeX-newline)\n      (insert \"\\\\]\")\n      (TeX-newline))))\n\n#+END_SRC\nFor example, this would transform \n\n#+BEGIN_SRC elisp\nThe cowedge $\\iota \\colon P \\xRightarrow{\\; .. \\;} C$ is easily seen to be unique up to unique isomorphism.\n\n#+END_SRC\ninto \n\n#+BEGIN_SRC elisp\nThe cowedge\n\\[\n  \\iota \\colon P \\xRightarrow{\\; .. \\;} C\n\\]\nis easily seen to be unique up to unique isomorphism.\n\n#+END_SRC\nI'm a bit surprised by my not finding any function to already insert some string into the simple `\\[ \\]`-based display math; everything I could find just inserted dollars instead.  I suppose one could insert a `displaymath` environment, but I've never like the look of that.  Oh well.",
        "created_datetime": "2021-09-01 16:38:26+00:00"
    },
    "t1_haddtq6": {
        "author": "oantolin",
        "upvotes": 8,
        "body": "** u/oantolin [[https://www.reddit.com/r/emacs/comments/t3_pb6w2z/comment/t1_haddtq6][\ud83d\udd17]] \n*Votes* 8\n\nThis one is probably pretty niche but it was a noticeable improvement in my workflow, so I thought I'd share. I sometimes have to fill out forms I get in PDF but that aren't fillable PDFs, merely scans of paper forms. I guess a reasonable person would install The Gimp or something like that, but I fill them out in LaTeX, using ~\\includegraphics~ for the PDF form, and the ~textpos~ package to place text on top of it. \n\nThis is requires giving the coordinates you want the text placed at, which I used to do by trial and error. And as much as I normally dislike the mouse, I had to admit that for specifying a point in an image it is a much better input device than the keyboard. So I decided to write a function that would let me click on a point in a PDF and insert the coordinates in centimeters at point in the current buffer. Writing it was fairly easy and I think really illustrates the power of a system like Emacs, a Lisp Machine or Smalltalk, where you can instantly find the source code implementing any given functionality. I knew that ~pdf-tools~ must contain some code to translate mouse clicks into PDF document coordinates, because it lets you place annotations by clicking. I have the text annotation function bound to ~a t~, and quick ~C-h k~ later I was reading the source code. And after that writing the following function was pretty easy:\n\n#+BEGIN_SRC elisp\n(defun insert-coordinates ()\n  \"Insert coordinates (in centimeters) of mouse click.\"\n  (interactive)\n  (let ((pos (event-start (pdf-util-read-click-event \"Click on PDF\"))))\n    (insert\n     (with-selected-window (posn-window pos)\n       (let ((pt (pdf-util-scale-pixel-to-points (posn-object-x-y pos))))\n         (cl-flet ((f (x) (* 2.54 (/ x 72.0))))\n           (format \"(%.1fcm,%.1fcm)\" (f (car pt)) (f (cdr pt)))))))))\n#+END_SRC",
        "created_datetime": "2021-08-26 02:47:17+00:00"
    },
    "t1_h9e6uqq": {
        "author": "github-alphapapa",
        "upvotes": 18,
        "body": "** u/github-alphapapa [[https://www.reddit.com/r/emacs/comments/t3_p6mwx2/comment/t1_h9e6uqq][\ud83d\udd17]] \n*Votes* 18\n\nHere's a popular Emacs config I just rediscovered.  Some cool stuff here.  https://github.com/angrybacon/dotemacs",
        "created_datetime": "2021-08-18 11:20:38+00:00"
    },
    "t1_h8utmh2": {
        "author": "oantolin",
        "upvotes": 9,
        "body": "** u/oantolin [[https://www.reddit.com/r/emacs/comments/t3_p28rl5/comment/t1_h8utmh2][\ud83d\udd17]] \n*Votes* 9\n\nImenu is pretty adictive and it's disappointing when some major mode doesn't support it. Luckily, it's fairly easy to cook up some regexps to provide imenu support in a new major mode. For example I recently noticed that customize buffers didn't have imenu support add I wrote this:\n\n#+BEGIN_SRC elisp\n(defun configure-imenu-Custom ()\n  (setq imenu-generic-expression\n        '((\"Faces\" \"^\\\\(?:Show\\\\|Hide\\\\) \\\\(.*\\\\) face: \\\\[sample\\\\]\" 1)\n          (\"Variables\" \"^\\\\(?:Show Value\\\\|Hide\\\\) \\\\([^:\\n]*\\\\)\" 1))))\n\n(add-hook 'Custom-mode-hook #'configure-imenu-Custom)\n\n#+END_SRC\nOne subtlety with writing this is that the customize buffers show little triangles instead of the words \"Show\", \"Hide\" or \"Show Value\". To figure out what text is really in the buffer you can use ~C-u C-x =~ which tells you about any overlays at point.",
        "created_datetime": "2021-08-14 01:58:37+00:00"
    },
    "t1_h8iin6r": {
        "author": "Bodertz",
        "upvotes": 8,
        "body": "** u/Bodertz [[https://www.reddit.com/r/emacs/comments/t3_p28rl5/comment/t1_h8iin6r][\ud83d\udd17]] \n*Votes* 8\n\nMeta:\n\nApparently, the ~&c.~ in the title is an abbreviation of the abbreviation ~etc.~, which is fine except that the sidebar's link to past threads of this kind is in fact a link to a reddit search which includes as a search term ~etc.~ but not ~&c.~, so this thread will not show up.",
        "created_datetime": "2021-08-11 09:59:38+00:00"
    },
    "t1_h67qge6": {
        "author": "globalcandyamnesia",
        "upvotes": 15,
        "body": "** u/globalcandyamnesia [[https://www.reddit.com/r/emacs/comments/t3_ooldn6/comment/t1_h67qge6][\ud83d\udd17]] \n*Votes* 15\n\nI'm trying to feminize my voice and org mode has been invaluable.\n\n#+BEGIN_SRC elisp\n(org-babel-do-load-languages 'org-babel-load-lanuages\n  '((shell . t)))\n    \n(setq org-capture-templates\n  ~((\"v\" \"Voice\" entry\n    (file+olp+datetree ,(concat my-org-directory \"voice/training.org\"))\n    ,(concat\n      \"* Record \\n\"\n      \"\\n\"\n      \"  #+begin_src sh\\n\"\n      \"    rec %(format-time-string \\\"%Y-%m-%d-%H.%M.%S\\\").aiff\\n\"\n      \"  #+end\\_src\\n\"\n      \"\\n\"\n      \"* Play\\n\"\n      \"  #+begin_src sh\\n\"\n      \"    play %(format-time-string \\\"%Y-%m-%d-%H.%M.%S\\\").aiff\\n\"\n      \"  #+end_src\\n\")\n    :immediate-finish t\n    :jump-to-captured t)))\n\n#+END_SRC\nThis requires 'SoX' for linux. You can go into the record src block and press \\~C-c C-c\\~ to start recording and \\~C-g\\~ to end. To play back the recording, press \\~C-c C-c\\~ within the play src block. I imagine this might be useful beyond the trans community for basic voice journaling.",
        "created_datetime": "2021-07-23 05:49:11+00:00"
    },
    "t1_h5584no": {
        "author": "vatai",
        "upvotes": 13,
        "body": "** u/vatai [[https://www.reddit.com/r/emacs/comments/t3_ojzv53/comment/t1_h5584no][\ud83d\udd17]] \n*Votes* 13\n\nThe emacs lisp tutorial is the real tutorial for emacs ;)",
        "created_datetime": "2021-07-14 12:56:58+00:00"
    },
    "t1_h55vkl6": {
        "author": "PriorOutcome",
        "upvotes": 10,
        "body": "** u/PriorOutcome [[https://www.reddit.com/r/emacs/comments/t3_ojzv53/comment/t1_h55vkl6][\ud83d\udd17]] \n*Votes* 10\n\nI often find myself wanting to be able to switch between ~master~ and a feature branch in magit quickly:\n\n#+BEGIN_SRC elisp\n(defun lw-magit-checkout-last (&optional start-point)\n    (interactive)\n    (magit-branch-checkout \"-\" start-point))\n(transient-append-suffix 'magit-branch \"w\"\n  '(\"-\" \"last branch\" lw-magit-checkout-last))\n\n#+END_SRC\nSo that ~C-x g b -~ switches to the last branch I was on, similar to ~cd -~.",
        "created_datetime": "2021-07-14 16:20:55+00:00"
    },
    "t1_h4dxjbz": {
        "author": "oantolin",
        "upvotes": 15,
        "body": "** u/oantolin [[https://www.reddit.com/r/emacs/comments/t3_ofen99/comment/t1_h4dxjbz][\ud83d\udd17]] \n*Votes* 15\n\nIf you want to search and replace but with preview for the matches, don't use ~query-replace-regexp~ directly. Instead start by searching for your regexp in ~isearch-forward-regexp~, which highlights the matches interactively, and once you have the correct regexp, run ~isearch-query-replace~ (bound to ~M-%~ in ~isearch-mode-map~).\n\nNote that there is also an ~isearch-query-replace-regexp~ command but you don't need it: ~isearch-query-replace~ will automatically detect if your isearch session was for regexps. The docstring for ~isearch-query-replace~ doesn't seem to mention this nice feature.",
        "created_datetime": "2021-07-07 20:11:05+00:00"
    },
    "t1_h2rizey": {
        "author": "oantolin",
        "upvotes": 17,
        "body": "** u/oantolin [[https://www.reddit.com/r/emacs/comments/t3_o68i0v/comment/t1_h2rizey][\ud83d\udd17]] \n*Votes* 17\n\nI have two org mode link tips:\n\n1. ~(setq org-return-follows-link t)~ lets you press RET to follow a\n   link. Don't worry, the traditional behavior of RET, namely inserting\n   a newline, is still easy: ~C-q C-j~.\n\n2. I often want to see what the destination of a link is. I used to\n   use one of these methods:\n   \n   - mouse hover,\n   - running and canceling ~org-insert-link~ (~C-c C-l~, read the\n#+BEGIN_SRC elisp\n destination, ~C-g~),\n#+END_SRC\n   - ~org-toggle-link-display~, which toggles between the neat formatting of \n#+BEGIN_SRC elisp\n links and the raw source and is pretty ugly.\n \n#+END_SRC\n   But a better option is to use ~display-local-help~ (~C-h .~), which\n   will show the tooltip in the echo area. And, you can even have the\n   tooltip at point echoed automatically with ~(setq\n   help-at-pt-display-when-idle t)~. There is a delay controlled by\n   the variable ~help-at-pt-timer-delay~ which I like to set to 0.\n   Beware that just using ~(setq help-at-pt-timer-delay 0)~ has no effect,\n   you need to use ~customize-set-variable~ or manually cancel the\n   timer and set a new one (see below).\n   \n   Now, these ~help-at-pt~ variables aren't specifically for org\n   links, they control the behavior of all tooltips, and I quickly\n   realized I really only wanted to change the behavior in org mode\n   buffers. You can do that as follows:\n   \n#+BEGIN_SRC elisp\n   (defun echo-area-tooltips ()\n     \"Show tooltips in the echo area automatically for current buffer.\"\n     (setq-local help-at-pt-display-when-idle t\n                 help-at-pt-timer-delay 0)\n     (help-at-pt-cancel-timer)\n     (help-at-pt-set-timer))\n\n   (add-hook 'org-mode-hook #'echo-area-tooltips)\n#+END_SRC",
        "created_datetime": "2021-06-23 14:13:38+00:00"
    },
    "t1_h2rdkkz": {
        "author": "TheDrownedKraken",
        "upvotes": 37,
        "body": "** u/TheDrownedKraken [[https://www.reddit.com/r/emacs/comments/t3_o68i0v/comment/t1_h2rdkkz][\ud83d\udd17]] \n*Votes* 37\n\nDo you think it might be good to make this a little less frequently refreshed? There are usually some great tips that get lost to Reddit\u2019s ephemerality pretty quickly.\n\nI think monthly would be better, given the modest size of this subreddit.",
        "created_datetime": "2021-06-23 13:20:44+00:00"
    },
    "t1_h31xz50": {
        "author": "globalcandyamnesia",
        "upvotes": 9,
        "body": "** u/globalcandyamnesia [[https://www.reddit.com/r/emacs/comments/t3_o68i0v/comment/t1_h31xz50][\ud83d\udd17]] \n*Votes* 9\n\nIf you're using the mark setting commands to expand a selection like ~M-@~ (mark next word) or ~C-M-@~ (mark next sexp), you can swap the point and mark (~C-x C-x~) and the selection will be expanded to the left rather than the right.\n\nSo if you're in the middle of a sentence, you can press ~M-@~ a few times to select some words to the right, press ~C-xx~, and press ~M-@~ a few more times to add words before the selection.",
        "created_datetime": "2021-06-26 00:53:42+00:00"
    },
    "t1_h1znz1s": {
        "author": "sauntcartas",
        "upvotes": 10,
        "body": "** u/sauntcartas [[https://www.reddit.com/r/emacs/comments/t3_o0zvb5/comment/t1_h1znz1s][\ud83d\udd17]] \n*Votes* 10\n\nI keep forgetting how useful the ~pcase~ macro is.  Recently I wrote a command that expected to find a single jar file in a certain directory and operate on it.  I started with a more \"traditional\" implementation:\n\n#+BEGIN_SRC elisp\n(let ((jars (directory-files some-dir t (rx \".jar\" eos))))\n  (if (= 1 (length jars))\n      (do-something-with (car jars))\n    (error \"Didn't find exactly one jar file\")))\n\n#+END_SRC\nThen I remembered ~pcase~:\n\n#+BEGIN_SRC elisp\n(pcase (directory-files some-dir t (rx \".jar\" eos))\n  (~(,jar) (do-something-with jar))\n  (_ (error \"Didn't find exactly one jar file\")))\n\n#+END_SRC\nMuch more readable!",
        "created_datetime": "2021-06-16 18:22:34+00:00"
    },
    "t1_gzjal45": {
        "author": "jumpUpHigh",
        "upvotes": 8,
        "body": "\\** u/jumpUpHigh [[https://www.reddit.com/r/emacs/comments/t3_nlefvx/comment/t1_gzjal45][\ud83d\udd17]] \n\\*Votes* 8\n\nConsidering the ongoing freenode to librea.chat movement, I tried to use erc for the *n*th time to connect to the debian channel on oftc. I want to authenticate automatically but it doesn't happen. I still need to use `/msg NickServ IDENTIFY mypass`. Can you tell me what to do?\n\n\n\n#+BEGIN_SRC elisp\n (use-package erc\n   :custom\n   (erc-autojoin-channels-alist '((\"OFTC\" \"#debian\" )))\n   (erc-prompt-for-nickserv-password nil)\n   (erc-prompt-for-password nil)\n\n   :config\n   (add-to-list 'erc-modules 'services)\n   (erc-update-modules)\n   (erc-autojoin-enable)\n   (defun erc-start()\n     \"Start ERC.\"\n     (interactive)\n     (erc :server \"irc.oftc.net\" :nick \"mynick\"))\n ) \n\n#+END_SRC\nand my `~/.authinfo` file has an entry\n\n#+BEGIN_SRC elisp\n machine irc.oftc.net login \"mynick\" password \"mypass\"\n\n#+END_SRC\nEdit: Using GNU Emacs 27.1",
        "created_datetime": "2021-05-26 18:09:29+00:00"
    },
    "t1_gxx6frj": {
        "author": "PotentiallyAlice",
        "upvotes": 11,
        "body": "** u/PotentiallyAlice [[https://www.reddit.com/r/emacs/comments/t3_n9q662/comment/t1_gxx6frj][\ud83d\udd17]] \n*Votes* 11\n\nI thought it might be a fun project to make a package to expose org-capture templates as endpoints, so I can add reminders to my TODO list via any device on the network. Turns out, it was easy enough that a package would be kinda pointless:\n\n#+BEGIN_SRC elisp\n(defservlet* capture/:keys/:contents text/plain () (org-capture-string contents keys))\n\n#+END_SRC\nNow I can hit \"localhost:8080/capture/t/test reminder\" and it'll put a \"* TODO test reminder\" line into my todo.org. Neat!",
        "created_datetime": "2021-05-13 01:21:54+00:00"
    },
    "t1_gxpeh9v": {
        "author": "Tatrics",
        "upvotes": 14,
        "body": "** u/Tatrics [[https://www.reddit.com/r/emacs/comments/t3_n9q662/comment/t1_gxpeh9v][\ud83d\udd17]] \n*Votes* 14\n\nI'm slowly working on an alternative shell: [[https://github.com/TatriX/tshell][https://github.com/TatriX/tshell]]\n\nInstead of using repl-like interface, all the commands go to one buffer (and file if you want) and output goes to another buffer. Like if you put your elisp code in \\*scratch\\* buffer and then evaluate it with \\~C-x C-e\\~.\n\nIt's in a very early stage, but it already allows me to solve most tasks I usually do with more traditional shells.\n\nLet me know what is your first impression, what can be improved and what  do you think in general!",
        "created_datetime": "2021-05-11 08:43:17+00:00"
    },
    "t1_gv8jxz5": {
        "author": "[deleted]",
        "upvotes": 16,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_mujxm7/comment/t1_gv8jxz5][\ud83d\udd17]] \n*Votes* 16\n\nI use, and love, [[https://github.com/magit/transient][transient]]. I have a ton of commands set up, but the below command is for window manipulation. Personally, I bind it to ~s-w~. I use [[https://github.com/lukhas/buffer-move][buffer-move]] for rearranging windows in a frame.\n\n#+BEGIN_SRC elisp\n(define-transient-command transient-window ()\n  \"Most commonly used window commands\"\n  [[\"Splits\"\n    (\"s\" \"Horizontal\" split-window-below)\n    (\"v\" \"Vertical\"   split-window-right)\n    (\"b\" \"Balance\"    balance-windows)\n    (\"f\" \"Fit\"        fit-window-to-buffer)\n   [\"Window\"\n    (\"c\" \"Clone Indirect\" clone-indirect-buffer)\n    (\"t\" \"Tear Off\" tear-off-window)\n    (\"k\" \"Kill\" delete-window)\n    (\"K\" \"Kill Buffer+Win\"  kill-buffer-and-window)\n    (\"o\" \"Kill Others\"  delete-other-windows)\n    (\"m\" \"Maximize\" maximize-window)]\n   [\"Navigate\"\n    (\"<left>\"  \"\u2190\" windmove-left  :transient t)\n    (\"<right>\" \"\u2192\" windmove-right :transient t)\n    (\"<up>\"    \"\u2191\" windmove-up    :transient t)\n    (\"<down>\"  \"\u2193\" windmove-down  :transient t)]\n   [\"Move\"\n    (\"S-<left>\"  \"S-\u2190\" buf-move-left  :transient t)\n    (\"S-<right>\" \"S-\u2192\" buf-move-right :transient t)\n    (\"S-<up>\"    \"S-\u2191\" buf-move-up    :transient t)\n    (\"S-<down>\"  \"S-\u2193\" buf-move-down  :transient t)]\n   [\"Undo/Redo\"\n    (\"s-z\" \"Winner Undo\" winner-undo :transient t)\n    (\"s-Z\" \"Winner Redo\" winner-redo :transient t)]])\n#+END_SRC",
        "created_datetime": "2021-04-20 20:17:23+00:00"
    },
    "t1_gufsfeu": {
        "author": "11fdriver",
        "upvotes": 10,
        "body": "** u/11fdriver [[https://www.reddit.com/r/emacs/comments/t3_mpwapo/comment/t1_gufsfeu][\ud83d\udd17]] \n*Votes* 10\n\nSometimes I'm working on programs with functions a few pages long, and ~follow-mode~ means that I can open two windows of the same buffer side-by-side and have the text flow like a book between them. I can double or even triple the amount of lines I can view at one time.\n\nThis has largely superseded what I might have used those code-overview map things for, which is difficult anyway, since I like to use Emacs from the terminal.\n\nIt will keep the text aligned as you move through the file, and pairs well with binding ~<mouse-5>~ and ~<mouse-4>~ to the ~scroll-up/down-line~ commands in ~xterm-mouse-mode~.\n\nIf I'm studying/notetaking, I often end up with a few Emacs-windows arranged in a vertical stack. ~winner-mode~ or ~window-configuration-to-register~ are great, but if I want to quickly regain some vertical screen-real-estate without messing up the layout, then it's pretty intuitive to use ~follow-mode~ and just switch multiple windows to the same buffer, now they behave like one.",
        "created_datetime": "2021-04-14 02:20:02+00:00"
    },
    "t1_gtkc524": {
        "author": "b3n",
        "upvotes": 10,
        "body": "** u/b3n [[https://www.reddit.com/r/emacs/comments/t3_ml4wql/comment/t1_gtkc524][\ud83d\udd17]] \n*Votes* 10\n\nSkeletons are one of Emacs' killer features, especially when combined with ~abbrev-mode~. Here's a macro I wrote to make them a little easier to handle:\n\n#+BEGIN_SRC elisp\n(defmacro snip (name &rest skeleton)\n  (let* ((snip-name (symbol-name ~,name))\n         (func-name (intern (concat \"snip-\" snip-name))))\n    ~(progn\n       (define-skeleton ,func-name\n         ,(concat snip-name \" skeleton\")\n         ,@skeleton)\n       (define-abbrev global-abbrev-table ,snip-name\n         \"\" ',func-name))))\n\n#+END_SRC\nHere's a simplistic example using the macro:\n\n#+BEGIN_SRC elisp\n(snip dd \"\" (format-time-string \"%Y-%m-%d\"))\n\n#+END_SRC\nNow (assuming you have ~abbrev-mode~ enabled), type ~dd ~ into your buffer (that's ~d~ ~d~ ~SPC~) and it'll be replaced with the current date.\n\nThis is just scratching the surface, skeletons are extremely powerful. Once you start using them they become a superpower and can take your Emacs usage to the next level.",
        "created_datetime": "2021-04-06 13:59:40+00:00"
    },
    "t1_gsvlfku": {
        "author": "a-k-n",
        "upvotes": 8,
        "body": "** u/a-k-n [[https://www.reddit.com/r/emacs/comments/t3_mg98ki/comment/t1_gsvlfku][\ud83d\udd17]] \n*Votes* 8\n\nI just discovered that installing the Emacs macport homebrew formula with \\~--with-mac-metal\\~ will significantly increase the performance of Emacs. It's buttery smooth!",
        "created_datetime": "2021-03-31 04:26:06+00:00"
    },
    "t1_gstteeo": {
        "author": "[deleted]",
        "upvotes": 14,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_mg98ki/comment/t1_gstteeo][\ud83d\udd17]] \n*Votes* 14\n\nI just discovered the [[https://github.com/Kungsgeten/selected.el][selected]] package, which is brilliant. It creates a keymap that becomes active any time you have an active region. I have bindings for next-line, previous-line, rectangle-mark-mode, end-of-line, upcase-dwim, exchange-point-and-mark, etc. It makes editing and acting on the active region super easy. Sort of like god-mode or Vim's visual mode.",
        "created_datetime": "2021-03-30 19:24:51+00:00"
    },
    "t1_gry6bfs": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_mb8u1m/comment/t1_gry6bfs][\ud83d\udd17]] \n*Votes* 8\n\nIf you want helpful mode to completely take over all help functions, and be able to use it with helm-apropos, then add this to your config:\n\n#+BEGIN_SRC elisp\n(advice-add 'describe-function :override #'helpful-function)\n(advice-add 'describe-variable :override #'helpful-variable)\n(advice-add 'describe-command  :override #'helpful-callable)\n(advice-add 'describe-key      :override #'helpful-key)\n(advice-add 'describe-symbol   :override #'helpful-symbol)\n#+END_SRC",
        "created_datetime": "2021-03-23 17:07:25+00:00"
    },
    "t1_gpeb8n3": {
        "author": "b3n",
        "upvotes": 12,
        "body": "** u/b3n [[https://www.reddit.com/r/emacs/comments/t3_lvw44q/comment/t1_gpeb8n3][\ud83d\udd17]] \n*Votes* 12\n\nHere's a nice eshell command:\n\n#+BEGIN_SRC elisp\n(defun eshell/history ()\n  (interactive)\n  (insert\n   (completing-read \"History: \" (delete-dups (ring-elements eshell-history-ring)))))\n\n#+END_SRC\nIt lets you use your normal completion framework to select an item from history. Suddenly fzf-like history!",
        "created_datetime": "2021-03-02 08:54:47+00:00"
    },
    "t1_gmtk79e": {
        "author": "Bodertz",
        "upvotes": 10,
        "body": "** u/Bodertz [[https://www.reddit.com/r/emacs/comments/t3_lfww57/comment/t1_gmtk79e][\ud83d\udd17]] \n*Votes* 10\n\nFrom the mailing list, I've just learned of ~generic-x.el~, which provides syntax highlighting for ~/etc/fstab~ or ~/etc/passwd~ and the like.  I appreciated that vim provided that out of the box and I was surprised that emacs also does, but it's just disabled.\n\n~(require 'generic-x)~ to enable it.",
        "created_datetime": "2021-02-10 14:48:52+00:00"
    },
    "t1_glr8pkr": {
        "author": "WorldsEndless",
        "upvotes": 13,
        "body": "** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_lapujj/comment/t1_glr8pkr][\ud83d\udd17]] \n*Votes* 13\n\nYou can use EWW to bypass pay-walls on news sites, and other Javascript-enabled nastiness. Plus, eww can copy from what it sees into equivalent orgmode syntax, and it's also compatible with SPRAY for speed-reading. In otherwords, EWW is great for when you just need to READ the internet.",
        "created_datetime": "2021-02-02 17:34:34+00:00"
    },
    "t1_gknr3hp": {
        "author": "w0ntfix",
        "upvotes": 8,
        "body": "\\** u/w0ntfix [[https://www.reddit.com/r/emacs/comments/t3_l0ei0t/comment/t1_gknr3hp][\ud83d\udd17]] \n\\*Votes* 8\n\nmy first package is now on melpa! https://melpa.org/#/ct",
        "created_datetime": "2021-01-25 01:29:03+00:00"
    },
    "t1_gj9ioly": {
        "author": "WorldsEndless",
        "upvotes": 10,
        "body": "** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_kvmmq3/comment/t1_gj9ioly][\ud83d\udd17]] \n*Votes* 10\n\nJust a cool concept: if you have a keypad on your keyboard which you rarely use, bind its nums to something useful. The results are numlock-sensitive and are NOT the same keycodes as regular numbers, so they're just free keys. For example, ~(define-key map (kbd \"<kp-1>\") 'winum-select-window-1)~",
        "created_datetime": "2021-01-14 20:06:07+00:00"
    },
    "t1_gj33uht": {
        "author": "jumpUpHigh",
        "upvotes": 11,
        "body": "** u/jumpUpHigh [[https://www.reddit.com/r/emacs/comments/t3_kvmmq3/comment/t1_gj33uht][\ud83d\udd17]] \n*Votes* 11\n\nAucTeX\n\nWhen you compile your TeX file and there are errors, the message asks you to see error messages using\n\n#+BEGIN_SRC elisp\n C-c ~\n\n#+END_SRC\nThis leads to the last error which is sometimes incomprehensible and you are left to yourself to figure out what went wrong.\n\nInstead of getting the last error, you can get an overview of all the errors by setting below variable to ~t~:\n\n#+BEGIN_SRC elisp\n (setq TeX-error-overview-open-after-TeX-run t)\n\n#+END_SRC\nYou can pop this up in a separate frame using:\n\n#+BEGIN_SRC elisp\n  (setq TeX-error-overview-setup 'separate-frame)\n\n#+END_SRC\nRelated docs are [[https://www.gnu.org/software/auctex/manual/auctex/Error-overview.html][here]].\n\nThis totally changes the way you can handle errors messages.",
        "created_datetime": "2021-01-13 05:44:51+00:00"
    },
    "t1_gj1kn9i": {
        "author": "emacs-noob",
        "upvotes": 13,
        "body": "** u/emacs-noob [[https://www.reddit.com/r/emacs/comments/t3_kvmmq3/comment/t1_gj1kn9i][\ud83d\udd17]] \n*Votes* 13\n\nI use Emacs for React development and it's usually great (rjsx-mode). We recently introduced styled components into our app and while they're very handy, not having proper css support inside rjsx-mode was pretty annoying. I was looking for solutions, maybe extending rjsx-mode, but I wasn't up to that task. I then realized the built-in emacs commands and buffers themselves could solve my problem! What I want is for css inside a styled component, which always looks something like this:\n\n#+BEGIN_SRC elisp\nconst myDiv = styled.div~ // notice the backtick\n    Some css...\n ~ // ending backtick\n\n#+END_SRC\nto *actually* use scss-mode when editing, and then return to rjsx-mode when finished. The elisp is very simple and leads to a trivial workflow:\n\n#+BEGIN_SRC elisp\n;; The following 2 functions allow editing styled components with all scss mode features.\n(defun edit-styled-component ()\n  (interactive)\n  (progn\n    (save-excursion\n      (let ((start (search-backward \"~\"))\n            (end (search-forward \"~\" nil nil 2))) ; second occurrence, since first is ~start'\n        (narrow-to-region start end)))\n    (scss-mode)))\n\n(spacemacs/set-leader-keys-for-major-mode 'rjsx-mode\n  \"ms\" 'edit-styled-component)\n\n;; When editing is done, use the same key sequence to return to the original file.\n(defun return-from-styled-component ()\n  (interactive)\n  (progn\n    (widen)\n    (rjsx-mode)))\n\n(spacemacs/set-leader-keys-for-major-mode 'scss-mode\n  \"ms\" 'return-from-styled-component)\n\n\n#+END_SRC\nSo now when I edit a styled component I just hit **, m s**, which narrows the region to whatever is enclosed by backticks (i.e. all the css) and actually treats it as a bona fide css buffer, with all my snippets, completion, etc. Then when I'm done I just got **, m s** again to widen back to the original (rjsx) buffer!",
        "created_datetime": "2021-01-12 21:26:52+00:00"
    },
    "t1_gi8tvp8": {
        "author": "StrangeAstronomer",
        "upvotes": 8,
        "body": "\\** u/StrangeAstronomer [[https://www.reddit.com/r/emacs/comments/t3_kqsw1k/comment/t1_gi8tvp8][\ud83d\udd17]] \n\\*Votes* 8\n\nHere's a really simple one, but I find it invaluable.\n\nIt took me about 30 years to realise that using C-u with ~buffer-menu~ (C-x C-b) doesn't show 'special' buffers like ~*Messages*~. Less clutter when I want to switch to a file, which is most of the time.\n\nIt then took me a few more years to realise that that's my preferred mode, so I created this simple thing to invert the sense - now C-x C-b only shows me files, and I prefix that with C-u to show special buffers too. Sounds stupid and trivial but it floats my boat.\n\n#+BEGIN_SRC elisp\n(global-set-key (kbd \"C-x C-b\")        '(lambda (&optional arg)\n                                          \"runs buffer-menu but with the sense of C-u inverted (ie files-only unless C-u is given)\"\n                                          (interactive \"P\")\n                                          (setq arg (not arg))\n                                          (buffer-menu arg)))\n#+END_SRC",
        "created_datetime": "2021-01-06 00:07:39+00:00"
    },
    "t1_gi66krb": {
        "author": "geza42",
        "upvotes": 8,
        "body": "** u/geza42 [[https://www.reddit.com/r/emacs/comments/t3_kqsw1k/comment/t1_gi66krb][\ud83d\udd17]] \n*Votes* 8\n\nI created a \"smart\" enter function for C/C++ mode. Here's what it does:\n\n\\* if you press it on a ~for~/~if~/~else~/~switch~ (no matter where the cursor is on the line) it will put ~{~, an empty line and ~}~, and will move the cursor into the body\n\\* if you press it on a ~struct~/~class~, it's similar to the previous case, but it puts a closing semicolon too.\n\\* otherwise it will put a ~;~, and a newline\n\\* if the ~{~, ~;~ or an empty line is already there, it won't put them again\n\\* In comments, it will put an indented line, without continuing the comment (I configured my RET to continue commenting, so I use M-RET when I want to close the comment)\n\nIt is useful with smartparens, because you don't have to skip the closing ~)~ all the time. For example, if you start writing an ~if~ (cursor is ~|~, the closing ~)~ was put by smartparens):\n\n#+BEGIN_SRC elisp\nif (expr|)\n\n#+END_SRC\nThen press M-RET, this will be the result:\n\n#+BEGIN_SRC elisp\nif (expr) {\n    |\n}\n\n#+END_SRC\nSince I created this function I use it all the time, I almost never press ~{~ ~}~ or ~;~.\n\nAt function signatures, it cannot figure out whether you want to create a declaration (closed by ~;~) or definition (closed by ~{ }~), so it puts a ~;~. And the function has a parameter (~force-curly~) with which you can force putting a~{~ (I mapped this to M-S-return).\n\nHere's the code, maybe there can be a lot of improvements:\n\n#+BEGIN_SRC elisp\n(defun my-cc-mode-M-RET-context (force-curly)\n  (let ((c\n         (if force-curly 'curly\n           (let ((s (syntax-ppss)))\n             (cond\n              ((nth 4 s) 'comment)\n              ((and (eolp) (looking-back \"[{;]\")) 'nop)\n              ((save-excursion\n                 (skip-syntax-forward \" \")\n                 (looking-at \"\\\\(for\\\\|if\\\\|switch\\\\|else\\\\|do\\\\)\\s?\")) 'curly)\n              ((save-excursion\n                 (skip-syntax-backward \" \")\n                 (skip-syntax-backward \"w\")\n                 (looking-at \"\\\\(for\\\\|if\\\\|switch\\\\|else\\\\|do\\\\)\\s?\")) 'curly)\n              ((save-excursion\n                 (when (nth 3 s) (skip-syntax-backward \"^\\\"\") (backward-char))\n                 (skip-syntax-backward \" \")\n                 (if (looking-back \")\")\n                     (backward-sexp)\n                   (ignore-errors (backward-up-list)))\n                 (skip-syntax-backward \"(\")\n                 (skip-syntax-backward \" \")\n                 (looking-back \"for\\\\|if\\\\|switch\")) 'curly)\n              ((save-excursion\n                 (skip-syntax-forward \" \")\n                 (looking-at \"struct\\\\|class\")) 'curly+semicolon)\n              ((save-excursion\n                 (skip-syntax-backward \" \")\n                 (skip-syntax-backward \"w\")\n                 (if (looking-at \"struct\\\\|class\") t\n                   (skip-syntax-backward \"w\")\n                   (skip-syntax-backward \" \")\n                   (looking-back \"struct\\\\|class\"))) 'curly+semicolon)\n              (t 'semicolon))))))\n    (cond\n     ((or (eq c 'curly) (eq c 'curly+semicolon))\n      (save-excursion\n        (end-of-line)\n        (if (looking-back \"{\")\n            'nop\n          c)))\n     ((eq c 'semicolon)\n      (save-excursion\n        (end-of-line)\n        (if (looking-back \";\")\n            'nop\n          c)))\n     (t c))))\n    \n(defun my-cc-mode-M-RET (force-curly)\n  (let ((c (my-cc-mode-M-RET-context force-curly)))\n    (cond\n     ((eq c 'nop)\n      (if (save-excursion\n            (forward-line)\n            (beginning-of-line)\n            (looking-at-p \"[[:space:]]*$\"))\n          (progn\n            (forward-line)\n            (c-indent-line))\n      (end-of-line) (newline-and-indent)))\n     ((eq c 'comment) (newline-and-indent))\n     ((eq c 'semicolon)\n      (end-of-line)\n      (self-insert-command 1 ?\\;)\n      (newline-and-indent))\n     ((eq c 'curly)\n      (save-excursion (end-of-line) (unless (looking-back \"\\s\") (insert \" \")) (insert \"{\") (newline-and-indent) (insert \"}\") (c-indent-line))\n      (end-of-line)\n      (newline-and-indent))\n     ((eq c 'curly+semicolon)\n      (save-excursion (end-of-line) (unless (looking-back \"\\s\") (insert \" \")) (insert \"{\") (newline-and-indent) (insert \"};\") (c-indent-line))\n      (end-of-line)\n      (newline-and-indent)))))\n    \n(define-key c-mode-base-map (kbd \"M-RET\") (lambda () (interactive) (my-cc-mode-M-RET nil)))\n(define-key c-mode-base-map (kbd \"<M-S-return>\") (lambda () (interactive) (my-cc-mode-M-RET t)))\n#+END_SRC",
        "created_datetime": "2021-01-05 11:46:44+00:00"
    },
    "t1_gfxbwgy": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "\\** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_kdgv43/comment/t1_gfxbwgy][\ud83d\udd17]] \n\\*Votes* 8\n\nI tried [[https://github.com/minad/marginalia][marginalia]] with light annotation and selectrum, it works well. It displays commands' keybindings in the minibuffer. It's especially useful for modes I don't use daily and for which I haven't memorized the keybindings.",
        "created_datetime": "2020-12-15 14:54:55+00:00"
    },
    "t1_gfwlm9q": {
        "author": "martinslot",
        "upvotes": 8,
        "body": "** u/martinslot [[https://www.reddit.com/r/emacs/comments/t3_kdgv43/comment/t1_gfwlm9q][\ud83d\udd17]] \n*Votes* 8\n\nI need to try to do something custom to eshell so it feels more like home: http://www.modernemacs.com/post/custom-eshell/. Also set som aliases up.\n\nHow does your eshell look like?",
        "created_datetime": "2020-12-15 08:45:13+00:00"
    },
    "t1_gf1msbr": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "\\** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_k8zjx5/comment/t1_gf1msbr][\ud83d\udd17]] \n\\*Votes* 8\n\n[deleted]",
        "created_datetime": "2020-12-08 11:43:43+00:00"
    },
    "t1_ge9det9": {
        "author": "gopar",
        "upvotes": 16,
        "body": "** u/gopar [[https://www.reddit.com/r/emacs/comments/t3_k4gv0x/comment/t1_ge9det9][\ud83d\udd17]] \n*Votes* 16\n\nA very simple thing I've done is remap \";\" (semicolon) to to \"\\_\" (underscore) in almost all modes. Since I work with mainly Python, this is so much easier than always doing SHIFT-DASH every couple of keystrokes. And if I want a regular semicolon, I just do \"C-u ;\" and insert a semicolon\n\nI also set this in modes such as C/C++, etc. This works by automatically setting the last character (if it was an underscore) to a semicolon on enter. \n\neg. \"|\" is cursor\n\nint a = 10\\*10\\_|\n\nturns into\n\nint a = 10\\*10;\n\n| (cursor on new line)\n\n&#x200B;\n\nPretty simple time saver \\\\o/",
        "created_datetime": "2020-12-01 14:18:27+00:00"
    },
    "t1_gb502ps": {
        "author": "andrmuel",
        "upvotes": 9,
        "body": "** u/andrmuel [[https://www.reddit.com/r/emacs/comments/t3_jn6m14/comment/t1_gb502ps][\ud83d\udd17]] \n*Votes* 9\n\nThis is something I'm not actively using anymore, but it was one of my I-love-emacs moments, so I wanted to share this for a while.\n\nAt work, I used to have an org-mode journal where I would take meeting notes. After the meeting, I exported the subtree for the current meeting to a PDF (via ODT) and sent it to the participants via mail.\n\nAfter a while I extended org-export to get a shortcut (~C-e C-s o M~) to automatically\n\n\\* export to PDF via ODT\n   * using a proper corporate design & logo via ODT\\_STYLES\\_FILE header\n\\* rename the file to include the current date\n\\* open thunderbird, starting a new message with\n   * subject taken from document title (if exporting all) or subtree heading (if exporting subtree\n   * pre-filled text\n   * the exported PDF already attached\n\n&#8203;\n\n#+BEGIN_SRC elisp\n;;\n;; export and send to mail\n;;\n(defun org-foo-export-to-foo-and-sendto-mail (org-export-function &optional async subtreep visible-only ext-plist)\n  (interactive)\n  (when (or (string-equal (file-name-extension (buffer-file-name)) \"gpg\")\n            (string-equal (file-name-extension (buffer-file-name)) \"asc\"))\n    (unless (yes-or-no-p \"Really export GPG encrypted file and send via mail? \")\n      (throw 'abort-export-mail-gpg \"export aborted by user\")))\n  (unless subtreep\n    (unless (yes-or-no-p \"Really export everything and send via mail? \")\n      (throw 'abort-export-mail-everything \"export aborted by user\")))\n  (let* ((title (if subtreep\n                    ;; subtree -> use subtree heading as title\n                    (nth 4 (org-heading-components))\n                    ;; whole document -> use document title\n                    (org-element-map\n                        (org-element-parse-buffer)\n                        'keyword\n                      (lambda (e)\n                        (when (string= \"TITLE\" (org-element-property :key e))\n                          (org-element-property :value e)))\n                      nil\n                      t)))\n         (file (file-name-nondirectory (funcall org-export-function async subtreep visible-only ext-plist))) ; note: odt export includes directory in output file name, html export includes no directory\n         (newfile (format \"%s_%s\" (format-time-string \"%Y%m%d\") file))\n         (directory (file-name-directory (buffer-file-name))))\n    (rename-file (concat directory file) (concat directory newfile) 1)\n    (my/thunderbird-compose-mail\n     \"\"\n     (format \"Notes: %s\" title)\n     \"Please find attached my notes ...\\n\\nBest regards, Andreas\"\n     (format \"file://%s%s\"\n             directory newfile))))\n    \n(defun org-odt-export-to-odt-and-sendto-mail (&optional async subtreep visible-only ext-plist)\n  (interactive)\n  (org-foo-export-to-foo-and-sendto-mail 'org-odt-export-to-odt async subtreep visible-only ext-plist))\n    \n(defun org-odt-export-to-pdf-and-sendto-mail (&optional async subtreep visible-only ext-plist)\n  (interactive)\n  (let ((org-odt-preferred-output-format \"pdf\"))\n    (org-odt-export-to-odt-and-sendto-mail async subtreep visible-only ext-plist)))\n    \n(defun org-html-export-to-html-and-sendto-mail (&optional async subtreep visible-only ext-plist)\n  (interactive)\n  (org-foo-export-to-foo-and-sendto-mail 'org-html-export-to-html async subtreep visible-only ext-plist))\n    \n(eval-after-load 'org\n '(progn\n    (org-export-define-derived-backend 'odt-mail 'odt\n      :menu-entry\n      '(?o \"Export to ODT\"\n           ((?m \"As ODT file and send mail\" org-odt-export-to-odt-and-sendto-mail)\n            (?M \"As PDF file and send mail\" org-odt-export-to-pdf-and-sendto-mail))))\n    \n    (org-export-define-derived-backend 'html-mail 'html\n      :menu-entry\n      '(?h \"Export to HTML\"\n           ((?m \"As HTML file and send mail\" org-html-export-to-html-and-sendto-mail))))))\n           \n(defun my/thunderbird-compose-mail (&optional recipient subject body attachment)\n  (interactive)\n  (call-process \"thunderbird\" nil 0 nil \"-compose\" (format \"to='%s',subject='%s',body='%s',attachment='%s'\" recipient subject body attachment)))\n#+END_SRC",
        "created_datetime": "2020-11-04 17:59:05+00:00"
    },
    "t1_gazzdyz": {
        "author": "TheDrownedKraken",
        "upvotes": 16,
        "body": "** u/TheDrownedKraken [[https://www.reddit.com/r/emacs/comments/t3_jn6m14/comment/t1_gazzdyz][\ud83d\udd17]] \n*Votes* 16\n\nIt would be good to archive the questions and tips put in here. I feel like I always find cool stuff in here, but then it becomes very hard to find it later.",
        "created_datetime": "2020-11-03 12:46:01+00:00"
    },
    "t1_g8pgyy1": {
        "author": "Krautoni",
        "upvotes": 10,
        "body": "** u/Krautoni [[https://www.reddit.com/r/emacs/comments/t3_ja97xs/comment/t1_g8pgyy1][\ud83d\udd17]] \n*Votes* 10\n\nSince I find myself pair programming quite a bit, I made a small helper:\n\n#+BEGIN_SRC elisp\n(defvar pair-programming--pair-programmer\n  nil\n  \"The current pair programmer as (name email)\")\n\n(defun enable-pair-programming-mode ()\n  \"Sets visuals for pair programming mode and prompt for your buddy.\"\n  (global-display-line-numbers-mode 1)\n  (let ((pair-programmer (git-commit-read-ident nil)))\n(setq pair-programming--pair-programmer pair-programmer)\n(message (concat \"Pair programming with \" (car pair-programmer)))))\n\n(defun disable-pair-programming-mode ()\n  \"Disable pair programming visuals and settings.\"\n  (setq pair-programming--pair-programmer nil)\n  (global-display-line-numbers-mode -1)\n  (message \"PP mode disabled\"))\n\n(define-minor-mode pair-programming-mode ()\n  \"Toggle Pair Programming Mode.\n\nThis prompts for a pair programmer from your current git commit history.\nWhen you commit with (ma)git, the pair programmer is inserted as a co-author.\nAdditionally, line number mode is enabled.\"\n  :global t\n  :lighter \" PP\"\n  (if pair-programming-mode\n  (enable-pair-programming-mode)\n(disable-pair-programming-mode)))\n\n(defun insert-pair-programmer-as-coauthor ()\n  \"Insert your pair programer into the current git commit.\"\n  (when (and pair-programming-mode git-commit-mode)\n(pcase pair-programming--pair-programmer\n  (~(,name ,email) (git-commit-insert-header \"Co-authed-by\" name email))\n  (_ (error \"No pair programmer found or wrong content\")))))\n\n(add-hook 'git-commit-setup-hook 'insert-pair-programmer-as-coauthor)\n#+END_SRC\n\nIt sets up a co-authored-by for git commits, and enables line numbers.",
        "created_datetime": "2020-10-13 17:46:16+00:00"
    },
    "t1_g8op875": {
        "author": "adt7799",
        "upvotes": 8,
        "body": "** u/adt7799 [[https://www.reddit.com/r/emacs/comments/t3_ja97xs/comment/t1_g8op875][\ud83d\udd17]] \n*Votes* 8\n\nI find this very useful.\n\nWhen I have multiple buffers opened and I switch from another program to emacs I always get confused about which buffer the cursor is in. So I created a mapping to\n\n~(global-set-key (kbd \"M-l\") 'beacon-blink)~",
        "created_datetime": "2020-10-13 13:20:14+00:00"
    },
    "t1_g7wd5gj": {
        "author": "Amonwilde",
        "upvotes": 10,
        "body": "** u/Amonwilde [[https://www.reddit.com/r/emacs/comments/t3_j61aoh/comment/t1_g7wd5gj][\ud83d\udd17]] \n*Votes* 10\n\nFor some this will be obvious, but I'm sure there will be at least one person who will find this useful. One of the most amazing features of Emacs to me is dabbrev-expand, by default bound to M-/. \n\n> Expand previous word \"dynamically\".\n\n> Expands to the most recent, preceding word for which this is a prefix.\nI> ifno suitable preceding word is found, words following point are\nconsidered.  If still no suitable word is found, then look in the\n> buffers accepted by the function pointed out by variable\n\nThis command is essentially omni-autocomplete. Chances are, the term you're trying to complete is in the buffer you're using or another buffer, and you can hit multiple times to cycle through different completions. I find the expander to be quicker and more deterministic than language autocomplete about 70% of the time. It's especially useful in writing, if you use Emacs for things other than programming, as you can complete proper names and specalized vocabulary quickly.",
        "created_datetime": "2020-10-06 15:44:04+00:00"
    },
    "t1_g69no38": {
        "author": "[deleted]",
        "upvotes": 9,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_ixjcau/comment/t1_g69no38][\ud83d\udd17]] \n*Votes* 9\n\norg-variable-pitch.el users might want to give [[https://github.com/casouri/valign][~valign~]] a look. It aligns your tables nicely, even with pictures (e.g. LaTeX previews) and links. The significance in context of OVP specifically is that you don't need to add ~org-link~ to ~org-variable-pitch-fixed-faces~ because valign-mode handles variable pitch links neatly in tables.\n\nIf you don't use OVP but use e.g. latex fragments in tables or just pictures, this one is still very helpful.\n\nKudos to the author, great little package.",
        "created_datetime": "2020-09-23 00:54:54+00:00"
    },
    "t1_g3zeprg": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_ikgfxd/comment/t1_g3zeprg][\ud83d\udd17]] \n*Votes* 10\n\n\\**Suggestion for moderators** - Consider putting a note in the weekly announcement for this thread that using 3 backquotes or tildes to make code blocks doesn't work for those of us using old reddit (so the code people post that way is almost unreadable) - and that indenting by 4 spaces is better for compatibility.\n(Am I the only one who still uses old reddit? :-)  )",
        "created_datetime": "2020-09-04 14:48:56+00:00"
    },
    "t1_g1zlh2t": {
        "author": "kastauyra",
        "upvotes": 11,
        "body": "** u/kastauyra [[https://www.reddit.com/r/emacs/comments/t3_ibwzcu/comment/t1_g1zlh2t][\ud83d\udd17]] \n*Votes* 11\n\n# 27.1 do GC if no frame has focus\n\nI am porting my [[https://github.com/laurynas-biveinis/dotfiles][config]] from 26.3 to 27.1, which had the tweak to do GC whenever a frame loses focus, originally from [[https://github.com/MatthewZMD/.emacs.d][MatthewZMD's config]] I think:\n#+BEGIN_SRC elispelisp\n(add-hook 'focus-out-hook #'garbage-collect)\n#+END_SRC\n27.1 NEWS say more generic (and more correct) ~after-focus-change-function~ should be used instead. Which pointed out that I do not want to GC on just any frame going out of focus, if another frame is being focused instead. It might be a better idea to GC if no frames at all are focused. Somewhat surprisingly I was not able to find any public dotfiles repo implementing this to copy paste from, so I tried to write my own:\n#+BEGIN_SRC elispelisp\n(defun dotfiles--gc-on-last-frame-out-of-focus ()\n  \"GC if all frames are inactive.\"\n  (if (seq-every-p #'null (mapcar #'frame-focus-state (frame-list)))\n  (garbage-collect)))\n\n(add-function :after after-focus-change-function\n          #'dotfiles--gc-on-last-frame-out-of-focus)\n#+END_SRC",
        "created_datetime": "2020-08-18 16:02:25+00:00"
    },
    "t1_fyrgnk7": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_hv3kzf/comment/t1_fyrgnk7][\ud83d\udd17]] \n*Votes* 8\n\n[deleted]",
        "created_datetime": "2020-07-21 14:17:12+00:00"
    },
    "t1_fy1rq34": {
        "author": "[deleted]",
        "upvotes": 15,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_hqxm5v/comment/t1_fy1rq34][\ud83d\udd17]] \n*Votes* 15\n\nMigrated to native compiled emacs branch this week. Some hiccups but everything seems to work out of box, including pdf-tools. Great performance improvement.",
        "created_datetime": "2020-07-14 17:15:07+00:00"
    },
    "t1_fy0xduj": {
        "author": "ji99",
        "upvotes": 8,
        "body": "** u/ji99 [[https://www.reddit.com/r/emacs/comments/t3_hqxm5v/comment/t1_fy0xduj][\ud83d\udd17]] \n*Votes* 8\n\nHippie-expand google search suggestions. Completely inspired from [[https://github.com/malloc47/shell-parse.el/blob/master/shell-parse.el][shell-parse.el]].\n\nI've added ~try-expand-google-completion~ to the bottom of my ~hippie-expand-try-functions-list~\n\n#+BEGIN_SRC elisp\n(defun google-suggest--request (query)\n  (with-current-buffer\n      (url-retrieve-synchronously\n       (format \"http://suggestqueries.google.com/complete/search?client=firefox&q=%s\" query) t t 1)\n    (goto-char (point-min))\n    (re-search-forward \"^$\")\n    (delete-region (point)(point-min))(buffer-string)))\n    \n(defun google-suggest--list (result)\n  (let* ((q (progn\n              (string-match \",\\\\[\\\\(.*?\\\\)\\\\]\" result)\n              (match-string 1 result)))\n         (r (replace-regexp-in-string \"\\\\\\\"\" \"\" q))\n         (l (split-string r \",\" t)))\n    (when (> (length (car (cdr l))) 0)\n      (remove\n       (car l)\n       (cdr l)))))\n    \n(defun try-expand-google-completion (old)\n  (unless old\n    (he-init-string (hippie-word-bg) (point))\n    (setq he-expand-list (sort\n                          (all-completions\n                           he-search-string\n                           (lambda (s y n) (google-suggest--list (google-suggest--request s))))\n                          'string-lessp)))\n  (if (null he-expand-list)\n      (progn\n        (when old (he-reset-string))\n        ())\n    (he-substitute-string (car he-expand-list) t)\n    (setq he-tried-table (cons (car he-expand-list) (cdr he-tried-table)))\n    (setq he-expand-list (cdr he-expand-list))\n    t))\n#+END_SRC",
        "created_datetime": "2020-07-14 12:08:32+00:00"
    },
    "t1_fwt1k27": {
        "author": "WorldsEndless",
        "upvotes": 8,
        "body": "** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_hij4ga/comment/t1_fwt1k27][\ud83d\udd17]] \n*Votes* 8\n\nRegisters: in Emacs from the beginning, so simple you forget how insanely useful they can be. I use them to save text, windows, and locations. https://orys.us/tv",
        "created_datetime": "2020-07-03 15:13:14+00:00"
    },
    "t1_fwi4ikt": {
        "author": "Rotatop",
        "upvotes": 9,
        "body": "** u/Rotatop [[https://www.reddit.com/r/emacs/comments/t3_hij4ga/comment/t1_fwi4ikt][\ud83d\udd17]] \n*Votes* 9\n\nI've made it !\n\nAfter 6 month of emacs, I m able to open a side buffer when I m on ivy without using C-c C-O or hydra or alt-enter but directly with shift + arrow (except for Up because I need to go on buffer)\n\n\n#+BEGIN_SRC elisp\n;; Auto create new window\n(setq windmove-create-window t)\n;; thanks to https://people.gnome.org/~federico/blog/bringing-my-emacs-from-the-past.html\n;; Let me switch windows with shift-arrows instead of \"C-x o\" all the time\n(windmove-default-keybindings)\n    \n;; Ugly hack :\n;; What I want is to Shift arrow, then it open the selection on a new splitted window (up left right, down)\n(defun tim/ivy-down-other ()\n  (interactive)\n  (ivy-exit-with-action #'tim/ivy-down-exit))\n    \n(defun tim/ivy-left-other ()\n  (interactive)\n  (ivy-exit-with-action #'tim/ivy-left-exit))\n    \n(defun tim/ivy-right-other ()\n  (interactive)\n  (ivy-exit-with-action #'tim/ivy-right-exit))\n    \n(defun tim/ivy-down-exit (ivy-body)\n  (split-window-below)\n  (other-window 1)\n  (tim/reuse-open-goto-line ivy-body))\n    \n(defun tim/ivy-left-exit (ivy-body)\n  (split-window-right)\n  (tim/reuse-open-goto-line ivy-body))\n    \n(defun tim/ivy-right-exit (ivy-body)\n  (split-window-right)\n  (other-window 1)\n  (tim/reuse-open-goto-line ivy-body))\n    \n    \n;; Thanks to\n;; https://github.com/abo-abo/swiper/blob/master/doc/ivy.org#actions and\n;; https://www.reddit.com/r/emacs/comments/efg362/ivy_open_selection_vertically_or_horizontally/\n(defun tim/reuse-open-goto-line (ivy-body)\n  (message \"reuse-open-goto-line ivy-body: %s\" ivy-body)\n  (let* ((tim/list (split-string ivy-body \":\"))\n         (file (car tim/list))\n         (tim/number (car (cdr tim/list))))\n    \n    (condition-case err\n        (counsel-projectile-find-file-action file)\n      (void-function ; <- that s the error handler name\n       (message \"open fail with projectile, try find-file. Error was: %s\" err)\n       (find-file file)))\n    ;; Thanks to https://stackoverflow.com/questions/3139970/open-a-file-at-line-with-filenameline-syntax\n    (when tim/number\n      ;; goto-line is for interactive use\n      (goto-char (point-min))\n      (forward-line (1- (string-to-number tim/number))))))\n  ;; (ivy-resume)) ; It s strange but ivy-resume here change the way that 'ENTER' or ivy-done works afterwards\n  ;; Try, as a workaround , in a timer ; no luck\n  ;; (run-with-timer 0.1 nil 'ivy-resume))\n    \n(use-package! ivy\n  :bind (:map ivy-minibuffer-map\n         (\"C-p\" . ivy-previous-history-element)\n         (\"<S-down>\" . tim/ivy-down-other)\n         ;; no up to avoid changing buffer problems\n         (\"<S-left>\" . tim/ivy-left-other)\n         (\"<S-right>\" . tim/ivy-right-other))\n\n#+END_SRC\n\nEmacs is good",
        "created_datetime": "2020-06-30 19:49:23+00:00"
    },
    "t1_fwbtnte": {
        "author": "mullikine",
        "upvotes": 13,
        "body": "** u/mullikine [[https://www.reddit.com/r/emacs/comments/t3_heaoiu/comment/t1_fwbtnte][\ud83d\udd17]] \n*Votes* 13\n\n## Use chrome DOM for eww\n\nBasically, a lot of websites these days generate the DOM using javascript. You can dump the DOM from chrome and inject it into eww just before it renders.\n\nIt's set to wait 3 seconds before dumping the DOM. This allows many pages to load.\n\nSince I'm using the ~unbuffer~ program, this requires ~expect~ to be installed on your system. It creates a tty so that chrome doesn't crash when run in this way.\n\n~dump-dom~ shell script\n\n#+BEGIN_SRC elisp\n#!/bin/bash\n    \nurl=\"$1\"\ntest -n \"$url\" || exit 1\n    \n0</dev/tty unbuffer bash -c \"chrome --headless --disable-gpu --virtual-time-budget=3000 --dump-dom \\\"$url\\\" 2>/dev/null\"\n\n#+END_SRC\nMake these modifications to ~eww-display-html~.\n\n~eww-display-html~\n\n#+BEGIN_SRC elisp\n(defun eww-display-html (charset url &optional document point buffer encode)\n  (unless (fboundp 'libxml-parse-html-region)\n    (error \"This function requires Emacs to be compiled with libxml2\"))\n  (unless (buffer-live-p buffer)\n    (error \"Buffer %s doesn't exist\" buffer))\n  ;; There should be a better way to abort loading images\n  ;; asynchronously.\n  (setq url-queue nil)\n  ;; If document exists then the html is already parsed into a DOM\n  (let* ((html (shell-command-to-string (concat \"dom-dump \" (shell-quote-argument url))))\n         (document\n          (or nil ;; document\n              (list\n               'base (list (cons 'href url))\n               (progn\n                 (setq encode (or encode charset 'utf-8))\n                 (condition-case nil\n                     (decode-coding-region (point) (point-max) encode)\n                   (coding-system-error nil))\n                 (save-excursion\n                   ;; Remove CRLF before parsing.\n                   (while (re-search-forward \"\\r$\" nil t)\n                     (replace-match \"\" t t)))\n                 (save-mark-and-excursion\n                   ;; Delete from here to the end. Replace with the new html\n                   (kill-region (point) (point-max))\n                   (insert (encode-coding-string html 'utf-8)))\n                 (libxml-parse-html-region (point) (point-max))))))\n         (source (and (null document)\n                      (buffer-substring (point) (point-max)))))\n    (with-current-buffer buffer\n      (setq bidi-paragraph-direction nil)\n      (plist-put eww-data :source html)\n      (plist-put eww-data :dom document)\n      (let ((inhibit-read-only t)\n            (inhibit-modification-hooks t)\n            (shr-target-id (url-target (url-generic-parse-url url)))\n            (shr-external-rendering-functions\n             (append\n              shr-external-rendering-functions\n              '((title . eww-tag-title)\n                (form . eww-tag-form)\n                (input . eww-tag-input)\n                (button . eww-form-submit)\n                (textarea . eww-tag-textarea)\n                (select . eww-tag-select)\n                (link . eww-tag-link)\n                (meta . eww-tag-meta)\n                (a . eww-tag-a)))))\n        (erase-buffer)\n        (shr-insert-document document)\n        (cond\n         (point\n          (goto-char point))\n         (shr-target-id\n          (goto-char (point-min))\n          (let ((point (next-single-property-change\n                        (point-min) 'shr-target-id)))\n            (when point\n              (goto-char point))))\n         (t\n          (goto-char (point-min))\n          ;; Don't leave point inside forms, because the normal eww\n          ;; commands aren't available there.\n          (while (and (not (eobp))\n                      (get-text-property (point) 'eww-form))\n            (forward-line 1)))))\n      (eww-size-text-inputs))))\n\n#+END_SRC\nDemonstration:\nhttps://asciinema.org/a/UAAVfp5O8SofJZvKBusTOP8QQ",
        "created_datetime": "2020-06-29 03:23:11+00:00"
    },
    "t1_fvrw4cu": {
        "author": "aartist111",
        "upvotes": 8,
        "body": "** u/aartist111 [[https://www.reddit.com/r/emacs/comments/t3_heaoiu/comment/t1_fvrw4cu][\ud83d\udd17]] \n*Votes* 8\n\nFound / c for M-x ibuffer.  It filters buffers by content.\nIt looks like  'grep -c' .   Very helpful to locate a file quickly for which you remember any word from content\nUntil now I had only used filters for filenames or modes only. .",
        "created_datetime": "2020-06-23 20:27:39+00:00"
    },
    "t1_fvrlu40": {
        "author": "sauntcartas",
        "upvotes": 11,
        "body": "** u/sauntcartas [[https://www.reddit.com/r/emacs/comments/t3_heaoiu/comment/t1_fvrlu40][\ud83d\udd17]] \n*Votes* 11\n\nI've been using ~M-|~ (~shell-command-on-region~) frequently for years, and I only just stumbled on the fact that the region need not be active to use it.  If it isn't, the command operates on the text from point to the end of the buffer.  That's very reasonable and in line with various other commands, but the documentation doesn't mention it and so I never thought to try it.\n\nThat saves me a call to ~C-x h~ (~mark-whole-buffer~) whenever I want to process the entire buffer, which is most of the time.  Also, it's a minor distraction for the entire buffer to be highlighted when I'm composing my shell command, so it's nice to avoid that.\n\nEdited to add:  Sorry folks, this doesn't work like I thought it did.  See the coments below for details.",
        "created_datetime": "2020-06-23 19:04:23+00:00"
    },
    "t1_fvqvedf": {
        "author": "jimm",
        "upvotes": 11,
        "body": "** u/jimm [[https://www.reddit.com/r/emacs/comments/t3_heaoiu/comment/t1_fvqvedf][\ud83d\udd17]] \n*Votes* 11\n\nI can't say how often I use ~dabbrev-expand~ (~M-/~) to complete words. Saves me a ton of time.",
        "created_datetime": "2020-06-23 15:27:34+00:00"
    },
    "t1_fvqq7ck": {
        "author": "[deleted]",
        "upvotes": 10,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_heaoiu/comment/t1_fvqq7ck][\ud83d\udd17]] \n*Votes* 10\n\nUndo-tree and kill-ring are two of the best features in Emacs / packages. Change your life today.",
        "created_datetime": "2020-06-23 14:39:46+00:00"
    },
    "t1_fuzucay": {
        "author": "rhmatthijs",
        "upvotes": 9,
        "body": "** u/rhmatthijs [[https://www.reddit.com/r/emacs/comments/t3_h9zoy9/comment/t1_fuzucay][\ud83d\udd17]] \n*Votes* 9\n\nOn a Mac: make Emacs detect if you have light or dark mode enabled system wide.\n\nIf you have two themes, a light one and a dark one, and you want the dark theme by default unless you have light mode enabled, add this to your init.el:\n\n#+BEGIN_SRC elisp\n;; If we're on a Mac and the file \"~/bin/get_dark.osascript\" exists\n;; and it outputs \"false\", activate light mode. Otherwise activate\n;; dark mode.\n(cond ((and (file-exists-p \"~/bin/get_dark.osascript\")\n            (string> (shell-command-to-string \"command -v osascript\") \"\")\n            (equal \"false\\n\"\n                   (shell-command-to-string \"osascript ~/bin/get_dark.osascript\")))\n       (mcj/theme-set-light))\n      (t (mcj/theme-set-dark)))\n\n#+END_SRC\n(mcj/theme-set-light and mcj/theme-set-light are functions that enable the light and the dark theme, respectively).\n\n~/bin/get_dark.osascript contains the following:\n\n#+BEGIN_SRC elisp\ntell application \"System Events\"\n\ttell appearance preferences\n\t\tget dark mode\n\tend tell\nend tell\n#+END_SRC",
        "created_datetime": "2020-06-16 10:24:57+00:00"
    },
    "t1_ftgqnbp": {
        "author": "rhmatthijs",
        "upvotes": 12,
        "body": "** u/rhmatthijs [[https://www.reddit.com/r/emacs/comments/t3_gzivu3/comment/t1_ftgqnbp][\ud83d\udd17]] \n*Votes* 12\n\nWorking in education, I often find myself having to assign students into groups. This week I made a function in ELisp that helps me do this. Select a region in a buffer that contains a list of students (presumably), call this function, say how many students should be in each group and the function then randomly assigns groups.\n\n#+BEGIN_SRC elisp\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                 ;;\n;; Shuffling things.                                    ;;\n;;                                                                 ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    \n(defun mcj/shuffle (input)\n  \" Shuffle a list in place. For some reason does not exist in\nEmacs by default. Uses Fisher-Yates shuffle.\n\"\n  (let ((swap (lambda (list-to-swap i1 i2)\n                (let ((tmp (elt list-to-swap i1)))\n                  (setf (elt list-to-swap i1) (elt list-to-swap i2))\n                  (setf (elt list-to-swap i2) tmp)))))\n    (dotimes (i (length input) input)\n      (funcall swap input i (random (+ i 1))))))\n\n    \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                 ;;\n;; Pairing off things (students, say).        ;;\n;;                                                                 ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    \n(defun mcj/pair-off (input num)\n  \"Return the elements of input paired off into pairs of length\n   num\"\n  (cond ((< (length input) (* num 2)) (list input))\n        (t\n         (cons (butlast input (- (length input)num)) (mcj/pair-off (nthcdr num input) num)))))\n    \n    \n    \n(defun mcj/pair-off-region (num)\n  \" Pair off lines in a region\"\n  (interactive (list\n                (read-number \"Members per pair (num):\" 2)))\n  (let ((newcontents\n         (mapconcat (lambda (item-pair)\n                      (mapconcat (lambda (item) item) item-pair \" + \"))\n                    (mcj/pair-off\n                     (mcj/shuffle\n                      (split-string\n                       (buffer-substring-no-properties (mark) (point)) \"[\\n]\" t ))\n                      num)\n                    \"\\n\")))\n    (delete-region (mark) (point))\n    (insert newcontents)))\n#+END_SRC",
        "created_datetime": "2020-06-09 12:01:34+00:00"
    },
    "t1_fruqs1k": {
        "author": "_hmenke",
        "upvotes": 13,
        "body": "** u/_hmenke [[https://www.reddit.com/r/emacs/comments/t3_gqsz8u/comment/t1_fruqs1k][\ud83d\udd17]] \n*Votes* 13\n\nAny **BibTeX** users here?\n\n- Tired of journals forcing you to download a file to get the BibTeX record of an article?\n- Tired of their usually broken formatting?\n- The journal doesn't offer BibTeX download in the first place? (Looking at you Nature)\n\nDid you know that doi.org has query interface that gives you the BibTeX record when you call it with the article DOI?  Of course you can access this via Emacs:\n\n#+BEGIN_SRC elisp\n(require 'url)\n(defun user/url-bibtex-from-doi (doi)\n  (interactive \"sDOI: \")\n  (let* ((url (concat \"https://doi.org/\" doi))\n         (url-mime-accept-string \"application/x-bibtex\"))\n    (insert\n     (with-current-buffer (url-retrieve-synchronously url)\n       (let* ((start url-http-end-of-headers)\n              (end (point-max))\n              (all (buffer-string))\n              (body (buffer-substring start end)))\n         (replace-regexp-in-string \"^\\t\" \"  \" (url-unhex-string body)))))))\n\n#+END_SRC\nJust paste the DOI of the article at the prompt and the BibTeX record will be inserted at point.\n\nHere is how I bind it in ~bibtex-mode~ (plus my other bindings for good measure)\n    \n#+BEGIN_SRC elisp\n;; bibtex\n(use-package bibtex\n  :bind (:map bibtex-mode-map\n              (\"C-c d\" . user/url-bibtex-from-doi)\n              (\"C-c v\" . bibtex-validate)\n              (\"C-c s\" . bibtex-sort-buffer)\n              ([down-mouse-3] . imenu))\n  :config\n  (setq\n   bibtex-maintain-sorted-entries t))\n#+END_SRC",
        "created_datetime": "2020-05-26 09:54:47+00:00"
    },
    "t1_fr4gdm6": {
        "author": "hairlesscaveman",
        "upvotes": 8,
        "body": "** u/hairlesscaveman [[https://www.reddit.com/r/emacs/comments/t3_gmkg4g/comment/t1_fr4gdm6][\ud83d\udd17]] \n*Votes* 8\n\nI follow the format of ~{ticketnumber}-{short-description}~ when creating branches using Magit, but when typing the descriptive name for the branch I often type ~SPC~ between words instead of dash due to muscle memory when writing sentences. This causes a warning to be shown, because \"Whitespace isn't allowed here\", and breaks \"flow\" for me.\n\nThe advice below quiets this warning, and inserts a dash whenever space is pressed.\n\n#+BEGIN_SRC elisp\n(advice-add 'magit-whitespace-disallowed :around (lambda (orig-fun &rest args) (interactive) (insert \"-\")))\n#+END_SRC",
        "created_datetime": "2020-05-19 12:23:01+00:00"
    },
    "t1_fqg7qys": {
        "author": "hale314",
        "upvotes": 12,
        "body": "** u/hale314 [[https://www.reddit.com/r/emacs/comments/t3_gi70ye/comment/t1_fqg7qys][\ud83d\udd17]] \n*Votes* 12\n\nI tend to have a lot of function that is defined solely to be added to a hook. Turns out I can customize ~defun-declarations-alist~ to define a new ~hook~ property in the ~declare~ form. Now I can specify the hook that the function is intended for right inside the function definition.\n\n#+BEGIN_SRC elisp\n;; Need to be done during compilation as well if your functions are getting compiled\n(eval-and-compile\n  (setf (alist-get 'hook defun-declarations-alist)\n        (list (lambda (fun _args hook &optional depth)\n                ~(add-hook ',hook #',fun ,@(when depth (list depth)))))))\n    \n(defun ask-about-scratch-buffer ()\n  \"Confirm that user want to discard the content of the scratch buffer.\"\n  (declare (hook kill-emacs-query-functions))\n  (let ((scratch (get-buffer \"*scratch*\")))\n    (or (zerop (buffer-size scratch))\n        (progn (pop-to-buffer scratch)\n               (y-or-n-p \"Scratch buffer is not empty, discard?\")))))\n;; no longer needed\n;; (add-hook 'kill-emacs-query-functions #'ask-about-scratch-buffer)\n#+END_SRC",
        "created_datetime": "2020-05-13 04:16:27+00:00"
    },
    "t1_fqfc1wi": {
        "author": "karthink",
        "upvotes": 8,
        "body": "** u/karthink [[https://www.reddit.com/r/emacs/comments/t3_gi70ye/comment/t1_fqfc1wi][\ud83d\udd17]] \n*Votes* 8\n\nAucTex users: You're missing out if you don't use [[https://github.com/cdominik/cdlatex][CDLatex]]. It's primarily a fast input tool for LaTeX, sort of like snippet templates. The difference between setting up Yasnippet templates for LaTeX and CDLatex is that CDLaTeX's TAB key to jump past stuff is _always available_, not just during snippet entry. It's difficult to explain, so here are some demos:\n\n1. [[https://gfycat.com/heavenlynegligiblehoiho][Fast input with cdlatex and preview.el]]\n2. [[https://gfycat.com/safeidolizedlangur][Fast input with keys displayed]]\n\nI wrote a longer post explaining [[https://www.reddit.com/r/emacs/comments/g8ecpj/advice_for_auclatex_what_keybinds_do_you_find/foo64ge/][how I set up AucTex]] recently.\n\nCDLaTeX was written by Carsten Dominik, the author of Org-mode and reftex. Thus Org ships with an ~org-cdlatex~ minor-mode that makes these features available in org-mode.",
        "created_datetime": "2020-05-12 23:24:05+00:00"
    },
    "t1_fqdnyhk": {
        "author": "celeritasCelery",
        "upvotes": 13,
        "body": "** u/celeritasCelery [[https://www.reddit.com/r/emacs/comments/t3_gi70ye/comment/t1_fqdnyhk][\ud83d\udd17]] \n*Votes* 13\n\nShells in emacs like ~shell-mode~ and ~eshell~ can write multi line input using ~comint-accumulate~. Normally bound to ~C-c SPC~.",
        "created_datetime": "2020-05-12 15:24:34+00:00"
    },
    "t1_fqczes1": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_gi70ye/comment/t1_fqczes1][\ud83d\udd17]] \n*Votes* 8\n\n[[https://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs-v2-Large.png][A beginers guide to emacs 24 or later by sasha chua]]  this helped me tremendously to get started with emacs.",
        "created_datetime": "2020-05-12 10:03:56+00:00"
    },
    "t1_fqcycvb": {
        "author": "ji99",
        "upvotes": 8,
        "body": "** u/ji99 [[https://www.reddit.com/r/emacs/comments/t3_gi70ye/comment/t1_fqcycvb][\ud83d\udd17]] \n*Votes* 8\n\nA rudimentary interface for the fabulous [[http://links.twibright.com/user_en.html][Links web browser]]:\n\n#+BEGIN_SRC elisp\n(defun links-browser (&optional link new-window)\n  (interactive)\n  (unless link\n    (setq link (read-from-minibuffer \"url: \")))\n  (make-process\n   :name \"links-browser\"\n   :connection-type 'pipe\n   :command (list \"links\" \"-g\" link)))\n    \n(defun links-search (&optional query)\n  (interactive)\n  (unless query\n    (setq query (read-from-minibuffer \"search query: \")))\n  (pcase query\n    ((pred (string-match \"\\\\~d .*\"))\n     (links-search--launch \"dict\" (substring query 2 nil)))\n    ((pred (string-match \"\\\\~b .*\"))\n     (links-search--launch \"book\" (substring query 2 nil)))\n    ((pred (string-match \"\\\\~w .*\"))\n     (links-search--launch \"wiki\" (substring query 2 nil)))\n    ((pred (string-match \"\\\\~m .*\"))\n     (links-search--launch \"imdb\" (substring query 2 nil)))\n    ((pred (string-match \"\\\\~y .*\"))\n     (links-search--launch \"yout\" (substring query 2 nil)))\n    ((pred (string-match \"\\\\~t .*\"))\n     (links-search--launch \"thes\" (substring query 2 nil)))\n    ((pred (string-match \"\\\\~s .*\"))\n     (links-search--launch \"syno\" (substring query 2 nil)))\n    (_ (links-search--launch \"seax\" query))))\n    \n(defun links-search--launch (engine query)\n    (pcase engine\n      (\"dict\" (links-browser (format \"https://en.wiktionary.org/wiki/Special:Search?search=%s\" query)))\n      (\"wiki\" (links-browser (format \"https://en.wikipedia.org/w/index.php?title=Special:Search&search=%s&go=Go\" query)))\n      (\"imdb\" (links-browser (format \"https://www.imdb.com/find?s=all&q=%s\" query)))\n      (\"yout\" (links-browser (format \"https://www.youtube.com/results?search_query=%s\" query)))\n      (\"book\" (links-browser (format \"http://gen.lib.rus.ec/search.php?req=%s&res=100&sort=id&sortmode=DESC\" query)))\n      (\"thes\" (links-browser (format \"https://www.powerthesaurus.org/%s\" query)))\n      (\"syno\" (links-browser (format \"https://duckduckgo.com/lite/?q=%s site:macmillandictionary.com\" query)))\n      (\"seax\" (links-browser (format \"https://search.snopyta.org/?q=%s\" query)))))\n#+END_SRC",
        "created_datetime": "2020-05-12 09:46:21+00:00"
    },
    "t1_fq9186h": {
        "author": "b3n",
        "upvotes": 10,
        "body": "\\** u/b3n [[https://www.reddit.com/r/emacs/comments/t3_gdtqov/comment/t1_fq9186h][\ud83d\udd17]] \n\\*Votes* 10\n\nIf you want to switch between two themes, depending on time of day (e.g. a light and dark theme), it's as simple as this:\n\n#+BEGIN_SRC elisp\n;; Light\n(load-theme 'modus-operandi t t)\n(run-at-time \"05:00\" (* 60 60 24) (lambda () (enable-theme 'modus-operandi))))\n\n;; Dark\n(load-theme 'modus-vivendi t t)\n(run-at-time \"21:00\" (* 60 60 24) (lambda () (enable-theme 'modus-vivendi))))\n\n#+END_SRC\nThis selects the correct theme when starting Emacs and automatically switch when the times come.",
        "created_datetime": "2020-05-11 08:26:23+00:00"
    },
    "t1_kriu3ye": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_1aw6xkc/comment/t1_kriu3ye][\ud83d\udd17]] \n*Votes* 8\n\nTwo tricks that helped me make my workflow a lot better:\n\n1. ~(setq process-adaptive-read-buffering nil)~ makes [[https://codeberg.org/akib/emacs-eat][EAT]] a lot quicker!\n2. ~(setq eglot-events-buffer-size 0)~, ~(fset #'jsonrpc--log-event #'ignore)~ and [[https://github.com/jdtsmith/eglot-booster][eglot-booster]] makes eglot A LOT quicker!",
        "created_datetime": "2024-02-21 22:50:25+00:00"
    },
    "t1_kob6a5m": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_1afd05g/comment/t1_kob6a5m][\ud83d\udd17]] \n*Votes* 8\n\nOne thing I found cool is that you can actually use modifiers like **Super and Hyper in terminal Emacs**. It even works over SSH. No changes needed to ~init.el~.\n\nThe trick is that Emacs has built-in keybindings like ~C-x @ s~ that simulates a super modifier and ~C-x @ h~ that simulates a hyper modifier. So if you press e.g. ~C-x @ s a~, then Emacs will interpret that as super+a.\n\nTerminals like e.g. Kitty lets you bind super+a to do whatever you want, so you can simply map it to send the key sequences that Emacs expects. Just add this to e.g. ~kitty.conf~:\n\n#+BEGIN_SRC elisp\nmap super+a send_key ctrl+x @ s a\nmap super+b send_key ctrl+x @ s b\n...\n#+END_SRC\nAnd voila, super works fine in ~emacs -nw~! Kitty translates ~s-a~ into normal terminal-supported control keybindings ~C-x @ s a~, which Emacs then translates back into ~s-a~.",
        "created_datetime": "2024-01-31 17:46:51+00:00"
    },
    "t1_k2f683f": {
        "author": "hunajakettu",
        "upvotes": 8,
        "body": "** u/hunajakettu [[https://www.reddit.com/r/emacs/comments/t3_16tes2a/comment/t1_k2f683f][\ud83d\udd17]] \n*Votes* 8\n\nIt is the only thing that keeps me sane in a Windows shop.",
        "created_datetime": "2023-09-27 12:21:05+00:00"
    },
    "t1_jli02ld": {
        "author": "habamax",
        "upvotes": 8,
        "body": "** u/habamax [[https://www.reddit.com/r/emacs/comments/t3_13qfepf/comment/t1_jli02ld][\ud83d\udd17]] \n*Votes* 8\n\nI often do simple manuals with a lot of screenshots, now in ~org~.\n\nSo I came up with the ~org/insert-screenshot~ command that works in windows and linux (wayland with ~wl-paste~ available):\n\n#+BEGIN_SRC elisp\n(defun org/insert-screenshot ()\n  (interactive)\n  (let* ((img-dir (concat \"img-\"\n                          (file-name-sans-extension (buffer-name))))\n         (img-name (concat (file-name-sans-extension (buffer-name))\n                           \"-\" (format-time-string \"%Y%m%d-%H%M%S\") \".png\"))\n         (filename (concat img-dir \"/\" img-name)))\n    (make-directory img-dir :parents)\n    ;; Windows -- use powershell, other(implicit linux) -- use wl-paste\n    (shell-command\n     (if (eq system-type 'windows-nt)\n         (concat\n          \"powershell -command \\\"Add-Type -AssemblyName System.Windows.Forms;\"\n          \"if ($([System.Windows.Forms.Clipboard]::ContainsImage()))\"\n          \"{$image = [System.Windows.Forms.Clipboard]::GetImage();\"\n          \"[System.Drawing.Bitmap]$image.Save('\"\n          filename\n          \"',[System.Drawing.Imaging.ImageFormat]::Png);}\\\"\")\n       (concat \"wl-paste > \" filename)))\n    (insert (concat \"[[file:\" filename \"]]\"))))\n    \n#+END_SRC\nSo the flow is:\n\n1. make a screenshot using OS\n2. goto org document (~doc1.org~ for example)\n3. ~M-x org/insert-screenshot RET~\n4. image file is saved under ~./img-doc1/doc1-20230525-100621.png~\n5. link is inserted into org document",
        "created_datetime": "2023-05-25 00:09:10+00:00"
    },
    "t1_jhtis87": {
        "author": "swhalemwo",
        "upvotes": 8,
        "body": "** u/swhalemwo [[https://www.reddit.com/r/emacs/comments/t3_12zaqju/comment/t1_jhtis87][\ud83d\udd17]] \n*Votes* 8\n\nrecently started writing a report with a lot of numbers, many of which will change in later versions. I wanted to save myself the work of updating them all by hand, so I learned that I can [[https://emacs.stackexchange.com/questions/14647/use-code-variable-in-org-mode-continuous-text][generate org macros from my ~R~ script]], [[https://notes.alexkehayias.com/emacs-inline-macro-in-the-buffer/][display their values rather than the macro text]], and pass ~org-macro-templates~ to ~consult--read~ to select and insert them with a few keystrokes. took me a couple of hours but hopefully will save them later on!",
        "created_datetime": "2023-04-26 18:49:00+00:00"
    },
    "t1_jhwipv8": {
        "author": "sebasTEEan",
        "upvotes": 8,
        "body": "** u/sebasTEEan [[https://www.reddit.com/r/emacs/comments/t3_12zaqju/comment/t1_jhwipv8][\ud83d\udd17]] \n*Votes* 8\n\nIn a presentation this morning, I wanted to show a file, but it contained sensitive information: IP addresses and passwords. The following code hides this secret in a buffer:\n\n#+BEGIN_SRC elisp\n(defun sm/hide-ip-addresses ()\n  \"Hide IP addresses in the buffer.\"\n  (interactive)\n  (let ((ipv4-regex \"\\\\b\\\\(?:[0-9]\\\\{1,3\\\\}\\\\.\\\\)\\\\{3\\\\}[0-9]\\\\{1,3\\\\}\\\\b\")\n\t(ipv6-regex \"\\\\b\\\\(?:[0-9a-f]\\\\{1,4\\\\}:\\\\)\\\\{7\\\\}[0-9a-f]\\\\{1,4\\\\}\\\\b\\\\|\\\\b\\\\(?:[0-9a-f]\\\\{1,4\\\\}:\\\\)\\\\{1,6\\\\}\\\\(:[0-9a-f]\\\\{1,4\\\\}\\\\)\\\\{1,6\\\\}\\\\b\"))\n(save-excursion\n  (goto-char (point-min))\n  (while (re-search-forward ipv4-regex nil t)\n\t(let ((overlay (make-overlay (match-beginning 0) (match-end 0))))\n\t  (overlay-put overlay 'hidden-text t)\n\t  (overlay-put overlay 'display \"***.***.***.***\"))))\n(save-excursion\n  (goto-char (point-min))\n  (while (re-search-forward ipv6-regex nil t)\n\t(let ((overlay (make-overlay (match-beginning 0) (match-end 0))))\n\t  (overlay-put overlay 'hidden-text t)\n\t  (overlay-put overlay 'display \"****:****:****::****\"))))))\n\n(defun sm/hide-passwords ()\n  \"Hide passwords in buffer.\"\n  (interactive)\n  (let ((pwd-regex \".*passwor[dt]*:\\\\(.*\\\\)\"))\n(save-excursion\n  (goto-char (point-min))\n  (while (re-search-forward pwd-regex nil t)\n\t(let ((overlay (make-overlay (match-beginning 1) (match-end 1))))\n\t  (overlay-put overlay 'hidden-text t)\n\t  (overlay-put overlay 'display \"******\"))))))\n\n(defun sm/hide-secrets ()\n  \"Hide IP addresses and passwords in the buffer.\"\n  (interactive)\n  (sm/hide-ip-addresses)\n  (sm/hide-passwords))\n\n(defun sm/remove-overlays ()\n  \"Remove all overlays with the ~hidden-text' property in the buffer.\"\n  (interactive)\n  (dolist (overlay (overlays-in (point-min) (point-max)))\n(when (overlay-get overlay 'hidden-text)\n  (delete-overlay overlay))))\n#+END_SRC",
        "created_datetime": "2023-04-27 10:38:02+00:00"
    },
    "t1_j9pr766": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_112t0uo/comment/t1_j9pr766][\ud83d\udd17]] \n*Votes* 8\n\n[deleted]",
        "created_datetime": "2023-02-23 18:23:17+00:00"
    },
    "t1_ixpdxvf": {
        "author": "konrad1977",
        "upvotes": 8,
        "body": "** u/konrad1977 [[https://www.reddit.com/r/emacs/comments/t3_z2jgt5/comment/t1_ixpdxvf][\ud83d\udd17]] \n*Votes* 8\n\nI found this one-liner yesterday, added it it to the ~:config~ section of **Evil**.\n\n  ~(define-key evil-visual-state-map (kbd \"u\") 'undo)~  \nNow I can undo in selected region. Like magic.",
        "created_datetime": "2022-11-25 06:30:47+00:00"
    },
    "t1_imjs86m": {
        "author": "slinchisl",
        "upvotes": 8,
        "body": "\\** u/slinchisl [[https://www.reddit.com/r/emacs/comments/t3_x27yc9/comment/t1_imjs86m][\ud83d\udd17]] \n\\*Votes* 8\n\nI don't think this is worth it as a top-level post, since it's more geared towards XMonad users who also happen to use Emacs, but at least a few folks here might appreciate how easy it is to [[https://tony-zorman.com/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html][rapidly capture ideas]] by using XMonad's org-mode integration!",
        "created_datetime": "2022-08-31 18:42:31+00:00"
    },
    "t1_iku77h0": {
        "author": "attento_redaz",
        "upvotes": 9,
        "body": "\\** u/attento_redaz [[https://www.reddit.com/r/emacs/comments/t3_wqjare/comment/t1_iku77h0][\ud83d\udd17]] \n\\*Votes* 9\n\nUsing [[https://github.com/mpedramfar/zotra][zotra]], [[https://github.com/emacs-citar/citar][citar]] and some parts of the Org-cite ecosystem I hacked together a highly experimental but pretty comfortable environment for working with \"org-biblatex bibliographies\" which are basically like [[http://gewhere.github.io/org-bibtex][org-bibtex]] but with biblatex entries represented as headings with suitable properties instead of bibtex. I have a function which retrieves a biblatex entry corresponding to an url using zotra and adds a corresponding Org heading with the biblatex fields as properties, and the entry becomes available in Citar as soon as I save the document. Citing these entries then works anywhere, even in the same document with a suitable ~#+bibliography: my-org-biblatex-file.org~ declaration. Exporting the citations also works with the CSL exporter, no conversion is necessary to a proper biblatex bibliography file (but can be easily done if one needs biblatex-based export). Since the bibliography is an Org document, tagging, agenda commands, column view etc. can all be used with the bibliography entries.  In a way it's frightening how much can be achieved building on already existing stuff and with a few lines of Emacs Lisp.",
        "created_datetime": "2022-08-18 20:55:50+00:00"
    },
    "t1_h8rdjx9": {
        "author": "poinkalum",
        "upvotes": 8,
        "body": "\\** u/poinkalum [[https://www.reddit.com/r/emacs/comments/t3_p28rl5/comment/t1_h8rdjx9][\ud83d\udd17]] \n\\*Votes* 8\n\nIf you follow master, you can use the very useful command ~execute-extended-command-for-buffer~ by using ~M-X~ (with a capital \"X\"), that implements the behaviour described in [[https://lars.ingebrigtsen.no/2021/02/16/command-discovery-in-emacs/][this blog post by Lars]]. It will only show commands that are relevant to the current major mode.",
        "created_datetime": "2021-08-13 09:03:49+00:00"
    },
    "t1_h85cv7f": {
        "author": "b3n",
        "upvotes": 9,
        "body": "** u/b3n [[https://www.reddit.com/r/emacs/comments/t3_oxo1xh/comment/t1_h85cv7f][\ud83d\udd17]] \n*Votes* 9\n\nLittle quality of life improvement if you work with multiple eshell buffers:\n\n#+BEGIN_SRC elisp\n(defun eshell-buffer-name ()\n  (rename-buffer (concat \"*eshell*<\" (eshell/pwd) \">\") t))\n    \n(add-hook 'eshell-directory-change-hook #'eshell-buffer-name)\n(add-hook 'eshell-prompt-load-hook #'eshell-buffer-name)\n#+END_SRC",
        "created_datetime": "2021-08-08 09:06:02+00:00"
    },
    "t1_gudoljm": {
        "author": "[deleted]",
        "upvotes": 9,
        "body": "\\** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_mpwapo/comment/t1_gudoljm][\ud83d\udd17]] \n\\*Votes* 9\n\n\\**Create Rectangular Selection with Meta+Click+Drag**\n\nBy default, when you click and drag with the Meta key Emacs creates what it calls a \"secondary selection\" which is super interesting and useful, but not what this tip is about. In most editors (on the Mac anyway) option+click+drag is used to create a rectangular selection. Emacs, of course, supports this, you just need to remap it.\n\n#+BEGIN_SRC elisp\n(global-set-key [M-down-mouse-1] #'mouse-drag-region-rectangle)\n(global-set-key [M-drag-mouse-1] #'ignore)\n(global-set-key [M-mouse-1]      #'mouse-set-point)\n\n#+END_SRC\nYou can also create a rectangular selection with the command ~rectangle-mark-mode~.\n\nDon't forget to bind ~replace-rectangle~ to something convenient for super easy editing.",
        "created_datetime": "2021-04-13 16:24:03+00:00"
    },
    "t1_ggoehoo": {
        "author": "zackallison",
        "upvotes": 9,
        "body": "** u/zackallison [[https://www.reddit.com/r/emacs/comments/t3_ki09cm/comment/t1_ggoehoo][\ud83d\udd17]] \n*Votes* 9\n\nI posted this in the emacsclient thread, but I think it deserves to live here as well:\n\n\nThe emacsclient / server system is great.  If you have it listening on tcp and port forward that when connecting to remote machine it adds another level of power.\n\nI use [[https://github.com/akermu/emacs-libvterm][emacs-vterm]] for a terminal inside emacs, so I've got a lot of commands remapped.  Like ~man~ runs ~emacsclient ... man ..~, which opens the man page in the \"other\" buffer, so it doesn't interrupt my flow.  I use \"scroll-other-window\" to navigate the man page while I still have my prompt. ~magit~, ~dired~, and others map to their ~emacsclient~ equivalents.\n\nI've written wrapper script for e/emacs client that I've come to call ~e~, because it saves keystrokes\n\n#### [[https://gitlab.com/zackallison/e-emacs/][The full repo is here e-emacs.sh]]\n\nIt does the standard things you would expect, starts emacs if it's not already started, open a file in a new buffer / window / terminal and optionally wait for you to finish or have the shell continue.\n\nThen I added some functions that I found useful, starting with piping results from a command into an emacs buffer, such as ~find . -name foo\\* | e~.  Naturally after that was piping from a buffer to a command: ~e [file] | rot13~ super secure encryption.  And of course piping into and out of a buffer works as well ~find . -name incriminating-evidence\\* | e | xargs rm~, so you can verify / tweak the results before passing them through.  Maybe you want to leave the evidence on Two Time Tommy.  Who knows.\n\nThe other nice feature is the ability to use templates.  For example to edit a HTTP request and then send it to a server you can do that: ~e -t header_template.txt | nc www.example.com 80~  The template file is copied to a temp file which is the one that is edited.\n\nOr the poor man's blog system: ~e -t header_template.html body_template.html footer.html > new_page.html~\n\nSee the repo for more examples and to download.  The notes of getting it working on remote machines aren't the cleanest.  If you have any suggestions or features that would make your life easier let me know; submit an issue or comment here.\n\n#### [[https://gitlab.com/zackallison/e-emacs/][The full repo is here e-emacs.sh]]\n\n~~I really should post this on one of the share your stuff posts.  But I get distracted.~~ There, I did it.\n\nIn case you can't tell I *really* like emacs and it's client server model.",
        "created_datetime": "2020-12-22 09:18:52+00:00"
    },
    "t1_ge8si78": {
        "author": "ji99",
        "upvotes": 8,
        "body": "** u/ji99 [[https://www.reddit.com/r/emacs/comments/t3_k4gv0x/comment/t1_ge8si78][\ud83d\udd17]] \n*Votes* 8\n\nHere's all I need for completions:\n\n#+BEGIN_SRC elisp\n(use-package icomplete\n  :bind\n  (:map icomplete-minibuffer-map\n        ([C-return] . exit-minibuffer)\n        ([return] . minibuffer-try-complete-and-exit))\n  :config\n  (defun minibuffer-try-complete-and-exit ()\n    (interactive)\n    (minibuffer-force-complete)\n    (setq-local deactivate-mark nil)\n    (throw 'exit nil))\n  :hook (after-init . icomplete-mode))\n    \n(use-package orderless\n  :ensure t\n  :custom\n  (completion-styles '(orderless))\n  (orderless-matching-styles 'orderless-literal))\n#+END_SRC",
        "created_datetime": "2020-12-01 09:06:40+00:00"
    },
    "t1_gaid3f4": {
        "author": "oantolin",
        "upvotes": 8,
        "body": "\\** u/oantolin [[https://www.reddit.com/r/emacs/comments/t3_jix6od/comment/t1_gaid3f4][\ud83d\udd17]] \n\\*Votes* 8\n\nI love using `dabbrev-expand` (bound by default to `M-/`) to complete text I know is in one of my buffers. It completes one word at a time, but if you want to keep pulling subsequent words from the location where a completion is found you can insert a space and run `dabbrev-expand` again, so `SPC M-/`.\n\nFor example if you have the text \"The quick brown fox jumps over the lazy dog\" in some buffer (and say no other \"qu\" appears anywhere in your buffers), then `qu M-/ SPC M-/ SPC M-/` will insert \"quick brown fox\".\n\nThis is already great, but I find the key sequence `SPC M-/` awkward to type so I wrote this little function which I bind to `M-'`:\n\n#+BEGIN_SRC elisp\n(defun dabbrev-next (arg)\n  \"Insert the next ARG words from where previous expansion was found.\"\n  (interactive \"p\")\n  (dotimes (_ arg)\n    (insert \" \")\n    (dabbrev-expand 1)))\n    \n#+END_SRC\nThen for \"quick grown fox\" I can go `qu M-/ M-' M-'` which feels much easier to type (on my keyboard `/` and `'` are very close to each other).\n\n(`M-'` is bound by default to `abbrev-prefix-mark` which I never use, so I didn't mind rebinding it.)",
        "created_datetime": "2020-10-29 17:19:45+00:00"
    },
    "t1_frynpvt": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_gqsz8u/comment/t1_frynpvt][\ud83d\udd17]] \n*Votes* 8\n\nMake a little mode called ~my-minor-mode~ and enable it globally. Use it's keymap for your keybindings, without the prefix.  Then assign that keymap to a prefix. This way, you can disable most of your keybindings easily when needed, you can easily switch your prefix key (e.g. go from ~C-c~ to ~H-x~ or ~<menu>~, etc.), have those keybindings available on multiple prefixes, and you can easily restore a default keybinding via ~(define-key my-minor-mode-map <key> nil)~.  Here is how I define a minor mode for myself:\n\n#+BEGIN_SRC elisp\n;;; The GK minor mode:\n    \n;; The GK minor mode is at the heart of this configuration.  Almost\n;; all keybindings, except unmapping some keys from the global map,\n;; and except bindings in specific modes, should be done with this\n;; minor modes keymap.  This minor mode is active everywhere, except\n;; the Minibuffer and the Fundamental mode buffers.\n    \n(defgroup GK nil\n  \"Group for my configuration.\"\n  :group 'emacs\n  :prefix \"gk-\")\n    \n(defvar gk-minor-mode-map\n  (make-sparse-keymap)\n  \"Where to put all my bindings.\")\n    \n(defvar gk-minor-mode-prefix-map\n  (make-sparse-keymap)\n  \"Prefix map for my bindings.\")\n    \n(fset 'gk-minor-mode-prefix-map gk-minor-mode-prefix-map)\n    \n(defvar gk-minor-mode-prefix \"\\C-c\"\n  \"Keymap prefix for ~gk-minor-mode'.\")\n    \n(define-minor-mode gk-minor-mode\n  \"Global minor mode for customisations.\n    \n\\\\{gk-minor-mode-map}\"\n  nil \"\" gk-minor-mode-map\n  (let ((map gk-minor-mode-map))\n    (define-key map gk-minor-mode-prefix #'gk-minor-mode-prefix-map)))\n    \n(define-globalized-minor-mode global-gk-minor-mode gk-minor-mode\n  gk-minor-mode)\n\n#+END_SRC\nThen just enable it somewhere. I like to use the following setup for enabling global modes at once:\n\n#+BEGIN_SRC elisp\n;;;; Global modes:\n    \n;; This module provides utilities for global modes, like turning them on\n;; and off collectively with a single command, registering and\n;; unregistering them, disabling default modes etc.\n    \n;; All the modes listed in =gk-global-modes= are toggled on with an\n;; =after-init-hook=, so modifications to this variable that happen up\n;; until the execution of the named hook will actually determine which\n;; modes are turned on.\n    \n;; =gk-disabled-modes= is a list of modes to disable.\n    \n;; Each of this lists contain symbols, actually =*-mode= functions.  The\n;; ones in the former will be called with =+1= as the argument, and ones\n;; in the latter with =-1=.\n    \n;; Do not use this as a hook, add to =after-init-hook= instead.\n    \n(defvar gk-global-modes nil \"List of global modes to be enabled.\")\n(defvar gk-disabled-modes nil \"List of disabled global modes.\")\n    \n(defvar gk-toggle-global-modes nil)\n(defun gk-toggle-global-modes ()\n  \"Enable or disable the modes listed in ~gk-global-modes' at once.\"\n  (interactive)\n  (setf gk-toggle-global-modes (not gk-toggle-global-modes))\n  (let (errors)\n    ;; Enable global modes\n    (dolist (mode gk-global-modes)\n      (condition-case e\n          (funcall mode (if gk-toggle-global-modes 1 -1))\n        (error (push ~(,mode ,e) errors))))\n    ;; Disable modes in gk-disabled-modes\n    (dolist (mode gk-disabled-modes)\n      (condition-case e\n          (funcall mode (if gk-toggle-global-modes -1 1))\n        (error (push ~(,mode ,e) errors))))\n    (when errors\n      (warn \"Following errors occurred when activating global modes:\\n%S\"\n            errors))))\n    \n(add-hook 'after-init-hook 'gk-toggle-global-modes)\n\n#+END_SRC\n~~That function needs some updating tho. But it works fine as a hook that sets up the global modes.~~ I put ~global-gk-minor-mode~ into ~gk-global-modes~ and it's enabled alongside some other ones.\n\nEdit: fix ~gk-toggle-global-modes~.",
        "created_datetime": "2020-05-27 10:16:07+00:00"
    },
    "t1_fr65b4d": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_gmkg4g/comment/t1_fr65b4d][\ud83d\udd17]] \n*Votes* 8\n\nTIL that I can disable ``company`` for some modes, I needed to do it because completion was really slow for the shell and eshell which have vanilla shell completion anyway. Thus \n\n#+BEGIN_SRC elisp\n(use-package company\n  :after ispell\n  :diminish\n  :config\n  .\n  .\n  .\n  (setq company-global-modes '(not eshell-mode shell-mode))\n  (global company-mode 1))\n  \n#+END_SRC\nworks as intended",
        "created_datetime": "2020-05-19 21:29:32+00:00"
    },
    "t1_kslwb72": {
        "author": "LionyxML",
        "upvotes": 8,
        "body": "** u/LionyxML [[https://www.reddit.com/r/emacs/comments/t3_1b20xgn/comment/t1_kslwb72][\ud83d\udd17]] \n*Votes* 8\n\nA blog post regarding my own Emacs config aiming to get the same user experience on both TUI and GUI.  \n[[https://www.rahuljuliato.com/posts/lemacs][https://www.rahuljuliato.com/posts/lemacs]]",
        "created_datetime": "2024-02-28 22:39:26+00:00"
    },
    "t1_ih3s9fl": {
        "author": "agumonkey",
        "upvotes": 8,
        "body": "** u/agumonkey [[https://www.reddit.com/r/emacs/comments/t3_w3gx6o/comment/t1_ih3s9fl][\ud83d\udd17]] \n*Votes* 8\n\nyou can have an org-mode file in source block in an org file",
        "created_datetime": "2022-07-21 22:17:45+00:00"
    },
    "t1_hdtoivy": {
        "author": "slinchisl",
        "upvotes": 8,
        "body": "\\** u/slinchisl [[https://www.reddit.com/r/emacs/comments/t3_pt2xws/comment/t1_hdtoivy][\ud83d\udd17]] \n\\*Votes* 8\n\nI've been playing around with Emacs 28's [[https://git.savannah.gnu.org/cgit/emacs.git/commit/lisp?id=12409c9064c386a496dcbdca76b790108f6c1cad][repeat-mode]] a bit.  It allows for not having to press modifiers when executing several conceptually similar actions in a row.  Sadly, the ergonomics of defining these repeat maps are not quite there yet, so I wrote a small macro (my first one ever, actually!) to define the map and set the appropriate symbol property for the function:\n\n#+BEGIN_SRC elisp\n(defmacro defrepeatmap (symbol &optional pairs docstring)\n  \"A macro for defining ~repeat-map's.\nDefines a new repeat-map called SYMBOL with the given DOCSTRING.\nThe keys are derived via the list PAIRS, whose elements are cons\ncells of the form (KEY . DEF), where KEY and DEF must fulfill the\nsame requirements as if given to ~define-key'.\"\n  ~(progn\n     (defvar ,symbol\n       (let ((map (make-sparse-keymap)))\n         (--each ,pairs (define-key map (car it) (cdr it)))\n         map)\n       ,docstring)\n     ;; Tell the keys they are in a repeat map.\n     (--each (mapcar 'cdr (cdr ,symbol))\n       (put it 'repeat-map ',symbol))))\n       \n#+END_SRC\nIt can be used like \n\n#+BEGIN_SRC elisp\n(defrepeatmap window-repeat-map\n  '((\"}\" . enlarge-window-horizontally)\n    (\"{\" . shrink-window-horizontally )\n    (\"+\" . balance-windows            )\n    (\"o\" . other-window               )\n    (\"1\" . delete-other-windows       )\n    (\"2\" . split-window-below         )\n    (\"3\" . split-window-right         )\n    (\"0\" . delete-window              )\n    (\"s\" . window-swap-states         )\n    (\"f\" . project-find-file          ))\n  \"Keymap to repeat window key sequences.  Used in ~repeat-mode'.\")\n#+END_SRC",
        "created_datetime": "2021-09-22 10:10:10+00:00"
    },
    "t1_h88ph29": {
        "author": "oantolin",
        "upvotes": 8,
        "body": "** u/oantolin [[https://www.reddit.com/r/emacs/comments/t3_oxo1xh/comment/t1_h88ph29][\ud83d\udd17]] \n*Votes* 8\n\nThis isn't a tip or trick, so I guess it is covered by &c. The Init File section of the manual has this example of setting a user email address:\n\n#+BEGIN_SRC elisp\n(setq user-mail-address \"cheney@torture.gov\")\n#+END_SRC",
        "created_datetime": "2021-08-09 03:30:05+00:00"
    },
    "t1_fs5sq09": {
        "author": "emacsomancer",
        "upvotes": 9,
        "body": "** u/emacsomancer [[https://www.reddit.com/r/emacs/comments/t3_gqsz8u/comment/t1_fs5sq09][\ud83d\udd17]] \n*Votes* 9\n\nPreconfigured Emacs for collaborative writing (using a literate, self-generating init):\n\nhttps://gitlab.com/emacsomancer/collaborative-writing-environment-emacs\n\nNot a huge, lots-of-packages configuration, but with a focus on writing (org-mode, fountain), including version control (magit). \n\nEach person gets a different colour to indicate the part of the file they\u2019re editing: (Screenshot (from the alternative world in which Cory Doctorow  co-wrote _For the Win_ in Emacs):)\n\nhttps://imgur.com/a/zvfLpdH",
        "created_datetime": "2020-05-29 04:01:08+00:00"
    },
    "t1_lvojz57": {
        "author": "ImJustPassinBy",
        "upvotes": 20,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1gktndf/comment/t1_lvojz57][\ud83d\udd17]] \n*Votes* 20\n\n~use-package~ has an inbuilt feature that roughly reports the loading times of each package on startup ([[https://github.com/jschaf/esup][~esup~]] most likely does a better job, if you can get it to run; there are  [[https://github.com/alexmurray/emacs-snap/issues/71][known issues]] on Emacs snap):\n\n1. put ~(setq use-package-compute-statistics t)~ at the beginning of your ~init.el~\n2. restart Emacs\n3. do ~M-x use-package-report~\n\nWhich package is your biggest time sink and why is it worth it?  Mine is [[https://github.com/vedang/pdf-tools][~pdf-tools~]], but to my knowledge there is simply no better alternative for working with pdfs in emacs.",
        "created_datetime": "2024-11-06 09:43:57+00:00"
    },
    "t1_ksoij65": {
        "author": "jcubic",
        "upvotes": 8,
        "body": "** u/jcubic [[https://www.reddit.com/r/emacs/comments/t3_1b20xgn/comment/t1_ksoij65][\ud83d\udd17]] \n*Votes* 8\n\nI use this often when working on large files. You can bookmark up to 9 places inside a file and jump to that position. The limitations is that if you add somehing above the bookmark the position is shifted a bit but it's not that hard to find the right place.\n\nIt works like this: ~C-c 0~ creates a bookmark and ~C-c <1-9>~ jumps into a bookmark. I've written about this on my old blog. I still use this from time to time.\n\n[[https://jcubic.wordpress.com/2012/01/25/faster-buffer-bookmarking-in-emacs/][Faster buffer bookmarking in Emacs]].",
        "created_datetime": "2024-02-29 11:27:23+00:00"
    },
    "t1_izxi6ie": {
        "author": "WorldsEndless",
        "upvotes": 8,
        "body": "\\** u/WorldsEndless [[https://www.reddit.com/r/emacs/comments/t3_z8ltei/comment/t1_izxi6ie][\ud83d\udd17]] \n\\*Votes* 8\n\nA great functionality for calculating some schedule events is `org-evaluate-time-range` (`C-c C-y`). When I need to propose an event of a particular length, I use this to get my length right between two dates.",
        "created_datetime": "2022-12-12 16:11:43+00:00"
    },
    "t1_haffax1": {
        "author": "_viz_",
        "upvotes": 8,
        "body": "\\** u/_viz_ [[https://www.reddit.com/r/emacs/comments/t3_pb6w2z/comment/t1_haffax1][\ud83d\udd17]] \n\\*Votes* 8\n\nThis might prove to be helpful for some.  xdragon is https://github.com/mwh/dragon\n\n#+BEGIN_SRC elisp\n(defun vz/dired-popup-xdragon ()\n  \"Open xdragon with the marked files or the file at point.\"\n  (interactive)\n  ;; xdragon rename is a nix thing, pretty sure.\n  (make-process\n   :name \"xdragon\"\n   :command (append '(\"xdragon\") (dired-get-marked-files))\n   :noquery t))\n\n#+END_SRC\nWhen I searched for drag and drop support, I did not see anything that hinted at the ability of dragging things _from_ Emacs hence the usage of (x)dragon.",
        "created_datetime": "2021-08-26 15:28:38+00:00"
    },
    "t1_gaapjtw": {
        "author": "spinochet",
        "upvotes": 8,
        "body": "\\** u/spinochet [[https://www.reddit.com/r/emacs/comments/t3_jix6od/comment/t1_gaapjtw][\ud83d\udd17]] \n\\*Votes* 8\n\nFor some time I have wished I could color code the background colors of different buffers to make it easier to pick them out on a busy screen and to give myself visual cues about keybinding differences (like paging with the space bar in view-mode). I've finally done it, and it wasn't as complicated as I thought it might be.\n\n#+BEGIN_SRC elisp\n(defun bespoke-background-color ()\n  \"Color code background according to buffer type.\"\n  ;; called in after-change-major-mode-hook & view-mode-hook\n  (cond\n   ((member (buffer-name)\n            (list \"*Backtrace*\" \"*Compile-Log*\"\n                  \"*Completions*\" \"*Messages*\"))\n    (buffer-face-set :background \"#1f1d1b\"))  ; brown\n   ((member (buffer-name)\n            (list \"*Colors*\" \"*Faces*\")) nil) ; text gray (8)\n   ((derived-mode-p 'special-mode)\n    (buffer-face-set :background \"#1c221c\"))  ; green\n   ((or buffer-read-only view-mode)\n    (buffer-face-set :background \"#111c22\"))  ; blue\n   ((derived-mode-p 'prog-mode)\n    (buffer-face-set :background \"gray5\"))    ; prog gray (5)\n   (t nil)))                                  ; text gray (8)\n#+END_SRC",
        "created_datetime": "2020-10-27 18:16:10+00:00"
    },
    "t1_itwo67r": {
        "author": "meedstrom",
        "upvotes": 8,
        "body": "** u/meedstrom [[https://www.reddit.com/r/emacs/comments/t3_ydsjfy/comment/t1_itwo67r][\ud83d\udd17]] \n*Votes* 8\n\nI had the [[https://github.com/alphapapa/defrepeater.el][defrepeater]] package for a while, but didn't realize you could use it this elegantly!\n\n#+BEGIN_SRC elisp\n(global-set-key [remap transpose-lines] (defrepeater #'transpose-lines))\n\n#+END_SRC\nSomething similar is actually in the readme, but I guess I glossed over it back then.",
        "created_datetime": "2022-10-26 22:10:32+00:00"
    },
    "t1_inp54pm": {
        "author": "khourhin",
        "upvotes": 8,
        "body": "** u/khourhin [[https://www.reddit.com/r/emacs/comments/t3_x7zfs2/comment/t1_inp54pm][\ud83d\udd17]] \n*Votes* 8\n\nJust discovered 'desktop-environment-mode', really useful, particularly if you are using EXWM and want to get back functional standard keys. [[https://github.com/DamienCassou/desktop-environment][https://github.com/DamienCassou/desktop-environment]]\n\nThanks Damien !",
        "created_datetime": "2022-09-09 08:11:09+00:00"
    },
    "t1_idb3m43": {
        "author": "ScottWC2",
        "upvotes": 8,
        "body": "\\** u/ScottWC2 [[https://www.reddit.com/r/emacs/comments/t3_vi01zb/comment/t1_idb3m43][\ud83d\udd17]] \n\\*Votes* 8\n\nAnyone know why r/planetemacs went private? Private subs don't work with rss and I just noticed it changed around April 15th.",
        "created_datetime": "2022-06-22 15:26:12+00:00"
    },
    "t1_gs55kqw": {
        "author": "b3n",
        "upvotes": 8,
        "body": "\\** u/b3n [[https://www.reddit.com/r/emacs/comments/t3_mb8u1m/comment/t1_gs55kqw][\ud83d\udd17]] \n\\*Votes* 8\n\nI use EXWM mode, so I can use Emacs' excellent window managing functionality universally with my standard applications like Firefox.\n\nFirefox, like most web browsers nowadays, has tabs. But tabs are vastly inferior to Emacs' built in buffer management, and I don't think the abstraction belongs at the application level, instead it should be implemented once universally so it can be used with all applications. I think tabs became popular because window managers failed at effectively managing a large number of browser windows.\n\nI use Firefox with the tab bar hidden, and with an extension which will open every new tab in a new window automatically. Now I can use my buffer switching commands like usual, across the 100s of Firefox windows I have, and it works like a breeze. Whatever improvements I add to help me manage buffers, automatically apply to Firefox. For example I recently enabled `midnight-mode` to clean up old buffers that I haven't visited in a few days, and I now have this automatically for Firefox too (I'm bad at manually closing webpages once I open them).\n\nNow, onto my tip/trick. I wanted ibuffer to display the URL of each Firefox window as the file name. So I can search by the window name, or by the URL, while keeping them separated. The file name seems appropriate here as it would otherwise be empty.\n\nTo do this, I found an extension that adds the current URL to Firefox's title (I used https://addons.mozilla.org/en-US/firefox/addon/keepass-helper-url-in-title/, but any would work), I then wrote the following function:\n\n#+BEGIN_SRC elisp\n(defun b3n-exwm-set-buffer-name ()\n  (if (and exwm-title (string-match \"\\\\`http[^ ]+\" exwm-title))\n    (let ((url (match-string 0 exwm-title)))\n      (setq-local buffer-file-name url)\n      (setq-local exwm-title (replace-regexp-in-string\n                              (concat (regexp-quote url) \" - \")\n                              \"\"\n                              exwm-title))))\n\n  (setq-local exwm-title\n              (concat\n               exwm-class-name\n               \"<\"\n               (if (<= (length exwm-title) 50)\n                   exwm-title\n                 (concat (substring exwm-title 0 50) \"\u2026\"))\n               \">\"))\n\n  (exwm-workspace-rename-buffer exwm-title))\n\n#+END_SRC\nI then added this function to the `exwm-update-class-hook` and `exwm-update-title-hook` hooks.\n\nNow, in ibuffer, it looks like this:\n\n#+BEGIN_SRC elisp\n  Firefox<Weekly tips/trick/etc/ thread : emacs \u2014 Mozilla Fi\u2026> https://www.reddit.com/r/emacs/comments/mb8u1m/weekly_tipstricketc_thread/\n\n#+END_SRC\nWith the buffer name on the left, and the file name (URL) on the right. Perfect :)\n\nI will make some more improvements in the coming days, so if I split the window with `C-x 3` it duplicates the current window, so it works similar to a regular Emacs buffer and I can scroll to different points on the same page. EXWM should make this easy enough with simulation keys.",
        "created_datetime": "2021-03-25 06:24:07+00:00"
    },
    "t1_k9g3i9s": {
        "author": "AffectionateAd8985",
        "upvotes": 8,
        "body": "** u/AffectionateAd8985 [[https://www.reddit.com/r/emacs/comments/t3_17vp0o1/comment/t1_k9g3i9s][\ud83d\udd17]] \n*Votes* 8\n\nIn eshell, ~cd =xxx~ behaves like ~z xxx~ in [[https://github.com/ajeetdsouza/zoxide][zoxide]], jump to recent directory matching ~xxx~ pattern.",
        "created_datetime": "2023-11-16 02:16:29+00:00"
    },
    "t1_janipaz": {
        "author": "desquared",
        "upvotes": 8,
        "body": "** u/desquared [[https://www.reddit.com/r/emacs/comments/t3_11ey9ft/comment/t1_janipaz][\ud83d\udd17]] \n*Votes* 8\n\nFor a while, I've been thinking about a nice way to get arbitrary tooltips in org mode. I just figured out something pretty easy: just use a nonexistent link type.\n\nI don't care about the follow behavior, or export -- just showing the tooltip under the house, or in the help-echo area, so if I do something like\n\n#+BEGIN_SRC elisp\n[[abbrev:this stands for Some Random Acronym][SRA]]\n\n#+END_SRC\nthe buffer shows \"SRA\" as an org link, and when point or the mouse is over it, I get the expected message. There's nothing special about \"abbrev\", except that it hasn't been defined as an org link type. If I try to follow the link, org tries to create a heading, but for such things, I'm not going to follow the link, or export it, so that behavior doesn't matter.\n\nAnother use is for footnote-style things: say, in a table you want a cell where you can add some kind of note or comment, but don't want the cell to be very big. You can make your table like this:\n\n\n#+BEGIN_SRC elisp\n| col A | notes |\n|-------+-------|\n|  1234 | [[whatever:this is a note or comment about this row in the table][note]]  |\n|       |       |\n\n#+END_SRC\nand the cell just says \"note\", but I can see the rest when I hover.\n\nTo get the link target -- the note, the abbreviation, and so on -- to display in the help-echo area, you'll need to set ~help-at-pt-display-when-idle~ suitably: see https://emacs.stackexchange.com/questions/54319/how-to-display-target-of-an-org-mode-link-in-the-echo-area-or-as-tooltip.",
        "created_datetime": "2023-03-02 18:27:43+00:00"
    },
    "t1_imqmfsi": {
        "author": "kickingvegas1",
        "upvotes": 8,
        "body": "\\** u/kickingvegas1 [[https://www.reddit.com/r/emacs/comments/t3_x27yc9/comment/t1_imqmfsi][\ud83d\udd17]] \n\\*Votes* 8\n\n\\*Embedded calc mode* to insert a quick and dirty calculation in a buffer:\n\n#+BEGIN_SRC elisp\nTo enter Embedded mode, position the Emacs point (cursor) on a formula\nin any buffer and press \u2018C-x * e\u2019 (\u2018calc-embedded\u2019).  Note that \u2018C-x *\ne\u2019 is not to be used in the Calc stack buffer like most Calc commands,\nbut rather in regular editing buffers that are visiting your own files.\n#+END_SRC",
        "created_datetime": "2022-09-02 02:20:50+00:00"
    },
    "t1_hqlp0en": {
        "author": "nicholas_hubbard",
        "upvotes": 8,
        "body": "\\** u/nicholas_hubbard [[https://www.reddit.com/r/emacs/comments/t3_rr330u/comment/t1_hqlp0en][\ud83d\udd17]] \n\\*Votes* 8\n\nHere is a consult source for [[https://github.com/nex3/perspective-el][perspective.el]]\n\n#+BEGIN_SRC elisp\n(defvar consult--source-perspective\n    `(:name \"Perspective\"\n            :narrow   ?p\n            :category buffer\n            :face     consult-buffer\n            :history  buffer-name-history\n            :state    ,#'consult--buffer-state\n            :default  t\n            :items    ,#'persp-get-buffer-names)\n    \"Perspective candidate source for `consult-buffer'.\")\n#+END_SRC",
        "created_datetime": "2021-12-30 22:04:44+00:00"
    },
    "t1_fvy3geb": {
        "author": "[deleted]",
        "upvotes": 8,
        "body": "\\** u/[deleted] [[https://www.reddit.com/r/emacs/comments/t3_heaoiu/comment/t1_fvy3geb][\ud83d\udd17]] \n\\*Votes* 8\n\n~(setq visual-order-cursor-movement t)~\n\n> If non-nil, moving cursor with arrow keys follows the visual order.\n> \n> When this is non-nil, <right> will move to the character that is\nto the right of point on display, and <left> will move to the left,\ndisregarding the surrounding bidirectional context.  Depending on the\nbidirectional context of the surrounding characters, this can move point\nmany buffer positions away.\n> \n> When the text is entirely left-to-right, logical-order and visual-order\ncursor movements produce identical results.\"\n\nI write in Arabic.",
        "created_datetime": "2020-06-25 13:08:03+00:00"
    },
    "t1_j9jgfhg": {
        "author": "elimik31",
        "upvotes": 8,
        "body": "** u/elimik31 [[https://www.reddit.com/r/emacs/comments/t3_118sowc/comment/t1_j9jgfhg][\ud83d\udd17]] \n*Votes* 8\n\nThe [[https://github.com/TeX-Live/texdoc/wiki/Tab-completion][texdoc]] CLI program provided by TeXLive allows opening the documentation of LaTeX packages given a package name as its argument (requires having the documentation installed locally). It is available from AUCTeX via the ~TeX-documentation-texdoc~ command, which I find useful. However, it requires typing out the package name by hand (though it uses symbol-at-point as the default). Recently I found that the texdoc wiki contains a snippet how to add [[https://github.com/TeX-Live/texdoc/wiki/Tab-completion][tab-completion]], which showed me where to get a list of installed TeXLive package names. I ported this to emacs lisp, and combined with ~completing-read~ and ~call-process~ to call the terminal command I created my own ~my-texdoc~ command with interactive candidate selection. It's available as [[https://gist.github.com/meliache/e645bf50c6aeac8e6e58b92c6bddac20][github gist here]], but I can also paste the code:\n\n#+BEGIN_SRC elisp\n(defun my-texdoc--get-package-list ()\n  (let ((tlpdb-fpath (file-name-concat\n                      (string-trim-right\n                       (shell-command-to-string \"kpsewhich -var-value TEXMFROOT\"))\n                      \"tlpkg/texlive.tlpdb\"))\n        (name-regex \"^name \\\\([^ \\n.]+\\\\)$\"))\n    (with-current-buffer (find-file-noselect tlpdb-fpath 'nowarn 'rawfile)\n      (save-excursion\n        (goto-char (point-min))\n        (cl-loop\n         while (re-search-forward name-regex nil 'noerror)\n         collect (match-string-no-properties 1))))))\n    \n(defun my-texdoc (pkg)\n  \"Show TeX documentation for package PKG.\nIf called interactively, select package from TexLive with interactive completion.\"\n  (interactive\n   (list (completing-read\n          \"texdoc: \"\n          (my-texdoc--get-package-list)\n          nil nil nil\n          'my-texdoc-history)))\n    (call-process \"texdoc\" nil \" *texdoc*\" nil \"--view\" pkg))\n\n#+END_SRC\nMy biggest problem is that I'm not sure how to share it with the emacs community, it doesn't seem like it's big enough to be its own package, I might post it on some wiki or in some aggregating package like ~consult~, but I thought I would start with this reddit thread. I also might try to merge this into ~AUCTeX~, however I'm not sure if that's actively developed anymore and the ~TeX-documentation-texdoc~ source code is much more complex than what I have, that I'm a bit worried to break something.\n\nAnd to make this post a real tip: If you know some CLI program and can somehow get a list of possible arguments for that program, try writing your own emacs lisp command wrapper with ~completing-read~ support, it's fun and not that hard.",
        "created_datetime": "2023-02-22 12:19:40+00:00"
    },
    "t1_l01n03t": {
        "author": "ImJustPassinBy",
        "upvotes": 8,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1c64gcj/comment/t1_l01n03t][\ud83d\udd17]] \n*Votes* 8\n\nJust found out about the variable ~confirm-kill-emacs~.  Never again will I quit emacs by accident, because auctex bound a frequently used function to ~C-c C-v~ (one key away from ~C-x C-c~).",
        "created_datetime": "2024-04-17 20:53:38+00:00"
    },
    "t1_j67y1pt": {
        "author": "snippins1987",
        "upvotes": 8,
        "body": "** u/snippins1987 [[https://www.reddit.com/r/emacs/comments/t3_10ktqj0/comment/t1_j67y1pt][\ud83d\udd17]] \n*Votes* 8\n\nContext: after finally getting into org-mode (org-roam specifically) and writing a bunch of elisp, I still dot not at all satisfy dealing with *org-table* or *table.el*, it just felt so out-of-place and clunky compare to the otherwise slick experiences that org-mode bring. So I basically gave up and have been linking spreadsheet files into my org files instead.\n\nObviously, this isn't ideal, as I need to view tables in separated libreoffice calc windows. And the notes is not viewable on GitLab or GitHub, etc.\n\nSo I decided to leverage org-babel to render spreadsheets inside my org notes.\n\nFor that, I created a bash script called emacs_excel_to_png that utilize ssconvert, ImageMagick, and Firefox. The script converts the spreadsheet into HTML, then the HTML is rendered by Firefox and finally ImageMagick will be used to crop the rendered image. The script will then print an org-link so that the image is showed the result section.\n\nWith that, in an org file, we can do something as follows:\n\n#+BEGIN_SRC elisp\n#+begin_src bash :dir ./ :results raw :var ZOOM=1.3\nexport ZOOM; emacs_excel_to_png \\\n    \"note_files/emacs_excel_to_png.xlsx\" \\\n    \"note_files/emacs_excel_to_png.png\"\n#+end_src\n\n#+END_SRC\nThe content of the emacs_excel_to_png script can be found below:\n\n#+BEGIN_SRC elisp\n#!/usr/bin/env bash\n    \nexcel_file=\"$1\"\noutput_file=\"$2\"\n    \nif [[ \"$#\" -lt 2 ]]; then\n    notify-send \"Not enough parameters\"\n    exit\nfi\n    \ntmp_dir=\"/dev/shm\"\nmkdir -p $tmp_dir/emacs_excel_to_png\n    \nif ! [[ \"$excel_file\" = /* ]]; then\n    excel_file=\"${PWD}/${excel_file}\"\nfi\n    \nif ! [[ \"$output_file\" = /* ]]; then\n    output_file=\"${PWD}/${output_file}\"\nfi\n    \nif [[ -z \"$ZOOM\" ]]; then\n    ZOOM=\"1.3\"\nfi\n    \ncd $tmp_dir/emacs_excel_to_png || exit\n    \n# convert xlsx to html\nssconvert --export-type=Gnumeric_html:html40  --import-type=Gnumeric_Excel:xlsx \"$excel_file\" \"$tmp_dir/emacs_excel_to_png/output.html\" 2> /dev/null\n    \n# remove captions for sheets in the output html if there is only one sheet\nn_sheets=$(grep -c \"<caption>\" $tmp_dir/emacs_excel_to_png/output.html)\nif [[ \"$n_sheets\" -eq \"1\" ]]; then\n    sed -i '/<caption>/d' $tmp_dir/emacs_excel_to_png/output.html\nfi\n    \n# scaling the table using the ZOOM environment variable \nsed -i \"s/<\\/style>/body { transform-origin: top left; transform: scale(${ZOOM}, ${ZOOM}); }<\\/style>/g\" $tmp_dir/emacs_excel_to_png/output.html\n    \n# using firefox screenshot feature to convert from html to png\n# Note: -P screenshot, we need created a seperated profile for taking screenshot so firefox won't complain about already running\n/usr/bin/firefox -P screenshot --headless --window-size 3840 --screenshot file://$tmp_dir/emacs_excel_to_png/output.html > /dev/null 2>&1\n    \n# trim the picture to leave only the data area and invert the colors\nconvert -trim -negate screenshot.png screenshot.trimmed.png 2> /dev/null\n    \n# move the resulting pictures into the appropirate place\nmv screenshot.trimmed.png \"$output_file\"\n    \n# print the output as org-mod pictures link\necho \"[[file:${output_file}]]\"\n    \n# cleanup\nrm -rf $tmp_dir/emacs_excel_to_png\n#+END_SRC",
        "created_datetime": "2023-01-28 10:51:53+00:00"
    },
    "t1_isazxjg": {
        "author": "Sudo_Brew",
        "upvotes": 8,
        "body": "\\** u/Sudo_Brew [[https://www.reddit.com/r/emacs/comments/t3_y1y0kq/comment/t1_isazxjg][\ud83d\udd17]] \n\\*Votes* 8\n\nI've been unhappy with the behavior of ~comment-line~ moving the point down a line, and sometimes inexplicably commenting an inactive region. I'm also unhappy with ~comment-dwim~'s single-line behavior of adding a comment at the end of the line. What I want is a function to comment/uncomment the region if its active, and comment/uncomment the line at point otherwise, so I made this quick little function:\n\n#+BEGIN_SRC elisp\n(defun my/comment-dwim ()\n  \"Comment region if active, else comment line.\n\nThis avoids the excess region commenting of ~comment-line' while also avoiding the weird single-line\nbehavior of ~comment-dwim'.\"\n  (interactive)\n  (save-excursion\n    (if (use-region-p)\n        (call-interactively #'comment-or-uncomment-region)\n      (call-interactively #'comment-line))))\n#+END_SRC",
        "created_datetime": "2022-10-14 17:16:07+00:00"
    },
    "t1_hucv1fe": {
        "author": "nicholas_hubbard",
        "upvotes": 8,
        "body": "** u/nicholas_hubbard [[https://www.reddit.com/r/emacs/comments/t3_sd10q9/comment/t1_hucv1fe][\ud83d\udd17]] \n*Votes* 8\n\nThis function clears a comint-mode buffer in a dwim fashion by preserving the current input line and working even if the cursor is above the input line. I have been using it with shell-mode and ielm bound to ~C-l~ and it works nicely.\n\n#+BEGIN_SRC elisp\n(defun my/comint-clear ()\n  (interactive)\n  (let ((orig-ln (line-number-at-pos))\n        (col (current-column))\n        (cmd (progn (end-of-buffer)\n                    (move-end-of-line nil)\n                    (set-mark (point))\n                    (move-beginning-of-line nil)\n                    (buffer-substring (region-beginning) (region-end))))\n        (after-ln (line-number-at-pos)))\n    (delete-region (region-beginning) (region-end))\n    (comint-clear-buffer)\n    (insert cmd)\n    (if (= orig-ln after-ln)\n        (move-to-column col t)\n      (move-beginning-of-line nil))))\n#+END_SRC",
        "created_datetime": "2022-01-26 22:19:11+00:00"
    },
    "t1_lx7y88i": {
        "author": "konrad1977",
        "upvotes": 10,
        "body": "** u/konrad1977 [[https://www.reddit.com/r/emacs/comments/t3_1gq86x9/comment/t1_lx7y88i][\ud83d\udd17]] \n*Votes* 10\n\nI totally forgot about ~use-package-compute-statistics t~ and  (M-x) ~use-package-report~. This helped me optimizing my startup time from around 3 seconds to less than a second.",
        "created_datetime": "2024-11-15 05:56:01+00:00"
    },
    "t1_lyc7kx9": {
        "author": "Nice_Elk_55",
        "upvotes": 11,
        "body": "** u/Nice_Elk_55 [[https://www.reddit.com/r/emacs/comments/t3_1gvkske/comment/t1_lyc7kx9][\ud83d\udd17]] \n*Votes* 11\n\nI used to use the which-key package to discover key bindings, but now have completely dropped it ever since learning about ~C-h~. Say you want to use rectangle commands and remember they start with ~C-x r~, but can't remember anything after. Just enter ~C-x r~, followed by ~C-h~. It will list all the keys under that prefix. Seems to work with any prefix key like ~M-s~, ~C-c~, etc.\n\nA related thing is that you can explore the keys for a major/minor mode with ~C-h b~, ~describe-bindings~. It used to be pretty useless because it would list every single possible keybinding and accent character, but in newer emacs it's way easier to navigate thanks to folding headings.",
        "created_datetime": "2024-11-22 00:45:46+00:00"
    },
    "t1_lzbam44": {
        "author": "cidra_",
        "upvotes": 11,
        "body": "** u/cidra_ [[https://www.reddit.com/r/emacs/comments/t3_1h0zjvq/comment/t1_lzbam44][\ud83d\udd17]] \n*Votes* 11\n\nTIL that you can style the GTK components of Emacs by means of simply overriding CSS styling. There's a cool package for that ([[https://github.com/florommel/custom-css.git][custom-css on GitHub]]) but I also discovered that you can easily tweak it \"in real time\" and without any additional package by invoking the GTK inspector using the following function:\n\n#+BEGIN_SRC elisp\n(x-gtk-debug t)\n\n#+END_SRC\nOne thing that I really wanted to achieve was to get rounded corners in the bottom edges of an Emacs frame using GNOME. To do that it is necessary for the client-side decorations to do so. I tried applying the ~border-radius~ attribute everywhere but it won't work on the main pane due to it not being a standard GTK component. What I did was putting the toolbar in the bottom position and then apply a ~border-radius~ styling on it. I also applied the ~border-radius~ styling on the main window and on the ~decoration~ component (which gives shadowing to the frame)\n\nhttps://preview.redd.it/fnf9sp6yoi3e1.png?width=1725&format=png&auto=webp&s=dca1b33886b72e32d445bb02830814357738c2f5\n\n#+BEGIN_SRC elisp\ndecoration {\n    border-radius:12px;\n}\n    \nwindow{\n    border-radius: 12px;\n}\n    \nmenubar{\n/* \n   For some reason the menu bar \n   gets a border radius as well. \n   Let's cover it \n\\*/\n    background-color: white;\n}\n    \ntoolbar {\n    border-radius: 12px;\n}\n\n#+END_SRC\nNow I wonder if it's possible to remove the header bar but without removing the shadow behind the frame and behind the context menus. \ud83e\udd14",
        "created_datetime": "2024-11-27 22:08:14+00:00"
    },
    "t1_lyptzyu": {
        "author": "ImJustPassinBy",
        "upvotes": 8,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1gvkske/comment/t1_lyptzyu][\ud83d\udd17]] \n*Votes* 8\n\nFor people who need to do a quick calculations from time to time but struggle using ~M-x calc~, try ~M-x quick-calc~.  You can enter expressions such as ~2*3.4+5~, and the result will be shown and put into your clipboard.",
        "created_datetime": "2024-11-24 09:31:46+00:00"
    },
    "t1_m2mx3xd": {
        "author": "ImJustPassinBy",
        "upvotes": 9,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1hgx486/comment/t1_m2mx3xd][\ud83d\udd17]] \n*Votes* 9\n\nI just found out that ~M-x make-frame~ creates the frame on the monitor where the mouse cursor is.  So for people who use multiple monitors, one alternative to ~M-x make-frame-on-monitor~ and selecting the monitor is to simply have the mouse on the monitor you want.",
        "created_datetime": "2024-12-18 09:49:08+00:00"
    },
    "t1_m47cq9g": {
        "author": "Argletrough",
        "upvotes": 20,
        "body": "** u/Argletrough [[https://www.reddit.com/r/emacs/comments/t3_1hlwpr0/comment/t1_m47cq9g][\ud83d\udd17]] \n*Votes* 20\n\nThe built-in ~mode-local~ package lets you set the values of variables based on the major mode. This lets you avoid the ~(add-hook 'foo-mode-hook (lambda () (setq ...))~ boilerplate that I see in a lot of people's configs. E.g.:\n#+BEGIN_SRC elisplisp\n(setq-mode-local prog-mode fill-column 100)\n(setq-mode-local org-mode display-line-numbers 'visual)\n#+END_SRC\n\nSee also: [[https://gitlab.com/aidanhall/emacs.d/-/blob/aaf1c1a26adc1376630801a011dce8b42b937fee/init.el#L506][pre-selecting relevant devdocs with ~mode-local~]].",
        "created_datetime": "2024-12-28 15:37:39+00:00"
    },
    "t1_m63mddk": {
        "author": "sandinmyjoints",
        "upvotes": 22,
        "body": "** u/sandinmyjoints [[https://www.reddit.com/r/emacs/comments/t3_1hwf46n/comment/t1_m63mddk][\ud83d\udd17]] \n*Votes* 22\n\nFor years, I've figured I was using electric-pairs wrong, until I took some time recently to look into it. One case I regularly encounter whose behavior I don't like (pipe representing where point is when I type the quote key one time):\n\n#+BEGIN_SRC elisp\n\"\"|word\n\n#+END_SRC\nI never want two quotes in this case. \n\nThe behavior is mostly controlled by electric-pair-inhibit-predicate. I was using the default (electric-pair-default-inhibit), with electric-pair-preserve-balance set to t. Overall, I realized that electric-pair-preserve-balance is not very useful for me, and what I want is closer to electric-pair-conservative-inhibit, which is what electric-pair-default-inhibit uses when electric-pair-preserve-balance is nil. Turning off electric-pair-preserve-balance fixed the above case.\n\nHowever, electric-pair-conservative-inhibit still didn't handle well this case that I also often encounter:\n\n#+BEGIN_SRC elisp\nword|\"\"\n\n#+END_SRC\nSo I wrote my own, adding one additional condition to the ~or~ of the builtin electric-pair-conservative-inhibit, and now it finally works in a way that feels natural/correct!\n\n#+BEGIN_SRC elisp\n(defun my/electric-pair-conservative-inhibit (char)\n  (or\n   ;; I find it more often preferable not to pair when the\n   ;; same char is next.\n   (eq char (char-after))\n   ;; Don't pair up when we insert the second of \"\" or of ((.\n   (and (eq char (char-before))\n#+END_SRC\n  \t        (eq char (char-before (1- (point)))))\n#+BEGIN_SRC elisp\n   ;; I also find it often preferable not to pair next to a word.\n   (eq (char-syntax (following-char)) ?w)\n   ;; Don't pair at the end of a word, unless parens.\n   (and\n    (eq (char-syntax (char-before (1- (point)))) ?w)\n    (eq (preceding-char) char)\n    (not (eq (char-syntax (preceding-char)) 40) ;; 40 is open paren\n         ))))\n#+END_SRC",
        "created_datetime": "2025-01-08 19:37:20+00:00"
    },
    "t1_m60s6o9": {
        "author": "ImJustPassinBy",
        "upvotes": 15,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1hwf46n/comment/t1_m60s6o9][\ud83d\udd17]] \n*Votes* 15\n\nA universally useful package that I don't see mentioned enough is [[https://github.com/Wilfred/helpful][~helpful~]].  It improves help buffers (better highlighting, more information, etc; see GitHub for screenshots).  Just rebind the help keybindings, defer loading until they are called, and it won't even impact your starting time:\n\n#+BEGIN_SRC elisp\n  (use-package helpful\n    :bind\n    ((\"C-h f\" . helpful-function)\n     (\"C-h x\" . helpful-command)\n     (\"C-h k\" . helpful-key)\n     (\"C-h v\" . helpful-variable)))\n#+END_SRC",
        "created_datetime": "2025-01-08 08:45:26+00:00"
    },
    "t1_m7h4xwp": {
        "author": "meain",
        "upvotes": 11,
        "body": "** u/meain [[https://www.reddit.com/r/emacs/comments/t3_1i1sv9u/comment/t1_m7h4xwp][\ud83d\udd17]] \n*Votes* 11\n\nSet buffer to read-only mode if the header(first 10 lines) contains \"DO NOT EDIT\". These are usually generated files that you wouldn't want to modify by hand.\n\n#+BEGIN_SRC elisp\n(use-package emacs\n  :config\n  (defun meain/set-read-only-if-do-not-edit ()\n\"Set the buffer to read-only if buffer contents has 'DO NOT EDIT' in it.\nWe limit the search to just top 10 lines so as to only check the header.\"\n(save-excursion\n  (goto-char (point-min))\n  (let ((content\n         (buffer-substring (point)\n                           (save-excursion (forward-line 10) (point)))))\n    (when (and (not buffer-read-only)\n               (string-match \"DO NOT EDIT\" content))\n      (read-only-mode 1)\n      (message \"Buffer seems to be generated. Set to read-only mode.\")))))\n  (add-hook 'find-file-hook 'meain/set-read-only-if-do-not-edit))\n#+END_SRC",
        "created_datetime": "2025-01-16 16:47:41+00:00"
    },
    "t1_m3qn07c": {
        "author": "ImJustPassinBy",
        "upvotes": 8,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1hlwpr0/comment/t1_m3qn07c][\ud83d\udd17]] \n*Votes* 8\n\n\\**PSA for latex users:** [[https://github.com/ge-ne/bibtool][~bibtool~]] is a software for cleaning up ~.bib~ files and it is bundled with most tex distributions.  It can sort bibliography entries, uniformize their layout, and even systematically generate the keys.  You can use it by running:\n \n#+BEGIN_SRC elisp\nbibtool input.bib -o output.bib \n\n#+END_SRC\n(the default output doesn't look too good, see below for a minimal config)\n\n\n\\**For latex+emacs users:**  Here is a small function that runs ~bibtool~ on the current buffer:\n\n#+BEGIN_SRC elisp\n(defun my/bibtool-current-file ()\n  \"Run bibtool on the current buffer's file.\"\n  (interactive)\n  (let ((file (buffer-file-name)))\n    (if file\n        (let ((default-directory (file-name-directory file))\n              (base-file (file-name-nondirectory file)))\n          (shell-command (concat \"bibtool \" base-file \" -o \" base-file)))\n    (message \"Not visiting a file!\"))))\n\n#+END_SRC\nAnd here is a minimal config for ~bibtool~, just save it as ~.bibtoolrsc~ in the folder your are invoking ~bibtool~ or in your home folder:\n\n#+BEGIN_SRC elisp\nsort = on\nsort.format = {%N(author)}\n\nsort.order{* =\n    author\n    bibkey\n    title\n    editor\n    booktitle\n    mrnumber\n    zbl\n    journal\n    fjournal\n    series\n    volume\n    number\n    note\n    howpublished\n    address\n    organization\n    publisher\n    edition\n    pages\n    year\n    month\n    doi\n    url\n}\n\nprint.align.key = 0\nprint.line.length = 120\npreserve.key.case = on\nsort.cased = off\nprint.use.tab = off\n\nfmt.name.name = { }\nfmt.inter.name = { x }\n#+END_SRC",
        "created_datetime": "2024-12-25 14:50:54+00:00"
    },
    "t1_m9ttaio": {
        "author": "unduly-noted",
        "upvotes": 13,
        "body": "** u/unduly-noted [[https://www.reddit.com/r/emacs/comments/t3_1icp42g/comment/t1_m9ttaio][\ud83d\udd17]] \n*Votes* 13\n\nOn macOS, integrating with shortcuts (or osascript, I suppose) can be powerful. When I'm watching lectures I like to have video on the left, org-mode on the right for notes. However, I found I was often screenshotting the video player and pasting into org-mode. Or Anki.\n\nI was able to create a macOS shortcut which finds the video player regardless of window focus (important so I don't have to leave emacs) and screenshot to clipboard. This is called super easily from emacs: ~(call-process \"shortcuts\" nil nil nil \"run\" \"IINA Screenshot\")~.\n\nNow, I have a binding to easily paste a video screenshot (org-download) without pausing the video or even leaving org-mode at all. Or easily paste into Anki. It's a three line function that totally smoothed my workflow.\n\n#+BEGIN_SRC elisp\n(defun me/iina-screenshot ()\n  (interactive)\n  (call-process \"shortcuts\" nil nil nil \"run\" \"IINA Screenshot\")\n  (org-download-clipboard))\n#+END_SRC",
        "created_datetime": "2025-01-29 14:38:58+00:00"
    },
    "t1_m36rqzv": {
        "author": "pjhuxford",
        "upvotes": 9,
        "body": "** u/pjhuxford [[https://www.reddit.com/r/emacs/comments/t3_1hgx486/comment/t1_m36rqzv][\ud83d\udd17]] \n*Votes* 9\n\nIn a ~*Help*~ buffer, running ~help-view-source~ (e.g. by pressing ~s~) jumps to the source of the current help item. However, by default it opens the source buffer in a different window to the help buffer.\n\nPersonally, I find it much more intuitive for the source buffer window to replace the ~*Help*~ buffer window. I just found out that in Emacs 29+ this behavior can be achieved by setting the user option ~help-window-keep-selected~ to a non-nil value. It also re-uses the ~*Help*~ buffer window when running ~help-goto-info~ in it (e.g. by pressing ~i~).\n\nWhile reading the news also discovered the new command ~help-find-source~ in Emacs 30+, which is globally bound to ~C-h 4 s~. If a ~*Help*~ buffer exists (not necessarily in the selected window), then in the current window it jumps to the source file corresponding to the ~*Help*~ buffer, if one exists.",
        "created_datetime": "2024-12-21 20:38:44+00:00"
    },
    "t1_ma4bx1b": {
        "author": "druuuun",
        "upvotes": 8,
        "body": "** u/druuuun [[https://www.reddit.com/r/emacs/comments/t3_1icp42g/comment/t1_ma4bx1b][\ud83d\udd17]] \n*Votes* 8\n\nFound out about setting ~shift-select-mode~ to ~'permanent~ today and it's a game changer. I like to use [[https://github.com/casouri/expreg][expreg]] to expand and contract regions and it always bugged me that once a region has been selected, if I then used shift-translated motion key (e.g. ~C-S-f~, ~C-S-n~, etc) to change the region, the region would be deactivated. If you set ~shift-select-mode~ to ~'permanent~ then you can modify the active region regardless of whether it was created by a non-shift-translated command.",
        "created_datetime": "2025-01-31 01:32:43+00:00"
    },
    "t1_mczsy27": {
        "author": "mindgitrwx",
        "upvotes": 9,
        "body": "** u/mindgitrwx [[https://www.reddit.com/r/emacs/comments/t3_1icp42g/comment/t1_mczsy27][\ud83d\udd17]] \n*Votes* 9\n\nIsn't this thread usually updated periodically?",
        "created_datetime": "2025-02-16 00:38:41+00:00"
    },
    "t1_ma5ri3n": {
        "author": "80286",
        "upvotes": 8,
        "body": "** u/80286 [[https://www.reddit.com/r/emacs/comments/t3_1icp42g/comment/t1_ma5ri3n][\ud83d\udd17]] \n*Votes* 8\n\nRecently I discovered a little talked about package: [[https://github.com/boyw165/history][history]]\n\nEmacs has always had multiple ways to navigate, e.g. via jumping in code via xref or imenu; switching nodes in info pages, etc. What they don't have is an integrated way to walk globally back and forward between all those navigations you made.\n\nIt's kind of jarring when you want to go back where you were let's say 4 navigation steps ago, but each step requires a mental context switch to use the functionality's own \"go back\", whichever did the navigation in that particular place.\n\nSo what has been missing is something akin to browser's back/forward buttons, with which you can move to any site you visited in that particular tab, and not just inside one webpage you've been navigating in, which is comparable to how emacs per-functionality history works. Back/forward buttons don't always work perfectly, but they're still a necessity in the age of complex websites.\n\nRecently I had a look at [[https://github.com/dgutov/dot-emacs][dgutov's emacs config]], and discovered a) there exists the package aiming to achieve exactly this, and b) dgutov has a nice basic setup for it.\n\nSo, for the last few days I have finally the \"global\" history that emacs has been lacking in my pattern of use. It's working great so far. I expect there are bumps because it's a complex issue after all.\n\nMy personal setup:\n\n#+BEGIN_SRC elisp\n(use-package history\n    :ensure t\n    :bind (\n         (\"M-8\" . #'history-prev-history)\n         (\"M-9\" . #'history-next-history)\n         (\"M-0\" . #'history-add-history))        \n    :config\n    ;package original: (imenu isearch-mode beginning-of-buffer end-of-buffer)    \n    (setq history-advised-before-functions \n          '(isearch-mode \n            find-function-do-it \n            find-library\n            imenu beginning-of-buffer \n            end-of-buffer\n            xref-find-definitions \n            counsel-imenu counsel-git-grep\n            xref-find-references\n            paredit-backward-up \n            backward-up-list\n            ;; may be risky\n            switch-to-buffer\n            ))\n    (history-mode +1)\n    )\n#+END_SRC",
        "created_datetime": "2025-01-31 07:23:03+00:00"
    },
    "t1_mhnx90t": {
        "author": "Hammar_Morty",
        "upvotes": 8,
        "body": "** u/Hammar_Morty [[https://www.reddit.com/r/emacs/comments/t3_1j8h5aw/comment/t1_mhnx90t][\ud83d\udd17]] \n*Votes* 8\n\nI like Prot's modeline and display-buffer-alist and wanted to try them out. Since he has done such a great job splitting his custom functions into library packages, you can use them without much effort to build your own. \n\nHere is the Elpaca recipe I am using so I don't have to copy the packages into my own config.\n\n#+BEGIN_SRC elisp\n(use-package prot-modeline\n  :ensure (:host gitlab\n:repo \"protesilaos/dotfiles\"\n:files (\"emacs/.emacs.d/prot-lisp/prot-modeline.el\" \n \"emacs/.emacs.d/prot-lisp/prot-common.el\")\n:main \"emacs/.emacs.d/prot-lisp/prot-modeline.el\")\n  :config ...)\n\n#+END_SRC\nhttps://preview.redd.it/wx10z7ngsjoe1.png?width=1155&format=png&auto=webp&s=ec963d86e0136b0af8863b00ccf3061ade123bfc\n\n#+BEGIN_SRC elisp\n(use-package prot-window\n  :ensure (:host gitlab\n:repo \"protesilaos/dotfiles\"\n:files (\"emacs/.emacs.d/prot-lisp/prot-window.el\"\n \"emacs/.emacs.d/prot-lisp/prot-common.el\")\n:main \"emacs/.emacs.d/prot-lisp/prot-window.el\")\n  :config ...)\n#+END_SRC",
        "created_datetime": "2025-03-14 00:16:22+00:00"
    },
    "t1_mijndf0": {
        "author": "melioratus",
        "upvotes": 8,
        "body": "** u/melioratus [[https://www.reddit.com/r/emacs/comments/t3_1j8h5aw/comment/t1_mijndf0][\ud83d\udd17]] \n*Votes* 8\n\nDiscovered cool backtick syntax when using X command on marked files in dired\n\nFor example, Quick way to make individual sha256 checksum files using dired\n\n1. Mark files in dired\n2. Press ~X~\n3. When prompted type\n\n#+BEGIN_SRC elisp\n\u00a0export FILENAME=~?~; sha256sum ${FILENAME} > \u201c${FILENAME}-sha256sum.txt\u201d;\n#+END_SRC\n4. Press ~return~ key.\u00a0\n\n5. Press ~g~ to refresh dired\n\nNow every marked file should have a named checksum file.\u00a0\n\nTry it out",
        "created_datetime": "2025-03-19 01:33:37+00:00"
    },
    "t1_mqzd8oi": {
        "author": "krisbalintona",
        "upvotes": 8,
        "body": "** u/krisbalintona [[https://www.reddit.com/r/emacs/comments/t3_1kfugbz/comment/t1_mqzd8oi][\ud83d\udd17]] \n*Votes* 8\n\nBeen recently motivated to rethink my usage of org-mode on my Android device. I've always had a subpar experience with even basic editing of org mode files on mobile. (Although I've been happy with Orgzly Revived when it comes to interfacing with my todos in org.)\n\nI recently remembered that in that last 2 years or so native Android support for Emacs has become much much better. Or so I heard. So I tested it by installing Emacs from the F-Droid app store and... it's amazing! Just in the last few days I've found using Emacs (with my notes files synced from my desktop via Syncthing) a pleasure.\n\nIt's truly remarkable how Emacs mostly just works the same way on Android as it does under Linux. Just had to enable some touchscreen specific things and magic!\n\nP.S. I am incredibly appreciative of the Customize and tool bar interface. It was my primary means of setting options and saving them to my init.el.",
        "created_datetime": "2025-05-07 00:18:37+00:00"
    },
    "t1_mtmvwj2": {
        "author": "Argletrough",
        "upvotes": 12,
        "body": "** u/Argletrough [[https://www.reddit.com/r/emacs/comments/t3_1kqup1n/comment/t1_mtmvwj2][\ud83d\udd17]] \n*Votes* 12\n\nThere are some useful interactive help commands that aren't bound to keys by default; I find ~describe-char~ especially useful in Org documents with lots of Unicode characters. Here are my bindings:\n\n\n#+BEGIN_SRC elisp\n(use-package help\n  :bind\n  (:map help-map\n        (\"=\" . describe-char)\n        (\"j\" . describe-face)\n        (\"-\" . describe-keymap)))\n#+END_SRC",
        "created_datetime": "2025-05-22 11:11:31+00:00"
    },
    "t1_mtgfbwu": {
        "author": "captainflasmr",
        "upvotes": 9,
        "body": "** u/captainflasmr [[https://www.reddit.com/r/emacs/comments/t3_1kqup1n/comment/t1_mtgfbwu][\ud83d\udd17]] \n*Votes* 9\n\nI was catching up with one of System Crafters videos and there was talk around using built-in functionality and how it would be nice if there was an **orderless** implementation to allow minibuffer completion on an any word basis.\n\nWell I thought I would take up the challenge and came up with this:\n\n#+BEGIN_SRC elisp\n(defun simple-orderless-completion (string table pred point)\n  \"Enhanced orderless completion with better partial matching.\"\n  (let* ((words (split-string string \"[-, ]+\"))\n         (patterns (mapcar (lambda (word)\n                             (concat \"\\\\b.*\" (regexp-quote word) \".*\"))\n                           words))\n         (full-regexp (mapconcat 'identity patterns \"\")))\n    (if (string-empty-p string)\n        (all-completions \"\" table pred)\n      (cl-remove-if-not\n       (lambda (candidate)\n         (let ((case-fold-search completion-ignore-case))\n           (and (cl-every (lambda (word)\n                            (string-match-p\n                             (concat \"\\\\b.*\" (regexp-quote word))\n                             candidate))\n                          words)\n                t)))\n       (all-completions \"\" table pred)))))\n    \n;; Register the completion style\n(add-to-list 'completion-styles-alist\n             '(simple-orderless simple-orderless-completion\n                                simple-orderless-completion))\n    \n;; Set different completion styles for minibuffer vs other contexts\n(defun setup-minibuffer-completion-styles ()\n  \"Use orderless completion in minibuffer, regular completion elsewhere.\"\n  ;; For minibuffer: use orderless first, then fallback to flex and basic\n  (setq-local completion-styles '(simple-orderless flex basic substring)))\n    \n;; Hook into minibuffer setup\n(add-hook 'minibuffer-setup-hook #'setup-minibuffer-completion-styles)\n#+END_SRC",
        "created_datetime": "2025-05-21 11:33:31+00:00"
    },
    "t1_mvr341k": {
        "author": "ImJustPassinBy",
        "upvotes": 16,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1l21cgo/comment/t1_mvr341k][\ud83d\udd17]] \n*Votes* 16\n\nA universally useful package that I'd like to recommend is [[https://github.com/lewang/ws-butler][~ws-butler~]].  It automatically trims trailing whitespaces of the lines that were changed whenever you save a file:\n\n#+BEGIN_SRC elisp\n(use-package ws-butler\n  :hook\n#+END_SRC\n  \t  (prog-mode . ws-butler-mode)\n  \t  (text-mode . ws-butler-mode))\n\nThe native emacs way to achieve something similar is\n\n#+BEGIN_SRC elisp\n(add-hook 'before-save-hook 'delete-trailing-whitespace)\n\n#+END_SRC\nHowever, ~delete-trailing-whitespace~ does not distinguish between changed and unchanged lines, which can be problematic in collaborative projects because it may lead to many changes that you don't want to commit.\n\nedit: typo",
        "created_datetime": "2025-06-03 11:32:32+00:00"
    },
    "t1_modpcjd": {
        "author": "rafalw",
        "upvotes": 8,
        "body": "** u/rafalw [[https://www.reddit.com/r/emacs/comments/t3_1k4w6ov/comment/t1_modpcjd][\ud83d\udd17]] \n*Votes* 8\n\nMy first elisp function, any feedback welcome.\n\nC-c b - switches to full-window \\*Ibuffer\\*, if already in \\*Ibuffer\\* go to previous 'layout'.\n\n#+BEGIN_SRC elisp\n(defun ibuffer-show ()\n  (interactive)\n  (if (string-equal \"*Ibuffer*\" (buffer-name))\n      (winner-undo)\n    (unless (get-buffer \"*Ibuffer*\")\n      (ibuffer-list-buffers))\n    (progn\n      (switch-to-buffer \"*Ibuffer*\" nil t)\n      (delete-other-windows))))\n    \n(global-set-key (kbd \"C-c b\") 'ibuffer-show)\n#+END_SRC",
        "created_datetime": "2025-04-22 04:34:30+00:00"
    },
    "t1_mw07l5v": {
        "author": "krisbalintona",
        "upvotes": 9,
        "body": "** u/krisbalintona [[https://www.reddit.com/r/emacs/comments/t3_1l21cgo/comment/t1_mw07l5v][\ud83d\udd17]] \n*Votes* 9\n\nI'm not sure in which version this was added, but I've been setting the tab-bar group of certain buffers that I've set in ~display-buffer-alist~ to open in a new buffer. For instance, the following opens notmuch-hello buffers in a new tab inside the tab-group named \"media,\" creating it if it doesn't exist already:\n#+BEGIN_SRC elispemacs-lisp\n(add-to-list 'display-buffer-alist\n           '(\"\\\\*notmuch-hello\\\\*\"\n             (display-buffer-in-tab display-buffer-full-frame)\n             (tab-group . \"media\")))\n#+END_SRC\nYou can read about it in the docstring of ~display-buffer-in-tab~. (Strangely, I there is no mention of \"tab-group\" in the Emacs Info manual.)",
        "created_datetime": "2025-06-04 19:22:29+00:00"
    },
    "t1_myjy8bb": {
        "author": "krisbalintona",
        "upvotes": 11,
        "body": "** u/krisbalintona [[https://www.reddit.com/r/emacs/comments/t3_1ldcgpi/comment/t1_myjy8bb][\ud83d\udd17]] \n*Votes* 11\n\nYou can set ~project-compilation-buffer-name-function~ to ~project-prefixed-buffer-name~ to have every compilation buffer created by ~project-compile~ be prefixed by the name of the project, effectively letting you have compilation buffers per project.el project.",
        "created_datetime": "2025-06-19 01:11:45+00:00"
    },
    "t1_n0rbpgy": {
        "author": "krisbalintona",
        "upvotes": 18,
        "body": "** u/krisbalintona [[https://www.reddit.com/r/emacs/comments/t3_1loqznm/comment/t1_n0rbpgy][\ud83d\udd17]] \n*Votes* 18\n\nTwo tips:\n\nIn Emacs 31, there is a new command ~tramp-dired-find-file-with-sudo~ that lets one more easily visit a file with sudo. See ~info \"(emacs) Dired Visiting\"~.\n\nYou can input wildcards and globs while calling ~C-x d~, or ~dired~. For example, \"\\~/.emacs.d/\\**/\\*.el\" creates a dired buffer listing all ~.el~ files inside \\~/.emacs.d/ recursively. See ~info \"(emacs) Dired Enter\"~.",
        "created_datetime": "2025-07-01 13:52:46+00:00"
    },
    "t1_n3bmu9f": {
        "author": "JDRiverRun",
        "upvotes": 9,
        "body": "** u/JDRiverRun [[https://www.reddit.com/r/emacs/comments/t3_1m06p9l/comment/t1_n3bmu9f][\ud83d\udd17]] \n*Votes* 9\n\nIf you compile your own emacs, you might prefer ~xref~ (~M-.~) to visit elisp symbols in the original source directory, *not* the install directory.  [[https://gist.github.com/jdtsmith/57c9c94bc916b58c0e4ebfc01d300bf1][This small function]] enables that.",
        "created_datetime": "2025-07-15 20:04:15+00:00"
    },
    "t1_n1m3kh6": {
        "author": "skyler544",
        "upvotes": 8,
        "body": "** u/skyler544 [[https://www.reddit.com/r/emacs/comments/t3_1loqznm/comment/t1_n1m3kh6][\ud83d\udd17]] \n*Votes* 8\n\nTIL: Using ~completing-read~ is quite simple. Here's a command that will let you run a flatpak app, optionally giving it arguments by calling the command with ~C-u~.\n\n#+BEGIN_SRC elisp\n(defun r/run-flatpak-app (prefix)\n  \"Run a Flatpak application using completing-read.\"\n  (interactive \"P\")\n  (let* ((flatpak-list-command \"flatpak list --app --columns=application\")\n     (flatpak-apps (split-string (shell-command-to-string flatpak-list-command) \"\\n\" t))\n     (selected-app (completing-read \"Select app: \" flatpak-apps))\n     (args (if prefix (read-string \"Arguments: \" \"\"))))\n(start-process \"flatpak-run\" nil \"flatpak\" \"run\" selected-app args)))\n#+END_SRC",
        "created_datetime": "2025-07-06 10:31:01+00:00"
    },
    "t1_n1kp1o6": {
        "author": "DevelopmentCool2449",
        "upvotes": 8,
        "body": "** u/DevelopmentCool2449 [[https://www.reddit.com/r/emacs/comments/t3_1loqznm/comment/t1_n1kp1o6][\ud83d\udd17]] \n*Votes* 8\n\nIn emacs 31 there is a new variable ~load-path-filter-function~ that improves emacs startup time.\n\nAccoding to the commit ([[https://github.com/emacs-mirror/emacs/commit/e5218df144203ff1b5da3d46b7579b6455008ee7][e5218df]]) where this was implemented:\n\n>Add load-path-filter-function and use it to optimize loading\n\n>When there are many directories on load-path, the part of load which\nsearches load-path can become very slow.  By filtering load-path up\nfront to only contain directories which are likely to contain the\nsearched-for file, load becomes much faster.\n\n>This can be set in early-init.el for maximum effect.\n\nI've set it in my ~early-init.el~ ~(setq load-path-filter-function #'load-path-filter-cache-directory-files)~ and i've noticed a good improvement in my startup time, from 1.36s to 1.02s, this may be different but the difference is noticeable.\n\nThis feature is experimental, but it is worth trying it",
        "created_datetime": "2025-07-06 02:54:56+00:00"
    },
    "t1_n196ge3": {
        "author": "DevelopmentCool2449",
        "upvotes": 12,
        "body": "** u/DevelopmentCool2449 [[https://www.reddit.com/r/emacs/comments/t3_1loqznm/comment/t1_n196ge3][\ud83d\udd17]] \n*Votes* 12\n\nI wrote this little snippet for put custom icons in hl-todo keywords.\n\nThe ~use-package~ config here is optional, but you can use it in your existent ~use-package~ configuration:\n\n>!(NOTE: This requires the ~nerd-icons~ package installed and loaded)!<\n\n#+BEGIN_SRC elisp\n(use-package hl-todo\n  :defer t\n  :hook\n  (hl-todo-mode\n   . (lambda ()\n       (unless hl-todo-mode\n         (remove-overlays nil nil 'hl-todo t))))\n  :config\n  (add-to-list 'hl-todo--keywords ~(,(lambda (bound) (remove-overlays (point) bound 'hl-todo t) nil)))\n  :init\n  (define-advice hl-todo--get-face (:override () with-icons)\n    (let* ((keyword (match-string 2))\n           (ov (make-overlay (match-beginning 0) (match-end 0))))\n    \n      ;; Overlays only for the icons\n      (overlay-put ov 'hl-todo t)\n      (overlay-put ov 'evaporate t)\n      (overlay-put ov 'before-string\n                   (pcase keyword\n                     (\"TODO\" (nerd-icons-sucicon \"nf-seti-todo\"))\n                     (\"TEMP\" (nerd-icons-mdicon \"nf-md-timer\"))\n                     (\"BUG\" (nerd-icons-faicon \"nf-fa-bug\"))\n                     (\"FIXME\" (nerd-icons-faicon \"nf-fa-wrench\"))\n                     (\"WARNING\" (nerd-icons-faicon \"nf-fa-flag\"))\n                     (_ (nerd-icons-mdicon \"nf-md-content_paste\"))))\n    \n      ;; Return color for font-lock\n      (hl-todo--combine-face\n       (cdr (or\n             ;; Fast allocation free lookup for literal keywords.\n             (assoc keyword hl-todo-keyword-faces)\n             ;; Slower regexp lookup.\n             (compat-call assoc keyword hl-todo-keyword-faces\n                          (lambda (a b)\n                            (string-match-p (format \"\\\\~%s\\\\'\" a) b)))))))))\n\n#+END_SRC\nHere is how it will look:\n\nhttps://preview.redd.it/8if6ydxpfsaf1.png?width=379&format=png&auto=webp&s=dfd594118f43a2d1a11d301f1a9ec42748143a83",
        "created_datetime": "2025-07-04 04:49:51+00:00"
    },
    "t1_n42glnr": {
        "author": "ImJustPassinBy",
        "upvotes": 9,
        "body": "** u/ImJustPassinBy [[https://www.reddit.com/r/emacs/comments/t3_1m06p9l/comment/t1_n42glnr][\ud83d\udd17]] \n*Votes* 9\n\nQuick shoutout to [[https://github.com/emacsfodder/move-text][~move-text~]], a tiny package that allows you to move the current line (or selected region) up and down using ~M-up~ and ~M-down~:\n\n#+BEGIN_SRC elisp\n(use-package move-text\n    :ensure t\n\t:config\n\t(move-text-default-bindings))\n\n#+END_SRC\nGreat for people who have grown accustomed to moving items up and down with ~M-up~ and ~M-down~ in org-mode, and are looking to replicate that behaviour outside of org-mode.",
        "created_datetime": "2025-07-19 22:09:31+00:00"
    },
    "t1_n3u4k0o": {
        "author": "krisbalintona",
        "upvotes": 8,
        "body": "** u/krisbalintona [[https://www.reddit.com/r/emacs/comments/t3_1m06p9l/comment/t1_n3u4k0o][\ud83d\udd17]] \n*Votes* 8\n\nEveryone knows that ~M-n~ and ~M-p~ in the minibuffer cycles through the history of minibuffer candidates. But not everyone knows that just calling ~M-n~ without any later candidates also sometimes does something depending on the command---you cycle through the so-called \"future history.\" You can read about it in ~info \"(emacs) Minibuffer History\"~. An excerpt:\n\n> If you type \u2018M-n\u2019 in the minibuffer when there are no later entries in the minibuffer history (e.g., if you haven\u2019t previously typed \u2018M-p\u2019), Emacs tries fetching from a list of default arguments: values that you are likely to enter.  You can think of this as moving through the \u201cfuture history\u201d.\n\nFor example, ~C-x C-f M-n~ completes to the file of the current buffer.",
        "created_datetime": "2025-07-18 15:52:54+00:00"
    },
    "t1_n8hzgo2": {
        "author": "alex-iam",
        "upvotes": 10,
        "body": "** u/alex-iam [[https://www.reddit.com/r/emacs/comments/t3_1mnxffy/comment/t1_n8hzgo2][\ud83d\udd17]] \n*Votes* 10\n\nI've created this hledger-ts-mode: [[https://codeberg.org/alex-iam/hledger-ts-mode][https://codeberg.org/alex-iam/hledger-ts-mode]] . Hledger is a plain text accounting tool. The mode is not very developed, right now only syntax highlighting and indentation work, so I decided not to create a post. I'm not sure if I will ever develop it much further, as it is enough for my usage.  \nAlso, for this to make sense I had to develop a grammar: [[https://codeberg.org/alex-iam/tree-sitter-hledger][https://codeberg.org/alex-iam/tree-sitter-hledger]]",
        "created_datetime": "2025-08-13 17:08:33+00:00"
    },
    "t1_n896whs": {
        "author": "sauntcartas",
        "upvotes": 11,
        "body": "** u/sauntcartas [[https://www.reddit.com/r/emacs/comments/t3_1mnxffy/comment/t1_n896whs][\ud83d\udd17]] \n*Votes* 11\n\nI use EMMS to listen to very long MP3 files, often over several login sessions.  I can't easily remember what time I left off playing a particular file at, so I arranged for it to be saved whenever I pause:\n\n#+BEGIN_SRC elisp\n(defun save-playing-time-on-pause ()\n  (when emms-player-paused-p\n    (write-region\n     (format \"%s %d:%02d\"\n             (emms-track-name (emms-playlist-current-selected-track))\n             (/ emms-playing-time 60)\n             (mod emms-playing-time 60))\n     nil\n     \"~/.emms-paused\")))\n\n(add-hook 'emms-player-paused-hook #'save-playing-time-on-pause)\n\n#+END_SRC\nOne of these days I'll write a command to automatically resume playing the last file I paused at the right position.",
        "created_datetime": "2025-08-12 08:22:22+00:00"
    },
    "t1_n3cylz1": {
        "author": "Argletrough",
        "upvotes": 8,
        "body": "** u/Argletrough [[https://www.reddit.com/r/emacs/comments/t3_1m06p9l/comment/t1_n3cylz1][\ud83d\udd17]] \n*Votes* 8\n\nA possibly lesser-known recent Emacs feature is ~tab-line-mode~, which provides a tab for each recent buffer on each window, similarly to the tabs in VSCode.\n\nBy default, tab-line tabs are closed by calling ~bury-buffer~, which unintuitively switches to an arbitrary buffer when attempting to close a window's only tab. This function calls ~delete-window~ if there is only 1 tab, which is more intuitive:\n\n#+BEGIN_SRC elisp\n(defun my-close-window-if-last-tab (buffer)\n  \"Close the tab associated with BUFFER, and ~delete-window' if no other tabs.\"\n  (cond\n   ((length= (tab-line-tabs-window-buffers) 1)\n    (delete-window))\n   ((eq buffer (current-buffer))\n    (bury-buffer))\n   (t\n    (set-window-prev-buffers nil (assq-delete-all buffer (window-prev-buffers)))\n    (set-window-next-buffers nil (delq buffer (window-next-buffers))))))\n\n(setopt tab-line-close-tab-function #'my-close-window-if-last-tab)\n(global-tab-line-mode 1)\n\n#+END_SRC\nFYI, you can middle-click a tab-line or tab-bar tab to close it, which is easier than trying to hit that tiny \u00d7 button.",
        "created_datetime": "2025-07-16 00:10:56+00:00"
    }
}